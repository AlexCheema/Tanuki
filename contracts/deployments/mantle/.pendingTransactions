{
  "0xbf9d5c62e21f4e3e250a1cfd7fe5cab1df2554b3cff1e97ebb8f3996aee4276c": {
    "name": "GovernorContract",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "GovernorContract",
      "sourceName": "contracts/governance_standard/GovernorContract.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract IVotes",
              "name": "_token",
              "type": "address"
            },
            {
              "internalType": "contract TimelockController",
              "name": "_timelock",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quorumPercentage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_votingPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_votingDelay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_scoreProviderAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "Empty",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            }
          ],
          "name": "ProposalCanceled",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "indexed": false,
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "indexed": false,
              "internalType": "string[]",
              "name": "signatures",
              "type": "string[]"
            },
            {
              "indexed": false,
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "endBlock",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "name": "ProposalCreated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            }
          ],
          "name": "ProposalExecuted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "eta",
              "type": "uint256"
            }
          ],
          "name": "ProposalQueued",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldProposalThreshold",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newProposalThreshold",
              "type": "uint256"
            }
          ],
          "name": "ProposalThresholdSet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldQuorumNumerator",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newQuorumNumerator",
              "type": "uint256"
            }
          ],
          "name": "QuorumNumeratorUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "oldTimelock",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "newTimelock",
              "type": "address"
            }
          ],
          "name": "TimelockChange",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "name": "VoteCast",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "reason",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "name": "VoteCastWithParams",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldVotingDelay",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newVotingDelay",
              "type": "uint256"
            }
          ],
          "name": "VotingDelaySet",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "oldVotingPeriod",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newVotingPeriod",
              "type": "uint256"
            }
          ],
          "name": "VotingPeriodSet",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "BALLOT_TYPEHASH",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "COUNTING_MODE",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "EXTENDED_BALLOT_TYPEHASH",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            }
          ],
          "name": "castVote",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "name": "castVoteBySig",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            }
          ],
          "name": "castVoteWithReason",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "name": "castVoteWithReasonAndParams",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "reason",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "name": "castVoteWithReasonAndParamsBySig",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "bytes32",
              "name": "descriptionHash",
              "type": "bytes32"
            }
          ],
          "name": "execute",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "name": "getVotes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "name": "getVotesWithParams",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "hasVoted",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "bytes32",
              "name": "descriptionHash",
              "type": "bytes32"
            }
          ],
          "name": "hashProposal",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "name": "onERC1155BatchReceived",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "name": "onERC1155Received",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "name": "onERC721Received",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            }
          ],
          "name": "proposalDeadline",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            }
          ],
          "name": "proposalEta",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            }
          ],
          "name": "proposalSnapshot",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "proposalThreshold",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            }
          ],
          "name": "proposalVotes",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "againstVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "forVotes",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "abstainVotes",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "name": "propose",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "targets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes[]",
              "name": "calldatas",
              "type": "bytes[]"
            },
            {
              "internalType": "bytes32",
              "name": "descriptionHash",
              "type": "bytes32"
            }
          ],
          "name": "queue",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "name": "quorum",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "quorumDenominator",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "name": "quorumNumerator",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "quorumNumerator",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "relay",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newProposalThreshold",
              "type": "uint256"
            }
          ],
          "name": "setProposalThreshold",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newVotingDelay",
              "type": "uint256"
            }
          ],
          "name": "setVotingDelay",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newVotingPeriod",
              "type": "uint256"
            }
          ],
          "name": "setVotingPeriod",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            }
          ],
          "name": "state",
          "outputs": [
            {
              "internalType": "enum IGovernor.ProposalState",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "timelock",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "token",
          "outputs": [
            {
              "internalType": "contract IVotes",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newQuorumNumerator",
              "type": "uint256"
            }
          ],
          "name": "updateQuorumNumerator",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract TimelockController",
              "name": "newTimelock",
              "type": "address"
            }
          ],
          "name": "updateTimelock",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "votingDelay",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "votingPeriod",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "bytecode": "0x610160604052600d80546001600160a01b03191673cbe9771ed31e761b744d3cb9ef78a1f32dd992111790553480156200003857600080fd5b50604051620046bd380380620046bd8339810160408190526200005b91620008fd565b848487848660006040518060400160405280601081526020016f11dbdd995c9b9bdc90dbdb9d1c9858dd60821b815250806200009c620001ba60201b60201c565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c052610120525050825162000142925060009150602084019062000848565b5062000150905083620001d5565b6200015b8262000216565b6200016681620002bd565b5050506001600160a01b0316610140526200018181620002fe565b506200018d8162000476565b50600c80546001600160a01b0319166001600160a01b039290921691909117905550620009d19350505050565b6040805180820190915260018152603160f81b602082015290565b60045460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600455565b600081116200027c5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084015b60405180910390fd5b60055460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600555565b60065460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600655565b6064811115620003835760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40162000273565b60006200038f620004df565b90508015801590620003a15750600954155b156200041c5760096000016040518060400160405280600063ffffffff168152602001620003da846200051760201b620014ad1760201c565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b620004378260096200058660201b6200151a1790919060201c565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b600a54604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600954600090156200051057620005026009620005d960201b620015501760201c565b6001600160e01b0316905090565b5060085490565b60006001600160e01b03821115620005825760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840162000273565b5090565b600080620005c384600001620005a7436200062760201b6200158e1760201c565b620005bd866200051760201b620014ad1760201c565b6200068e565b6001600160e01b03918216969116945092505050565b805460009080156200061d576200060583620005f76001846200096e565b600091825260209091200190565b5464010000000090046001600160e01b031662000620565b60005b9392505050565b600063ffffffff821115620005825760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840162000273565b825460009081908015620007ea576000620006b087620005f76001856200096e565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b031660208401529192509087161015620007345760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b6579000000000000000000604482015260640162000273565b8563ffffffff16816000015163ffffffff1614156200078957846200076088620005f76001866200096e565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055620007d9565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b602001519250839150620008409050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a8152918220955192519093166401000000000291909316179201919091559050815b935093915050565b828054620008569062000994565b90600052602060002090601f0160209004810192826200087a5760008555620008c5565b82601f106200089557805160ff1916838001178555620008c5565b82800160010185558215620008c5579182015b82811115620008c5578251825591602001919060010190620008a8565b50620005829291505b80821115620005825760008155600101620008ce565b6001600160a01b0381168114620008fa57600080fd5b50565b60008060008060008060c087890312156200091757600080fd5b86516200092481620008e4565b60208801519096506200093781620008e4565b8095505060408701519350606087015192506080870151915060a08701516200096081620008e4565b809150509295509295509295565b6000828210156200098f57634e487b7160e01b600052601160045260246000fd5b500390565b600181811c90821680620009a957607f821691505b60208210811415620009cb57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161014051613c8362000a3a6000396000818161086901528181612146015261235b01526000612681015260006126d0015260006126ab015260006126040152600061262e015260006126580152613c836000f3fe60806040526004361061024a5760003560e01c80637b3c71d311610139578063c28bc2fa116100b6578063ea0217cf1161007a578063ea0217cf146107ab578063eb9019d4146107cb578063ece40cc1146107eb578063f23a6e611461080b578063f8ce560a14610837578063fc0c546a1461085757600080fd5b8063c28bc2fa146106cc578063c59057e4146106df578063d33219b4146106ff578063dd4e2ba514610731578063deaaa7cc1461077757600080fd5b8063a890c910116100fd578063a890c9101461062b578063ab58fb8e1461064b578063b58131b01461066b578063bc197c8114610680578063c01f9e37146106ac57600080fd5b80637b3c71d3146105a25780637d5e81e2146105c257806397c3d334146105e25780639a802a6d146105f6578063a7713a701461061657600080fd5b80633932abb1116101c757806354fd4d501161018b57806354fd4d50146104f857806356781388146105225780635f398a141461054257806360c4247f1461056257806370b0f6601461058257600080fd5b80633932abb1146103f75780633bccf4fd1461040c5780633e4f49e61461042c5780634385963214610459578063544ffc9c146104a357600080fd5b8063150b7a021161020e578063150b7a021461032c578063160cbed7146103705780632656227d146103905780632d63f693146103a35780632fe3e261146103c357600080fd5b806301ffc9a71461027257806302a251a3146102a757806303420181146102ca57806306f3f9e6146102ea57806306fdde031461030a57600080fd5b3661026d573061025861088b565b6001600160a01b03161461026b57600080fd5b005b600080fd5b34801561027e57600080fd5b5061029261028d366004612db9565b6108a4565b60405190151581526020015b60405180910390f35b3480156102b357600080fd5b506102bc6108b5565b60405190815260200161029e565b3480156102d657600080fd5b506102bc6102e5366004612ef7565b6108c0565b3480156102f657600080fd5b5061026b610305366004612f9d565b6109b8565b34801561031657600080fd5b5061031f610a50565b60405161029e9190613003565b34801561033857600080fd5b5061035761034736600461302b565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161029e565b34801561037c57600080fd5b506102bc61038b366004613207565b610ae2565b6102bc61039e366004613207565b610ce2565b3480156103af57600080fd5b506102bc6103be366004612f9d565b610dcf565b3480156103cf57600080fd5b506102bc7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af8881565b34801561040357600080fd5b506102bc610e06565b34801561041857600080fd5b506102bc610427366004613296565b610e11565b34801561043857600080fd5b5061044c610447366004612f9d565b610e87565b60405161029e91906132fa565b34801561046557600080fd5b50610292610474366004613322565b60008281526007602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156104af57600080fd5b506104dd6104be366004612f9d565b6000908152600760205260409020805460018201546002909201549092565b6040805193845260208401929092529082015260600161029e565b34801561050457600080fd5b506040805180820190915260018152603160f81b602082015261031f565b34801561052e57600080fd5b506102bc61053d366004613352565b610e92565b34801561054e57600080fd5b506102bc61055d36600461337e565b610ebb565b34801561056e57600080fd5b506102bc61057d366004612f9d565b610f05565b34801561058e57600080fd5b5061026b61059d366004612f9d565b610f9a565b3480156105ae57600080fd5b506102bc6105bd366004613401565b611026565b3480156105ce57600080fd5b506102bc6105dd36600461345a565b611078565b3480156105ee57600080fd5b5060646102bc565b34801561060257600080fd5b506102bc61061136600461350e565b61108f565b34801561062257600080fd5b506102bc6110a6565b34801561063757600080fd5b5061026b610646366004613566565b6110d0565b34801561065757600080fd5b506102bc610666366004612f9d565b61115c565b34801561067757600080fd5b506102bc6111f6565b34801561068c57600080fd5b5061035761069b366004613583565b63bc197c8160e01b95945050505050565b3480156106b857600080fd5b506102bc6106c7366004612f9d565b611201565b61026b6106da366004613616565b611230565b3480156106eb57600080fd5b506102bc6106fa366004613207565b611344565b34801561070b57600080fd5b50600a546001600160a01b03165b6040516001600160a01b03909116815260200161029e565b34801561073d57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e9082015261031f565b34801561078357600080fd5b506102bc7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b3480156107b757600080fd5b5061026b6107c6366004612f9d565b61137e565b3480156107d757600080fd5b506102bc6107e6366004613659565b61140a565b3480156107f757600080fd5b5061026b610806366004612f9d565b611416565b34801561081757600080fd5b50610357610826366004613685565b63f23a6e6160e01b95945050505050565b34801561084357600080fd5b506102bc610852366004612f9d565b6114a2565b34801561086357600080fd5b506107197f000000000000000000000000000000000000000000000000000000000000000081565b600061089f600a546001600160a01b031690565b905090565b60006108af826115f3565b92915050565b600061089f60055490565b60008061096461095c7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af888c8c8c8c6040516108fc9291906136ed565b60405180910390208b80519060200120604051602001610941959493929190948552602085019390935260ff9190911660408401526060830152608082015260a00190565b60405160208183030381529060405280519060200120611618565b868686611666565b90506109aa8a828b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611684915050565b9a9950505050505050505050565b6109c061088b565b6001600160a01b0316336001600160a01b0316146109f95760405162461bcd60e51b81526004016109f0906136fd565b60405180910390fd5b30610a0261088b565b6001600160a01b031614610a445760008036604051610a229291906136ed565b604051809103902090505b80610a3860026117e6565b14610a4257610a2d565b505b610a4d81611865565b50565b606060008054610a5f90613734565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8b90613734565b8015610ad85780601f10610aad57610100808354040283529160200191610ad8565b820191906000526020600020905b815481529060010190602001808311610abb57829003601f168201915b5050505050905090565b600080610af186868686611344565b90506004610afe82610e87565b6007811115610b0f57610b0f6132e4565b14610b2c5760405162461bcd60e51b81526004016109f09061376f565b600a546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a91906137b0565b600a5460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610bd4908a908a908a906000908b90600401613892565b602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1591906137b0565b6000838152600b602052604080822092909255600a5491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610c60918b918b918b91908b9089906004016138e0565b600060405180830381600087803b158015610c7a57600080fd5b505af1158015610c8e573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610cc0919061394e565b6040805192835260208301919091520160405180910390a15095945050505050565b600080610cf186868686611344565b90506000610cfe82610e87565b90506004816007811115610d1457610d146132e4565b1480610d3157506005816007811115610d2f57610d2f6132e4565b145b610d4d5760405162461bcd60e51b81526004016109f09061376f565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610dab82888888886119b1565b610db88288888888611a54565b610dc58288888888611a61565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b600061089f60045490565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610e5f9061095c90608001610941565b9050610e7c87828860405180602001604052806000815250611a9a565b979650505050505050565b60006108af82611c1d565b600080339050610eb384828560405180602001604052806000815250611a9a565b949350505050565b600080339050610e7c87828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611684915050565b60095460009080610f1a575050600854919050565b60006009610f29600184613966565b81548110610f3957610f3961397d565b60009182526020918290206040805180820190915291015463ffffffff8116808352600160201b9091046001600160e01b03169282019290925291508410610f8f57602001516001600160e01b03169392505050565b610eb3600985611d67565b610fa261088b565b6001600160a01b0316336001600160a01b031614610fd25760405162461bcd60e51b81526004016109f0906136fd565b30610fdb61088b565b6001600160a01b03161461101d5760008036604051610ffb9291906136ed565b604051809103902090505b8061101160026117e6565b1461101b57611006565b505b610a4d81611e19565b60008033905061106e86828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a9a92505050565b9695505050505050565b600061108685858585611e5a565b95945050505050565b600061109c84848461211d565b90505b9392505050565b600954600090156110c9576110bb6009611550565b6001600160e01b0316905090565b5060085490565b6110d861088b565b6001600160a01b0316336001600160a01b0316146111085760405162461bcd60e51b81526004016109f0906136fd565b3061111161088b565b6001600160a01b03161461115357600080366040516111319291906136ed565b604051809103902090505b8061114760026117e6565b146111515761113c565b505b610a4d816121b3565b600a546000828152600b602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa1580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd91906137b0565b9050806001146111ed578061109f565b60009392505050565b600061089f60065490565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610df7565b61123861088b565b6001600160a01b0316336001600160a01b0316146112685760405162461bcd60e51b81526004016109f0906136fd565b3061127161088b565b6001600160a01b0316146112b357600080366040516112919291906136ed565b604051809103902090505b806112a760026117e6565b146112b15761129c565b505b600080856001600160a01b03168585856040516112d19291906136ed565b60006040518083038185875af1925050503d806000811461130e576040519150601f19603f3d011682016040523d82523d6000602084013e611313565b606091505b509150915061133b8282604051806060016040528060288152602001613c266028913961221c565b50505050505050565b60008484848460405160200161135d9493929190613993565b60408051601f19818403018152919052805160209091012095945050505050565b61138661088b565b6001600160a01b0316336001600160a01b0316146113b65760405162461bcd60e51b81526004016109f0906136fd565b306113bf61088b565b6001600160a01b03161461140157600080366040516113df9291906136ed565b604051809103902090505b806113f560026117e6565b146113ff576113ea565b505b610a4d81612235565b600061109f83836122d6565b61141e61088b565b6001600160a01b0316336001600160a01b03161461144e5760405162461bcd60e51b81526004016109f0906136fd565b3061145761088b565b6001600160a01b03161461149957600080366040516114779291906136ed565b604051809103902090505b8061148d60026117e6565b1461149757611482565b505b610a4d816122f7565b60006108af82612338565b60006001600160e01b038211156115165760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016109f0565b5090565b6000806115388461152a4361158e565b611533866114ad565b6123e2565b6001600160e01b0391821693501690505b9250929050565b805460009080156111ed576115788361156a600184613966565b600091825260209091200190565b54600160201b90046001600160e01b031661109f565b600063ffffffff8211156115165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016109f0565b60006001600160e01b03198216636e665ced60e01b14806108af57506108af8261258c565b60006108af6116256125f7565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006116778787878761271e565b91509150610dc5816127e2565b600085815260016020819052604082209061169e88610e87565b60078111156116af576116af6132e4565b146117085760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b60648201526084016109f0565b604080516020810190915281546001600160401b0316908190526000906117319088908661211d565b90506117408888888488612930565b835161179257866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48988848960405161178594939291906139de565b60405180910390a2610e7c565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb871289888489896040516117d3959493929190613a06565b60405180910390a2979650505050505050565b60006118018254600f81810b600160801b909204900b131590565b1561181f57604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016001600160801b03169190911790915590565b60648111156118e85760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a4016109f0565b60006118f26110a6565b905080158015906119035750600954155b1561196757604080518082019091526000815260099060208101611926846114ad565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b61197260098361151a565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b306119ba61088b565b6001600160a01b031614611a4d5760005b8451811015611a4b57306001600160a01b03168582815181106119f0576119f061397d565b60200260200101516001600160a01b03161415611a3b57611a3b838281518110611a1c57611a1c61397d565b6020026020010151805190602001206002612aaf90919063ffffffff16565b611a4481613a4c565b90506119cb565b505b5050505050565b611a4d8585858585612aeb565b30611a6a61088b565b6001600160a01b031614611a4d57600254600f81810b600160801b909204900b1315611a4d576000600255611a4d565b600080611abe86868686611ab960408051602081019091526000815290565b611684565b600c549091506000906001600160a01b031663db230b52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3e91906137b0565b9050620186a0600060648311611b545782611b57565b60645b9050600082611b663a84613a67565b611b709190613a67565b90506000611b7f826064612b5f565b600d549091506001600160a01b03166323b872dd30336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af1158015611be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0d9190613a86565b50949a9950505050505050505050565b600080611c2983612b6b565b90506004816007811115611c3f57611c3f6132e4565b14611c4a5792915050565b6000838152600b602052604090205480611c65575092915050565b600a54604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd29190613a86565b15611ce1575060079392505050565b600a54604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e90602401602060405180830381865afa158015611d2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4e9190613a86565b15611d5d575060059392505050565b5060029392505050565b6000438210611db85760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e656460448201526064016109f0565b6000611dc38361158e565b84549091506000611dd686848385612c77565b90508015611e0357611ded8661156a600184613966565b54600160201b90046001600160e01b0316611e06565b60005b6001600160e01b03169695505050505050565b60045460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600455565b6000611e646111f6565b611e73336107e6600143613966565b1015611edb5760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f723a2070726f706f73657220766f7465732062656c6f7720706044820152701c9bdc1bdcd85b081d1a1c995cda1bdb19607a1b60648201526084016109f0565b6000611ef08686868680519060200120611344565b90508451865114611f135760405162461bcd60e51b81526004016109f090613aa8565b8351865114611f345760405162461bcd60e51b81526004016109f090613aa8565b6000865111611f855760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c000000000000000060448201526064016109f0565b600081815260016020908152604091829020825191820190925281546001600160401b031690819052156120055760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b60648201526084016109f0565b6000612017612012610e06565b612cd5565b61202043612cd5565b61202a9190613ae9565b905060006120396120126108b5565b6120439083613ae9565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b038111156120bb576120bb612e3a565b6040519080825280602002602001820160405280156120ee57816020015b60608152602001906001900390816120d95790505b508c88888e60405161210899989796959493929190613b14565b60405180910390a15091979650505050505050565b604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa15801561218f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109c91906137b0565b600a54604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6060831561222b57508161109f565b61109f8383612d3d565b600081116122955760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084016109f0565b60055460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600555565b600061109f83836122f260408051602081019091526000815290565b61211d565b60065460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600655565b6000606461234583610f05565b604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156123aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ce91906137b0565b6123d89190613a67565b6108af9190613c03565b82546000908190801561252f5760006124008761156a600185613966565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b0316602084015291925090871610156124815760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b657900000000000000000060448201526064016109f0565b8563ffffffff16816000015163ffffffff1614156124d057846124a98861156a600186613966565b80546001600160e01b0392909216600160201b0263ffffffff90921691909117905561251f565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b6020015192508391506125849050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b0291909316179201919091559050815b935093915050565b60006001600160e01b0319821663bf26d89760e01b14806125bd57506001600160e01b031982166379dd796f60e01b145b806125d857506001600160e01b03198216630271189760e51b145b806108af57506301ffc9a760e01b6001600160e01b03198316146108af565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561265057507f000000000000000000000000000000000000000000000000000000000000000046145b1561267a57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561275557506000905060036127d9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156127a9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166127d2576000600192509250506127d9565b9150600090505b94509492505050565b60008160048111156127f6576127f66132e4565b14156127ff5750565b6001816004811115612813576128136132e4565b14156128615760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016109f0565b6002816004811115612875576128756132e4565b14156128c35760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016109f0565b60038160048111156128d7576128d76132e4565b1415610a4d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016109f0565b60008581526007602090815260408083206001600160a01b0388168452600381019092529091205460ff16156129b85760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b60648201526084016109f0565b6001600160a01b03851660009081526003820160205260408120805460ff1916600117905560ff168460ff161415612a0957828160000160008282546129fe919061394e565b90915550611a4b9050565b60ff841660011415612a2957828160010160008282546129fe919061394e565b60ff841660021415612a4957828160020160008282546129fe919061394e565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b60648201526084016109f0565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b600a5460405163e38335e560e01b81526001600160a01b039091169063e38335e5903490612b26908890889088906000908990600401613892565b6000604051808303818588803b158015612b3f57600080fd5b505af1158015612b53573d6000803e3d6000fd5b50505050505050505050565b600061109f8284613c03565b6000818152600160205260408120600281015460ff1615612b8f5750600792915050565b6002810154610100900460ff1615612baa5750600292915050565b6000612bb584610dcf565b905080612c045760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c20696400000060448201526064016109f0565b438110612c15575060009392505050565b6000612c2085611201565b9050438110612c3457506001949350505050565b612c3d85612d67565b8015612c5c575060008581526007602052604090208054600190910154115b15612c6c57506004949350505050565b506003949350505050565b60005b81831015612ccd576000612c8e8484612d9e565b60008781526020902090915063ffffffff86169082015463ffffffff161115612cb957809250612cc7565b612cc481600161394e565b93505b50612c7a565b509392505050565b60006001600160401b038211156115165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016109f0565b815115612d4d5781518083602001fd5b8060405162461bcd60e51b81526004016109f09190613003565b600081815260076020526040812060028101546001820154612d89919061394e565b612d9561085285610dcf565b11159392505050565b6000612dad6002848418613c03565b61109f9084841661394e565b600060208284031215612dcb57600080fd5b81356001600160e01b03198116811461109f57600080fd5b803560ff81168114612df457600080fd5b919050565b60008083601f840112612e0b57600080fd5b5081356001600160401b03811115612e2257600080fd5b60208301915083602082850101111561154957600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612e7857612e78612e3a565b604052919050565b60006001600160401b03831115612e9957612e99612e3a565b612eac601f8401601f1916602001612e50565b9050828152838383011115612ec057600080fd5b828260208301376000602084830101529392505050565b600082601f830112612ee857600080fd5b61109f83833560208501612e80565b60008060008060008060008060e0898b031215612f1357600080fd5b88359750612f2360208a01612de3565b965060408901356001600160401b0380821115612f3f57600080fd5b612f4b8c838d01612df9565b909850965060608b0135915080821115612f6457600080fd5b50612f718b828c01612ed7565b945050612f8060808a01612de3565b925060a0890135915060c089013590509295985092959890939650565b600060208284031215612faf57600080fd5b5035919050565b6000815180845260005b81811015612fdc57602081850181015186830182015201612fc0565b81811115612fee576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061109f6020830184612fb6565b6001600160a01b0381168114610a4d57600080fd5b6000806000806080858703121561304157600080fd5b843561304c81613016565b9350602085013561305c81613016565b92506040850135915060608501356001600160401b0381111561307e57600080fd5b61308a87828801612ed7565b91505092959194509250565b60006001600160401b038211156130af576130af612e3a565b5060051b60200190565b600082601f8301126130ca57600080fd5b813560206130df6130da83613096565b612e50565b82815260059290921b840181019181810190868411156130fe57600080fd5b8286015b8481101561312257803561311581613016565b8352918301918301613102565b509695505050505050565b600082601f83011261313e57600080fd5b8135602061314e6130da83613096565b82815260059290921b8401810191818101908684111561316d57600080fd5b8286015b848110156131225780358352918301918301613171565b600082601f83011261319957600080fd5b813560206131a96130da83613096565b82815260059290921b840181019181810190868411156131c857600080fd5b8286015b848110156131225780356001600160401b038111156131eb5760008081fd5b6131f98986838b0101612ed7565b8452509183019183016131cc565b6000806000806080858703121561321d57600080fd5b84356001600160401b038082111561323457600080fd5b613240888389016130b9565b9550602087013591508082111561325657600080fd5b6132628883890161312d565b9450604087013591508082111561327857600080fd5b5061328587828801613188565b949793965093946060013593505050565b600080600080600060a086880312156132ae57600080fd5b853594506132be60208701612de3565b93506132cc60408701612de3565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061331c57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561333557600080fd5b82359150602083013561334781613016565b809150509250929050565b6000806040838503121561336557600080fd5b8235915061337560208401612de3565b90509250929050565b60008060008060006080868803121561339657600080fd5b853594506133a660208701612de3565b935060408601356001600160401b03808211156133c257600080fd5b6133ce89838a01612df9565b909550935060608801359150808211156133e757600080fd5b506133f488828901612ed7565b9150509295509295909350565b6000806000806060858703121561341757600080fd5b8435935061342760208601612de3565b925060408501356001600160401b0381111561344257600080fd5b61344e87828801612df9565b95989497509550505050565b6000806000806080858703121561347057600080fd5b84356001600160401b038082111561348757600080fd5b613493888389016130b9565b955060208701359150808211156134a957600080fd5b6134b58883890161312d565b945060408701359150808211156134cb57600080fd5b6134d788838901613188565b935060608701359150808211156134ed57600080fd5b508501601f810187136134ff57600080fd5b61308a87823560208401612e80565b60008060006060848603121561352357600080fd5b833561352e81613016565b92506020840135915060408401356001600160401b0381111561355057600080fd5b61355c86828701612ed7565b9150509250925092565b60006020828403121561357857600080fd5b813561109f81613016565b600080600080600060a0868803121561359b57600080fd5b85356135a681613016565b945060208601356135b681613016565b935060408601356001600160401b03808211156135d257600080fd5b6135de89838a0161312d565b945060608801359150808211156135f457600080fd5b61360089838a0161312d565b935060808801359150808211156133e757600080fd5b6000806000806060858703121561362c57600080fd5b843561363781613016565b93506020850135925060408501356001600160401b0381111561344257600080fd5b6000806040838503121561366c57600080fd5b823561367781613016565b946020939093013593505050565b600080600080600060a0868803121561369d57600080fd5b85356136a881613016565b945060208601356136b881613016565b9350604086013592506060860135915060808601356001600160401b038111156136e157600080fd5b6133f488828901612ed7565b8183823760009101908152919050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c9082168061374857607f821691505b6020821081141561376957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b6000602082840312156137c257600080fd5b5051919050565b600081518084526020808501945080840160005b838110156138025781516001600160a01b0316875295820195908201906001016137dd565b509495945050505050565b600081518084526020808501945080840160005b8381101561380257815187529582019590820190600101613821565b600081518084526020808501808196508360051b8101915082860160005b85811015613885578284038952613873848351612fb6565b9885019893509084019060010161385b565b5091979650505050505050565b60a0815260006138a560a08301886137c9565b82810360208401526138b7818861380d565b905082810360408401526138cb818761383d565b60608401959095525050608001529392505050565b60c0815260006138f360c08301896137c9565b8281036020840152613905818961380d565b90508281036040840152613919818861383d565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561396157613961613938565b500190565b60008282101561397857613978613938565b500390565b634e487b7160e01b600052603260045260246000fd5b6080815260006139a660808301876137c9565b82810360208401526139b8818761380d565b905082810360408401526139cc818661383d565b91505082606083015295945050505050565b84815260ff8416602082015282604082015260806060820152600061106e6080830184612fb6565b85815260ff8516602082015283604082015260a060608201526000613a2e60a0830185612fb6565b8281036080840152613a408185612fb6565b98975050505050505050565b6000600019821415613a6057613a60613938565b5060010190565b6000816000190483118215151615613a8157613a81613938565b500290565b600060208284031215613a9857600080fd5b8151801515811461109f57600080fd5b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115613b0b57613b0b613938565b01949350505050565b60006101208b8352602060018060a01b038c1681850152816040850152613b3d8285018c6137c9565b91508382036060850152613b51828b61380d565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015613ba257601f19878403018552613b90838351612fb6565b94860194925090850190600101613b74565b505086810360a0880152613bb6818c61383d565b945050505050613bd160c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152613bf38185612fb6565b9c9b505050505050505050505050565b600082613c2057634e487b7160e01b600052601260045260246000fd5b50049056fe476f7665726e6f723a2072656c617920726576657274656420776974686f7574206d657373616765a2646970667358221220acbff85bd0305382ce013a1f5743bfbd45a98c83f3c4bf5a71d76dd28ac79c7364736f6c634300080c0033",
      "deployedBytecode": "0x60806040526004361061024a5760003560e01c80637b3c71d311610139578063c28bc2fa116100b6578063ea0217cf1161007a578063ea0217cf146107ab578063eb9019d4146107cb578063ece40cc1146107eb578063f23a6e611461080b578063f8ce560a14610837578063fc0c546a1461085757600080fd5b8063c28bc2fa146106cc578063c59057e4146106df578063d33219b4146106ff578063dd4e2ba514610731578063deaaa7cc1461077757600080fd5b8063a890c910116100fd578063a890c9101461062b578063ab58fb8e1461064b578063b58131b01461066b578063bc197c8114610680578063c01f9e37146106ac57600080fd5b80637b3c71d3146105a25780637d5e81e2146105c257806397c3d334146105e25780639a802a6d146105f6578063a7713a701461061657600080fd5b80633932abb1116101c757806354fd4d501161018b57806354fd4d50146104f857806356781388146105225780635f398a141461054257806360c4247f1461056257806370b0f6601461058257600080fd5b80633932abb1146103f75780633bccf4fd1461040c5780633e4f49e61461042c5780634385963214610459578063544ffc9c146104a357600080fd5b8063150b7a021161020e578063150b7a021461032c578063160cbed7146103705780632656227d146103905780632d63f693146103a35780632fe3e261146103c357600080fd5b806301ffc9a71461027257806302a251a3146102a757806303420181146102ca57806306f3f9e6146102ea57806306fdde031461030a57600080fd5b3661026d573061025861088b565b6001600160a01b03161461026b57600080fd5b005b600080fd5b34801561027e57600080fd5b5061029261028d366004612db9565b6108a4565b60405190151581526020015b60405180910390f35b3480156102b357600080fd5b506102bc6108b5565b60405190815260200161029e565b3480156102d657600080fd5b506102bc6102e5366004612ef7565b6108c0565b3480156102f657600080fd5b5061026b610305366004612f9d565b6109b8565b34801561031657600080fd5b5061031f610a50565b60405161029e9190613003565b34801561033857600080fd5b5061035761034736600461302b565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161029e565b34801561037c57600080fd5b506102bc61038b366004613207565b610ae2565b6102bc61039e366004613207565b610ce2565b3480156103af57600080fd5b506102bc6103be366004612f9d565b610dcf565b3480156103cf57600080fd5b506102bc7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af8881565b34801561040357600080fd5b506102bc610e06565b34801561041857600080fd5b506102bc610427366004613296565b610e11565b34801561043857600080fd5b5061044c610447366004612f9d565b610e87565b60405161029e91906132fa565b34801561046557600080fd5b50610292610474366004613322565b60008281526007602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156104af57600080fd5b506104dd6104be366004612f9d565b6000908152600760205260409020805460018201546002909201549092565b6040805193845260208401929092529082015260600161029e565b34801561050457600080fd5b506040805180820190915260018152603160f81b602082015261031f565b34801561052e57600080fd5b506102bc61053d366004613352565b610e92565b34801561054e57600080fd5b506102bc61055d36600461337e565b610ebb565b34801561056e57600080fd5b506102bc61057d366004612f9d565b610f05565b34801561058e57600080fd5b5061026b61059d366004612f9d565b610f9a565b3480156105ae57600080fd5b506102bc6105bd366004613401565b611026565b3480156105ce57600080fd5b506102bc6105dd36600461345a565b611078565b3480156105ee57600080fd5b5060646102bc565b34801561060257600080fd5b506102bc61061136600461350e565b61108f565b34801561062257600080fd5b506102bc6110a6565b34801561063757600080fd5b5061026b610646366004613566565b6110d0565b34801561065757600080fd5b506102bc610666366004612f9d565b61115c565b34801561067757600080fd5b506102bc6111f6565b34801561068c57600080fd5b5061035761069b366004613583565b63bc197c8160e01b95945050505050565b3480156106b857600080fd5b506102bc6106c7366004612f9d565b611201565b61026b6106da366004613616565b611230565b3480156106eb57600080fd5b506102bc6106fa366004613207565b611344565b34801561070b57600080fd5b50600a546001600160a01b03165b6040516001600160a01b03909116815260200161029e565b34801561073d57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e9082015261031f565b34801561078357600080fd5b506102bc7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b3480156107b757600080fd5b5061026b6107c6366004612f9d565b61137e565b3480156107d757600080fd5b506102bc6107e6366004613659565b61140a565b3480156107f757600080fd5b5061026b610806366004612f9d565b611416565b34801561081757600080fd5b50610357610826366004613685565b63f23a6e6160e01b95945050505050565b34801561084357600080fd5b506102bc610852366004612f9d565b6114a2565b34801561086357600080fd5b506107197f000000000000000000000000000000000000000000000000000000000000000081565b600061089f600a546001600160a01b031690565b905090565b60006108af826115f3565b92915050565b600061089f60055490565b60008061096461095c7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af888c8c8c8c6040516108fc9291906136ed565b60405180910390208b80519060200120604051602001610941959493929190948552602085019390935260ff9190911660408401526060830152608082015260a00190565b60405160208183030381529060405280519060200120611618565b868686611666565b90506109aa8a828b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611684915050565b9a9950505050505050505050565b6109c061088b565b6001600160a01b0316336001600160a01b0316146109f95760405162461bcd60e51b81526004016109f0906136fd565b60405180910390fd5b30610a0261088b565b6001600160a01b031614610a445760008036604051610a229291906136ed565b604051809103902090505b80610a3860026117e6565b14610a4257610a2d565b505b610a4d81611865565b50565b606060008054610a5f90613734565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8b90613734565b8015610ad85780601f10610aad57610100808354040283529160200191610ad8565b820191906000526020600020905b815481529060010190602001808311610abb57829003601f168201915b5050505050905090565b600080610af186868686611344565b90506004610afe82610e87565b6007811115610b0f57610b0f6132e4565b14610b2c5760405162461bcd60e51b81526004016109f09061376f565b600a546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a91906137b0565b600a5460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610bd4908a908a908a906000908b90600401613892565b602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1591906137b0565b6000838152600b602052604080822092909255600a5491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610c60918b918b918b91908b9089906004016138e0565b600060405180830381600087803b158015610c7a57600080fd5b505af1158015610c8e573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610cc0919061394e565b6040805192835260208301919091520160405180910390a15095945050505050565b600080610cf186868686611344565b90506000610cfe82610e87565b90506004816007811115610d1457610d146132e4565b1480610d3157506005816007811115610d2f57610d2f6132e4565b145b610d4d5760405162461bcd60e51b81526004016109f09061376f565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610dab82888888886119b1565b610db88288888888611a54565b610dc58288888888611a61565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b600061089f60045490565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610e5f9061095c90608001610941565b9050610e7c87828860405180602001604052806000815250611a9a565b979650505050505050565b60006108af82611c1d565b600080339050610eb384828560405180602001604052806000815250611a9a565b949350505050565b600080339050610e7c87828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611684915050565b60095460009080610f1a575050600854919050565b60006009610f29600184613966565b81548110610f3957610f3961397d565b60009182526020918290206040805180820190915291015463ffffffff8116808352600160201b9091046001600160e01b03169282019290925291508410610f8f57602001516001600160e01b03169392505050565b610eb3600985611d67565b610fa261088b565b6001600160a01b0316336001600160a01b031614610fd25760405162461bcd60e51b81526004016109f0906136fd565b30610fdb61088b565b6001600160a01b03161461101d5760008036604051610ffb9291906136ed565b604051809103902090505b8061101160026117e6565b1461101b57611006565b505b610a4d81611e19565b60008033905061106e86828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a9a92505050565b9695505050505050565b600061108685858585611e5a565b95945050505050565b600061109c84848461211d565b90505b9392505050565b600954600090156110c9576110bb6009611550565b6001600160e01b0316905090565b5060085490565b6110d861088b565b6001600160a01b0316336001600160a01b0316146111085760405162461bcd60e51b81526004016109f0906136fd565b3061111161088b565b6001600160a01b03161461115357600080366040516111319291906136ed565b604051809103902090505b8061114760026117e6565b146111515761113c565b505b610a4d816121b3565b600a546000828152600b602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa1580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd91906137b0565b9050806001146111ed578061109f565b60009392505050565b600061089f60065490565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610df7565b61123861088b565b6001600160a01b0316336001600160a01b0316146112685760405162461bcd60e51b81526004016109f0906136fd565b3061127161088b565b6001600160a01b0316146112b357600080366040516112919291906136ed565b604051809103902090505b806112a760026117e6565b146112b15761129c565b505b600080856001600160a01b03168585856040516112d19291906136ed565b60006040518083038185875af1925050503d806000811461130e576040519150601f19603f3d011682016040523d82523d6000602084013e611313565b606091505b509150915061133b8282604051806060016040528060288152602001613c266028913961221c565b50505050505050565b60008484848460405160200161135d9493929190613993565b60408051601f19818403018152919052805160209091012095945050505050565b61138661088b565b6001600160a01b0316336001600160a01b0316146113b65760405162461bcd60e51b81526004016109f0906136fd565b306113bf61088b565b6001600160a01b03161461140157600080366040516113df9291906136ed565b604051809103902090505b806113f560026117e6565b146113ff576113ea565b505b610a4d81612235565b600061109f83836122d6565b61141e61088b565b6001600160a01b0316336001600160a01b03161461144e5760405162461bcd60e51b81526004016109f0906136fd565b3061145761088b565b6001600160a01b03161461149957600080366040516114779291906136ed565b604051809103902090505b8061148d60026117e6565b1461149757611482565b505b610a4d816122f7565b60006108af82612338565b60006001600160e01b038211156115165760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016109f0565b5090565b6000806115388461152a4361158e565b611533866114ad565b6123e2565b6001600160e01b0391821693501690505b9250929050565b805460009080156111ed576115788361156a600184613966565b600091825260209091200190565b54600160201b90046001600160e01b031661109f565b600063ffffffff8211156115165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016109f0565b60006001600160e01b03198216636e665ced60e01b14806108af57506108af8261258c565b60006108af6116256125f7565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006116778787878761271e565b91509150610dc5816127e2565b600085815260016020819052604082209061169e88610e87565b60078111156116af576116af6132e4565b146117085760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b60648201526084016109f0565b604080516020810190915281546001600160401b0316908190526000906117319088908661211d565b90506117408888888488612930565b835161179257866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48988848960405161178594939291906139de565b60405180910390a2610e7c565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb871289888489896040516117d3959493929190613a06565b60405180910390a2979650505050505050565b60006118018254600f81810b600160801b909204900b131590565b1561181f57604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016001600160801b03169190911790915590565b60648111156118e85760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a4016109f0565b60006118f26110a6565b905080158015906119035750600954155b1561196757604080518082019091526000815260099060208101611926846114ad565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b61197260098361151a565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b306119ba61088b565b6001600160a01b031614611a4d5760005b8451811015611a4b57306001600160a01b03168582815181106119f0576119f061397d565b60200260200101516001600160a01b03161415611a3b57611a3b838281518110611a1c57611a1c61397d565b6020026020010151805190602001206002612aaf90919063ffffffff16565b611a4481613a4c565b90506119cb565b505b5050505050565b611a4d8585858585612aeb565b30611a6a61088b565b6001600160a01b031614611a4d57600254600f81810b600160801b909204900b1315611a4d576000600255611a4d565b600080611abe86868686611ab960408051602081019091526000815290565b611684565b600c549091506000906001600160a01b031663db230b52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3e91906137b0565b9050620186a0600060648311611b545782611b57565b60645b9050600082611b663a84613a67565b611b709190613a67565b90506000611b7f826064612b5f565b600d549091506001600160a01b03166323b872dd30336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af1158015611be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0d9190613a86565b50949a9950505050505050505050565b600080611c2983612b6b565b90506004816007811115611c3f57611c3f6132e4565b14611c4a5792915050565b6000838152600b602052604090205480611c65575092915050565b600a54604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd29190613a86565b15611ce1575060079392505050565b600a54604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e90602401602060405180830381865afa158015611d2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4e9190613a86565b15611d5d575060059392505050565b5060029392505050565b6000438210611db85760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e656460448201526064016109f0565b6000611dc38361158e565b84549091506000611dd686848385612c77565b90508015611e0357611ded8661156a600184613966565b54600160201b90046001600160e01b0316611e06565b60005b6001600160e01b03169695505050505050565b60045460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600455565b6000611e646111f6565b611e73336107e6600143613966565b1015611edb5760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f723a2070726f706f73657220766f7465732062656c6f7720706044820152701c9bdc1bdcd85b081d1a1c995cda1bdb19607a1b60648201526084016109f0565b6000611ef08686868680519060200120611344565b90508451865114611f135760405162461bcd60e51b81526004016109f090613aa8565b8351865114611f345760405162461bcd60e51b81526004016109f090613aa8565b6000865111611f855760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c000000000000000060448201526064016109f0565b600081815260016020908152604091829020825191820190925281546001600160401b031690819052156120055760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b60648201526084016109f0565b6000612017612012610e06565b612cd5565b61202043612cd5565b61202a9190613ae9565b905060006120396120126108b5565b6120439083613ae9565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b038111156120bb576120bb612e3a565b6040519080825280602002602001820160405280156120ee57816020015b60608152602001906001900390816120d95790505b508c88888e60405161210899989796959493929190613b14565b60405180910390a15091979650505050505050565b604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa15801561218f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109c91906137b0565b600a54604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6060831561222b57508161109f565b61109f8383612d3d565b600081116122955760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084016109f0565b60055460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600555565b600061109f83836122f260408051602081019091526000815290565b61211d565b60065460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600655565b6000606461234583610f05565b604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156123aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ce91906137b0565b6123d89190613a67565b6108af9190613c03565b82546000908190801561252f5760006124008761156a600185613966565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b0316602084015291925090871610156124815760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b657900000000000000000060448201526064016109f0565b8563ffffffff16816000015163ffffffff1614156124d057846124a98861156a600186613966565b80546001600160e01b0392909216600160201b0263ffffffff90921691909117905561251f565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b6020015192508391506125849050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b0291909316179201919091559050815b935093915050565b60006001600160e01b0319821663bf26d89760e01b14806125bd57506001600160e01b031982166379dd796f60e01b145b806125d857506001600160e01b03198216630271189760e51b145b806108af57506301ffc9a760e01b6001600160e01b03198316146108af565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561265057507f000000000000000000000000000000000000000000000000000000000000000046145b1561267a57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561275557506000905060036127d9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156127a9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166127d2576000600192509250506127d9565b9150600090505b94509492505050565b60008160048111156127f6576127f66132e4565b14156127ff5750565b6001816004811115612813576128136132e4565b14156128615760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016109f0565b6002816004811115612875576128756132e4565b14156128c35760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016109f0565b60038160048111156128d7576128d76132e4565b1415610a4d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016109f0565b60008581526007602090815260408083206001600160a01b0388168452600381019092529091205460ff16156129b85760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b60648201526084016109f0565b6001600160a01b03851660009081526003820160205260408120805460ff1916600117905560ff168460ff161415612a0957828160000160008282546129fe919061394e565b90915550611a4b9050565b60ff841660011415612a2957828160010160008282546129fe919061394e565b60ff841660021415612a4957828160020160008282546129fe919061394e565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b60648201526084016109f0565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b600a5460405163e38335e560e01b81526001600160a01b039091169063e38335e5903490612b26908890889088906000908990600401613892565b6000604051808303818588803b158015612b3f57600080fd5b505af1158015612b53573d6000803e3d6000fd5b50505050505050505050565b600061109f8284613c03565b6000818152600160205260408120600281015460ff1615612b8f5750600792915050565b6002810154610100900460ff1615612baa5750600292915050565b6000612bb584610dcf565b905080612c045760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c20696400000060448201526064016109f0565b438110612c15575060009392505050565b6000612c2085611201565b9050438110612c3457506001949350505050565b612c3d85612d67565b8015612c5c575060008581526007602052604090208054600190910154115b15612c6c57506004949350505050565b506003949350505050565b60005b81831015612ccd576000612c8e8484612d9e565b60008781526020902090915063ffffffff86169082015463ffffffff161115612cb957809250612cc7565b612cc481600161394e565b93505b50612c7a565b509392505050565b60006001600160401b038211156115165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016109f0565b815115612d4d5781518083602001fd5b8060405162461bcd60e51b81526004016109f09190613003565b600081815260076020526040812060028101546001820154612d89919061394e565b612d9561085285610dcf565b11159392505050565b6000612dad6002848418613c03565b61109f9084841661394e565b600060208284031215612dcb57600080fd5b81356001600160e01b03198116811461109f57600080fd5b803560ff81168114612df457600080fd5b919050565b60008083601f840112612e0b57600080fd5b5081356001600160401b03811115612e2257600080fd5b60208301915083602082850101111561154957600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612e7857612e78612e3a565b604052919050565b60006001600160401b03831115612e9957612e99612e3a565b612eac601f8401601f1916602001612e50565b9050828152838383011115612ec057600080fd5b828260208301376000602084830101529392505050565b600082601f830112612ee857600080fd5b61109f83833560208501612e80565b60008060008060008060008060e0898b031215612f1357600080fd5b88359750612f2360208a01612de3565b965060408901356001600160401b0380821115612f3f57600080fd5b612f4b8c838d01612df9565b909850965060608b0135915080821115612f6457600080fd5b50612f718b828c01612ed7565b945050612f8060808a01612de3565b925060a0890135915060c089013590509295985092959890939650565b600060208284031215612faf57600080fd5b5035919050565b6000815180845260005b81811015612fdc57602081850181015186830182015201612fc0565b81811115612fee576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061109f6020830184612fb6565b6001600160a01b0381168114610a4d57600080fd5b6000806000806080858703121561304157600080fd5b843561304c81613016565b9350602085013561305c81613016565b92506040850135915060608501356001600160401b0381111561307e57600080fd5b61308a87828801612ed7565b91505092959194509250565b60006001600160401b038211156130af576130af612e3a565b5060051b60200190565b600082601f8301126130ca57600080fd5b813560206130df6130da83613096565b612e50565b82815260059290921b840181019181810190868411156130fe57600080fd5b8286015b8481101561312257803561311581613016565b8352918301918301613102565b509695505050505050565b600082601f83011261313e57600080fd5b8135602061314e6130da83613096565b82815260059290921b8401810191818101908684111561316d57600080fd5b8286015b848110156131225780358352918301918301613171565b600082601f83011261319957600080fd5b813560206131a96130da83613096565b82815260059290921b840181019181810190868411156131c857600080fd5b8286015b848110156131225780356001600160401b038111156131eb5760008081fd5b6131f98986838b0101612ed7565b8452509183019183016131cc565b6000806000806080858703121561321d57600080fd5b84356001600160401b038082111561323457600080fd5b613240888389016130b9565b9550602087013591508082111561325657600080fd5b6132628883890161312d565b9450604087013591508082111561327857600080fd5b5061328587828801613188565b949793965093946060013593505050565b600080600080600060a086880312156132ae57600080fd5b853594506132be60208701612de3565b93506132cc60408701612de3565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061331c57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561333557600080fd5b82359150602083013561334781613016565b809150509250929050565b6000806040838503121561336557600080fd5b8235915061337560208401612de3565b90509250929050565b60008060008060006080868803121561339657600080fd5b853594506133a660208701612de3565b935060408601356001600160401b03808211156133c257600080fd5b6133ce89838a01612df9565b909550935060608801359150808211156133e757600080fd5b506133f488828901612ed7565b9150509295509295909350565b6000806000806060858703121561341757600080fd5b8435935061342760208601612de3565b925060408501356001600160401b0381111561344257600080fd5b61344e87828801612df9565b95989497509550505050565b6000806000806080858703121561347057600080fd5b84356001600160401b038082111561348757600080fd5b613493888389016130b9565b955060208701359150808211156134a957600080fd5b6134b58883890161312d565b945060408701359150808211156134cb57600080fd5b6134d788838901613188565b935060608701359150808211156134ed57600080fd5b508501601f810187136134ff57600080fd5b61308a87823560208401612e80565b60008060006060848603121561352357600080fd5b833561352e81613016565b92506020840135915060408401356001600160401b0381111561355057600080fd5b61355c86828701612ed7565b9150509250925092565b60006020828403121561357857600080fd5b813561109f81613016565b600080600080600060a0868803121561359b57600080fd5b85356135a681613016565b945060208601356135b681613016565b935060408601356001600160401b03808211156135d257600080fd5b6135de89838a0161312d565b945060608801359150808211156135f457600080fd5b61360089838a0161312d565b935060808801359150808211156133e757600080fd5b6000806000806060858703121561362c57600080fd5b843561363781613016565b93506020850135925060408501356001600160401b0381111561344257600080fd5b6000806040838503121561366c57600080fd5b823561367781613016565b946020939093013593505050565b600080600080600060a0868803121561369d57600080fd5b85356136a881613016565b945060208601356136b881613016565b9350604086013592506060860135915060808601356001600160401b038111156136e157600080fd5b6133f488828901612ed7565b8183823760009101908152919050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c9082168061374857607f821691505b6020821081141561376957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b6000602082840312156137c257600080fd5b5051919050565b600081518084526020808501945080840160005b838110156138025781516001600160a01b0316875295820195908201906001016137dd565b509495945050505050565b600081518084526020808501945080840160005b8381101561380257815187529582019590820190600101613821565b600081518084526020808501808196508360051b8101915082860160005b85811015613885578284038952613873848351612fb6565b9885019893509084019060010161385b565b5091979650505050505050565b60a0815260006138a560a08301886137c9565b82810360208401526138b7818861380d565b905082810360408401526138cb818761383d565b60608401959095525050608001529392505050565b60c0815260006138f360c08301896137c9565b8281036020840152613905818961380d565b90508281036040840152613919818861383d565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561396157613961613938565b500190565b60008282101561397857613978613938565b500390565b634e487b7160e01b600052603260045260246000fd5b6080815260006139a660808301876137c9565b82810360208401526139b8818761380d565b905082810360408401526139cc818661383d565b91505082606083015295945050505050565b84815260ff8416602082015282604082015260806060820152600061106e6080830184612fb6565b85815260ff8516602082015283604082015260a060608201526000613a2e60a0830185612fb6565b8281036080840152613a408185612fb6565b98975050505050505050565b6000600019821415613a6057613a60613938565b5060010190565b6000816000190483118215151615613a8157613a81613938565b500290565b600060208284031215613a9857600080fd5b8151801515811461109f57600080fd5b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115613b0b57613b0b613938565b01949350505050565b60006101208b8352602060018060a01b038c1681850152816040850152613b3d8285018c6137c9565b91508382036060850152613b51828b61380d565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015613ba257601f19878403018552613b90838351612fb6565b94860194925090850190600101613b74565b505086810360a0880152613bb6818c61383d565b945050505050613bd160c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152613bf38185612fb6565b9c9b505050505050505050505050565b600082613c2057634e487b7160e01b600052601260045260246000fd5b50049056fe476f7665726e6f723a2072656c617920726576657274656420776974686f7574206d657373616765a2646970667358221220acbff85bd0305382ce013a1f5743bfbd45a98c83f3c4bf5a71d76dd28ac79c7364736f6c634300080c0033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "errors": {
          "Empty()": [
            {
              "details": "An operation (e.g. {front}) couldn't be completed due to the queue being empty."
            }
          ]
        },
        "kind": "dev",
        "methods": {
          "COUNTING_MODE()": {
            "details": "See {IGovernor-COUNTING_MODE}."
          },
          "castVote(uint256,uint8)": {
            "details": "See {IGovernor-castVote}."
          },
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
            "details": "See {IGovernor-castVoteBySig}."
          },
          "castVoteWithReason(uint256,uint8,string)": {
            "details": "See {IGovernor-castVoteWithReason}."
          },
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)": {
            "details": "See {IGovernor-castVoteWithReasonAndParams}."
          },
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)": {
            "details": "See {IGovernor-castVoteWithReasonAndParamsBySig}."
          },
          "execute(address[],uint256[],bytes[],bytes32)": {
            "details": "See {IGovernor-execute}."
          },
          "getVotesWithParams(address,uint256,bytes)": {
            "details": "See {IGovernor-getVotesWithParams}."
          },
          "hasVoted(uint256,address)": {
            "details": "See {IGovernor-hasVoted}."
          },
          "hashProposal(address[],uint256[],bytes[],bytes32)": {
            "details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors across multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."
          },
          "name()": {
            "details": "See {IGovernor-name}."
          },
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
            "details": "See {IERC1155Receiver-onERC1155BatchReceived}."
          },
          "onERC1155Received(address,address,uint256,uint256,bytes)": {
            "details": "See {IERC1155Receiver-onERC1155Received}."
          },
          "onERC721Received(address,address,uint256,bytes)": {
            "details": "See {IERC721Receiver-onERC721Received}."
          },
          "proposalDeadline(uint256)": {
            "details": "See {IGovernor-proposalDeadline}."
          },
          "proposalEta(uint256)": {
            "details": "Public accessor to check the eta of a queued proposal"
          },
          "proposalSnapshot(uint256)": {
            "details": "See {IGovernor-proposalSnapshot}."
          },
          "proposalVotes(uint256)": {
            "details": "Accessor to the internal vote counts."
          },
          "queue(address[],uint256[],bytes[],bytes32)": {
            "details": "Function to queue a proposal to the timelock."
          },
          "quorumDenominator()": {
            "details": "Returns the quorum denominator. Defaults to 100, but may be overridden."
          },
          "quorumNumerator()": {
            "details": "Returns the current quorum numerator. See {quorumDenominator}."
          },
          "quorumNumerator(uint256)": {
            "details": "Returns the quorum numerator at a specific block number. See {quorumDenominator}."
          },
          "relay(address,uint256,bytes)": {
            "details": "Relays a transaction or function call to an arbitrary target. In cases where the governance executor is some contract other than the governor itself, like when using a timelock, this function can be invoked in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake. Note that if the executor is simply the governor itself, use of `relay` is redundant."
          },
          "setProposalThreshold(uint256)": {
            "details": "Update the proposal threshold. This operation can only be performed through a governance proposal. Emits a {ProposalThresholdSet} event."
          },
          "setVotingDelay(uint256)": {
            "details": "Update the voting delay. This operation can only be performed through a governance proposal. Emits a {VotingDelaySet} event."
          },
          "setVotingPeriod(uint256)": {
            "details": "Update the voting period. This operation can only be performed through a governance proposal. Emits a {VotingPeriodSet} event."
          },
          "timelock()": {
            "details": "Public accessor to check the address of the timelock"
          },
          "updateQuorumNumerator(uint256)": {
            "details": "Changes the quorum numerator. Emits a {QuorumNumeratorUpdated} event. Requirements: - Must be called through a governance proposal. - New numerator must be smaller or equal to the denominator."
          },
          "updateTimelock(address)": {
            "details": "Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled, and executed through governance proposals. CAUTION: It is not recommended to change the timelock while there are other queued governance proposals."
          },
          "version()": {
            "details": "See {IGovernor-version}."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_10492": {
              "entryPoint": null,
              "id": 10492,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@_3345": {
              "entryPoint": null,
              "id": 3345,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_3506": {
              "entryPoint": null,
              "id": 3506,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_3868": {
              "entryPoint": null,
              "id": 3868,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_3923": {
              "entryPoint": null,
              "id": 3923,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_668": {
              "entryPoint": null,
              "id": 668,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_7244": {
              "entryPoint": null,
              "id": 7244,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_buildDomainSeparator_7300": {
              "entryPoint": null,
              "id": 7300,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_insert_5437": {
              "entryPoint": 1678,
              "id": 5437,
              "parameterSlots": 3,
              "returnSlots": 2
            },
            "@_setProposalThreshold_3469": {
              "entryPoint": 701,
              "id": 3469,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_setVotingDelay_3430": {
              "entryPoint": 469,
              "id": 3430,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_setVotingPeriod_3453": {
              "entryPoint": 534,
              "id": 3453,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_unsafeAccess_5556": {
              "entryPoint": null,
              "id": 5556,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_updateQuorumNumerator_4091": {
              "entryPoint": 766,
              "id": 4091,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_updateTimelock_3846": {
              "entryPoint": 1142,
              "id": 3846,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@latest_5284": {
              "entryPoint": 1497,
              "id": 5284,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@push_5220": {
              "entryPoint": 1414,
              "id": 5220,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@quorumDenominator_3998": {
              "entryPoint": null,
              "id": 3998,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@quorumNumerator_3941": {
              "entryPoint": 1247,
              "id": 3941,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@toUint224_8321": {
              "entryPoint": 1303,
              "id": 8321,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@toUint32_8921": {
              "entryPoint": 1575,
              "id": 8921,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@version_754": {
              "entryPoint": 442,
              "id": 754,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_IVotes_$4211t_contract$_TimelockController_$3066t_uint256t_uint256t_uint256t_address_fromMemory": {
              "entryPoint": 2301,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 6
            },
            "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0687f8064c09ccf183090b5092c4485c730072a161487645a7e37b56cef356bb__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3f314603cb191f371d117be724372820f824fc7fbb608c5408b31620bafe9a83__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b717461289064d78d4f64eae2786bccf758ed88a7bfa28ee6fa5093be89d54df__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 2414,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 2452,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "validator_revert_contract_IVotes": {
              "entryPoint": 2276,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:4650:53",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:53",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "67:86:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "131:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "140:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "143:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "133:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "133:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "133:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "90:5:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "101:5:53"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "116:3:53",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "121:1:53",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "112:3:53"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "112:11:53"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "125:1:53",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "108:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "108:19:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "97:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "97:31:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "87:2:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "87:42:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "80:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "80:50:53"
                          },
                          "nodeType": "YulIf",
                          "src": "77:70:53"
                        }
                      ]
                    },
                    "name": "validator_revert_contract_IVotes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "56:5:53",
                        "type": ""
                      }
                    ],
                    "src": "14:139:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "366:563:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "413:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "422:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "425:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "415:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "415:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "415:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "387:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "396:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "383:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "383:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "408:3:53",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "379:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "379:33:53"
                          },
                          "nodeType": "YulIf",
                          "src": "376:53:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "438:29:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "457:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "451:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "451:16:53"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "442:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "509:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_IVotes",
                              "nodeType": "YulIdentifier",
                              "src": "476:32:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "476:39:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "476:39:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "524:15:53",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "534:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "524:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "548:40:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "573:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "584:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "569:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "569:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "563:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "563:25:53"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "552:7:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "630:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_IVotes",
                              "nodeType": "YulIdentifier",
                              "src": "597:32:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "597:41:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "597:41:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "647:17:53",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "657:7:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "647:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "673:35:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "693:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "704:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "689:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "689:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "683:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "683:25:53"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "673:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "717:35:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "737:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "748:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "733:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "733:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "727:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "727:25:53"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "717:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "761:36:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "781:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "792:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "777:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "777:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "771:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "771:26:53"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "761:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "806:41:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "831:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "842:3:53",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "827:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "827:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "821:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "821:26:53"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nodeType": "YulTypedName",
                              "src": "810:7:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "889:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_contract_IVotes",
                              "nodeType": "YulIdentifier",
                              "src": "856:32:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "856:41:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "856:41:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "906:17:53",
                          "value": {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "916:7:53"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "906:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IVotes_$4211t_contract$_TimelockController_$3066t_uint256t_uint256t_uint256t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "292:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "303:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "315:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "323:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "331:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "339:6:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "347:6:53",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "355:6:53",
                        "type": ""
                      }
                    ],
                    "src": "158:771:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1147:276:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1157:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1169:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1180:3:53",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1165:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1165:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1157:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1200:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1211:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1193:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1193:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1193:25:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1238:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1249:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1234:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1234:18:53"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "1254:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1227:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1227:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1227:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1281:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1292:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1277:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1277:18:53"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "1297:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1270:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1270:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1270:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1324:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1335:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1320:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1320:18:53"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "1340:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1313:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1313:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1313:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1367:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1378:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1363:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1363:19:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value4",
                                    "nodeType": "YulIdentifier",
                                    "src": "1388:6:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1404:3:53",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1409:1:53",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1400:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1400:11:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1413:1:53",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1396:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1396:19:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1384:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1384:32:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1356:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1356:61:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1356:61:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1084:9:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "1095:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "1103:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1111:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1119:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1127:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1138:4:53",
                        "type": ""
                      }
                    ],
                    "src": "934:489:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1557:119:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1567:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1579:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1590:2:53",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1575:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1575:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1567:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1609:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1620:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1602:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1602:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1602:25:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1647:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1658:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1643:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1643:18:53"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "1663:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1636:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1636:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1636:34:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1518:9:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1529:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1537:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1548:4:53",
                        "type": ""
                      }
                    ],
                    "src": "1428:248:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1855:229:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1872:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1883:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1865:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1865:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1865:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1906:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1917:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1902:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1902:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1922:2:53",
                                "type": "",
                                "value": "39"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1895:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1895:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1895:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1945:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1956:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1941:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1941:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "1961:34:53",
                                "type": "",
                                "value": "GovernorSettings: voting period "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1934:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1934:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1934:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2016:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2027:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2012:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2012:18:53"
                              },
                              {
                                "hexValue": "746f6f206c6f77",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2032:9:53",
                                "type": "",
                                "value": "too low"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2005:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2005:37:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2005:37:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2051:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2063:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2074:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2059:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2059:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2051:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3f314603cb191f371d117be724372820f824fc7fbb608c5408b31620bafe9a83__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1832:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1846:4:53",
                        "type": ""
                      }
                    ],
                    "src": "1681:403:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2263:297:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2280:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2291:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2273:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2273:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2273:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2314:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2325:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2310:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2310:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2330:2:53",
                                "type": "",
                                "value": "67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2303:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2303:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2303:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2353:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2364:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2349:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2349:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2369:34:53",
                                "type": "",
                                "value": "GovernorVotesQuorumFraction: quo"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2342:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2342:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2342:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2424:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2435:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2420:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2420:18:53"
                              },
                              {
                                "hexValue": "72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e61",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2440:34:53",
                                "type": "",
                                "value": "rumNumerator over quorumDenomina"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2413:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2413:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2413:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2495:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2506:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2491:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2491:19:53"
                              },
                              {
                                "hexValue": "746f72",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2512:5:53",
                                "type": "",
                                "value": "tor"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2484:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2484:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2484:34:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2527:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2539:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2550:3:53",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2535:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2535:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2527:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0687f8064c09ccf183090b5092c4485c730072a161487645a7e37b56cef356bb__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2240:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2254:4:53",
                        "type": ""
                      }
                    ],
                    "src": "2089:471:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2694:175:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2704:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2716:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2727:2:53",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2712:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2712:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2704:4:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2739:29:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2757:3:53",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2762:1:53",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "2753:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2753:11:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2766:1:53",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2749:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2749:19:53"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2743:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2784:9:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2799:6:53"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2807:2:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2795:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2795:15:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2777:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2777:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2777:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2831:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2842:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2827:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2827:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2851:6:53"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2859:2:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2847:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2847:15:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2820:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2820:43:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2820:43:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2655:9:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2666:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2674:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2685:4:53",
                        "type": ""
                      }
                    ],
                    "src": "2565:304:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3048:229:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3065:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3076:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3058:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3058:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3058:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3099:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3110:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3095:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3095:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3115:2:53",
                                "type": "",
                                "value": "39"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3088:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3088:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3088:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3138:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3149:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3134:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3134:18:53"
                              },
                              {
                                "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2032",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3154:34:53",
                                "type": "",
                                "value": "SafeCast: value doesn't fit in 2"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3127:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3127:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3127:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3209:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3220:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3205:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3205:18:53"
                              },
                              {
                                "hexValue": "32342062697473",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3225:9:53",
                                "type": "",
                                "value": "24 bits"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3198:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3198:37:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3198:37:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3244:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3256:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3267:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3252:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3252:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3244:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3025:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3039:4:53",
                        "type": ""
                      }
                    ],
                    "src": "2874:403:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3331:173:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3361:111:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3382:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3389:3:53",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3394:10:53",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "3385:3:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3385:20:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3375:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3375:31:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3375:31:53"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3426:1:53",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3429:4:53",
                                      "type": "",
                                      "value": "0x11"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3419:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3419:15:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3419:15:53"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3454:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3457:4:53",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3447:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3447:15:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3447:15:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "3347:1:53"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "3350:1:53"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3344:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3344:8:53"
                          },
                          "nodeType": "YulIf",
                          "src": "3341:131:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3481:17:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "3493:1:53"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "3496:1:53"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3489:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3489:9:53"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "3481:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "3313:1:53",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "3316:1:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "3322:4:53",
                        "type": ""
                      }
                    ],
                    "src": "3282:222:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3683:228:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3700:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3711:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3693:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3693:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3693:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3734:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3745:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3730:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3730:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3750:2:53",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3723:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3723:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3723:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3773:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3784:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3769:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3769:18:53"
                              },
                              {
                                "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2033",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3789:34:53",
                                "type": "",
                                "value": "SafeCast: value doesn't fit in 3"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3762:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3762:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3762:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3844:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3855:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3840:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3840:18:53"
                              },
                              {
                                "hexValue": "322062697473",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3860:8:53",
                                "type": "",
                                "value": "2 bits"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3833:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3833:36:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3833:36:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3878:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3890:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3901:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3886:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3886:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3878:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3660:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3674:4:53",
                        "type": ""
                      }
                    ],
                    "src": "3509:402:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4090:173:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4107:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4118:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4100:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4100:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4100:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4141:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4152:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4137:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4137:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4157:2:53",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4130:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4130:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4130:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4180:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4191:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4176:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4176:18:53"
                              },
                              {
                                "hexValue": "436865636b706f696e743a20696e76616c6964206b6579",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4196:25:53",
                                "type": "",
                                "value": "Checkpoint: invalid key"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4169:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4169:53:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4169:53:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4231:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4243:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4254:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4239:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4239:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4231:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b717461289064d78d4f64eae2786bccf758ed88a7bfa28ee6fa5093be89d54df__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4067:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4081:4:53",
                        "type": ""
                      }
                    ],
                    "src": "3916:347:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4323:325:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4333:22:53",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4347:1:53",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "4350:4:53"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "4343:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4343:12:53"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "4333:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4364:38:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "4394:4:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4400:1:53",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "4390:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4390:12:53"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "4368:18:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4441:31:53",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "4443:27:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "4457:6:53"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4465:4:53",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "4453:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4453:17:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4443:6:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "4421:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4414:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4414:26:53"
                          },
                          "nodeType": "YulIf",
                          "src": "4411:61:53"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4531:111:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4552:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4559:3:53",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4564:10:53",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "4555:3:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4555:20:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4545:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4545:31:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4545:31:53"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4596:1:53",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4599:4:53",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4589:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4589:15:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4589:15:53"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4624:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4627:4:53",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4617:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4617:15:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4617:15:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "4487:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "4510:6:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4518:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4507:2:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4507:14:53"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "4484:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4484:38:53"
                          },
                          "nodeType": "YulIf",
                          "src": "4481:161:53"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "4303:4:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "4312:6:53",
                        "type": ""
                      }
                    ],
                    "src": "4268:380:53"
                  }
                ]
              },
              "contents": "{\n    { }\n    function validator_revert_contract_IVotes(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IVotes_$4211t_contract$_TimelockController_$3066t_uint256t_uint256t_uint256t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IVotes(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IVotes(value_1)\n        value1 := value_1\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        value4 := mload(add(headStart, 128))\n        let value_2 := mload(add(headStart, 160))\n        validator_revert_contract_IVotes(value_2)\n        value5 := value_2\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_3f314603cb191f371d117be724372820f824fc7fbb608c5408b31620bafe9a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"GovernorSettings: voting period \")\n        mstore(add(headStart, 96), \"too low\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0687f8064c09ccf183090b5092c4485c730072a161487645a7e37b56cef356bb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 67)\n        mstore(add(headStart, 64), \"GovernorVotesQuorumFraction: quo\")\n        mstore(add(headStart, 96), \"rumNumerator over quorumDenomina\")\n        mstore(add(headStart, 128), \"tor\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 2\")\n        mstore(add(headStart, 96), \"24 bits\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 3\")\n        mstore(add(headStart, 96), \"2 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b717461289064d78d4f64eae2786bccf758ed88a7bfa28ee6fa5093be89d54df__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Checkpoint: invalid key\")\n        tail := add(headStart, 96)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
              "id": 53,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH20 0xCBE9771ED31E761B744D3CB9EF78A1F32DD99211 OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x46BD CODESIZE SUB DUP1 PUSH3 0x46BD DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x5B SWAP2 PUSH3 0x8FD JUMP JUMPDEST DUP5 DUP5 DUP8 DUP5 DUP7 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH16 0x11DBDD995C9B9BDC90DBDB9D1C9858DD PUSH1 0x82 SHL DUP2 MSTORE POP DUP1 PUSH3 0x9C PUSH3 0x1BA PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD DUP4 DUP4 ADD KECCAK256 PUSH1 0xE0 DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 SWAP1 MSTORE CHAINID PUSH1 0xA0 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP2 DUP9 ADD DUP2 SWAP1 MSTORE DUP2 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE ADDRESS DUP2 DUP5 ADD MSTORE DUP2 MLOAD DUP1 DUP3 SUB SWAP1 SWAP4 ADD DUP4 MSTORE PUSH1 0xC0 ADD SWAP1 MSTORE DUP1 MLOAD SWAP5 ADD SWAP4 SWAP1 SWAP4 KECCAK256 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x80 MSTORE ADDRESS PUSH1 0xC0 MSTORE PUSH2 0x120 MSTORE POP POP DUP3 MLOAD PUSH3 0x142 SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x848 JUMP JUMPDEST POP PUSH3 0x150 SWAP1 POP DUP4 PUSH3 0x1D5 JUMP JUMPDEST PUSH3 0x15B DUP3 PUSH3 0x216 JUMP JUMPDEST PUSH3 0x166 DUP2 PUSH3 0x2BD JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x140 MSTORE PUSH3 0x181 DUP2 PUSH3 0x2FE JUMP JUMPDEST POP PUSH3 0x18D DUP2 PUSH3 0x476 JUMP JUMPDEST POP PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x9D1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x31 PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xC565B045403DC03C2EEA82B81A0465EDAD9E2E7FC4D97E11421C209DA93D7A93 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH3 0x27C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F7253657474696E67733A20766F74696E6720706572696F6420 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x746F6F206C6F77 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x7E3F7F0708A84DE9203036ABAA450DCCC85AD5FF52F78C170F3EDB55CF5E8828 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xCCB45DA8D5717E6C4544694297C4BA5CF151D455C9BB0ED4FC7A38411BC05461 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x64 DUP2 GT ISZERO PUSH3 0x383 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x43 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74657351756F72756D4672616374696F6E3A2071756F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72756D4E756D657261746F72206F7665722071756F72756D44656E6F6D696E61 PUSH1 0x64 DUP3 ADD MSTORE PUSH3 0x3A37B9 PUSH1 0xE9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH3 0x273 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x38F PUSH3 0x4DF JUMP JUMPDEST SWAP1 POP DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH3 0x3A1 JUMPI POP PUSH1 0x9 SLOAD ISZERO JUMPDEST ISZERO PUSH3 0x41C JUMPI PUSH1 0x9 PUSH1 0x0 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x3DA DUP5 PUSH3 0x517 PUSH1 0x20 SHL PUSH3 0x14AD OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD SWAP5 SWAP1 SWAP4 ADD MLOAD SWAP1 SWAP2 AND PUSH5 0x100000000 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 ADD SSTORE JUMPDEST PUSH3 0x437 DUP3 PUSH1 0x9 PUSH3 0x586 PUSH1 0x20 SHL PUSH3 0x151A OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x553476BF02EF2726E8CE5CED78D63E26E602E4A2257B1F559418E24B4633997 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x8F74EA46EF7894F65EABFB5E6E695DE773A000B47C529AB559178069B226401 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH3 0x510 JUMPI PUSH3 0x502 PUSH1 0x9 PUSH3 0x5D9 PUSH1 0x20 SHL PUSH3 0x1550 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP3 GT ISZERO PUSH3 0x582 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32342062697473 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x273 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x5C3 DUP5 PUSH1 0x0 ADD PUSH3 0x5A7 NUMBER PUSH3 0x627 PUSH1 0x20 SHL PUSH3 0x158E OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x5BD DUP7 PUSH3 0x517 PUSH1 0x20 SHL PUSH3 0x14AD OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x68E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP2 DUP3 AND SWAP7 SWAP2 AND SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 DUP1 ISZERO PUSH3 0x61D JUMPI PUSH3 0x605 DUP4 PUSH3 0x5F7 PUSH1 0x1 DUP5 PUSH3 0x96E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH3 0x620 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH3 0x582 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x273 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH3 0x7EA JUMPI PUSH1 0x0 PUSH3 0x6B0 DUP8 PUSH3 0x5F7 PUSH1 0x1 DUP6 PUSH3 0x96E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP1 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND DUP1 DUP5 MSTORE PUSH5 0x100000000 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x20 DUP5 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP8 AND LT ISZERO PUSH3 0x734 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436865636B706F696E743A20696E76616C6964206B6579000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x273 JUMP JUMPDEST DUP6 PUSH4 0xFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH3 0x789 JUMPI DUP5 PUSH3 0x760 DUP9 PUSH3 0x5F7 PUSH1 0x1 DUP7 PUSH3 0x96E JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH5 0x100000000 MUL PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x7D9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP9 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP9 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP12 SLOAD PUSH1 0x1 DUP2 ADD DUP14 SSTORE PUSH1 0x0 DUP14 DUP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 AND PUSH5 0x100000000 MUL SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 ADD SSTORE JUMPDEST PUSH1 0x20 ADD MLOAD SWAP3 POP DUP4 SWAP2 POP PUSH3 0x840 SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 ADD DUP11 SSTORE PUSH1 0x0 DUP11 DUP2 MSTORE SWAP2 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH5 0x100000000 MUL SWAP2 SWAP1 SWAP4 AND OR SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP DUP2 JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x856 SWAP1 PUSH3 0x994 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x87A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x8C5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x895 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x8C5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x8C5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x8C5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x8A8 JUMP JUMPDEST POP PUSH3 0x582 SWAP3 SWAP2 POP JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x582 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x8CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x8FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x917 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH3 0x924 DUP2 PUSH3 0x8E4 JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MLOAD SWAP1 SWAP7 POP PUSH3 0x937 DUP2 PUSH3 0x8E4 JUMP JUMPDEST DUP1 SWAP6 POP POP PUSH1 0x40 DUP8 ADD MLOAD SWAP4 POP PUSH1 0x60 DUP8 ADD MLOAD SWAP3 POP PUSH1 0x80 DUP8 ADD MLOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD MLOAD PUSH3 0x960 DUP2 PUSH3 0x8E4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH3 0x98F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x9A9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x9CB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x3C83 PUSH3 0xA3A PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x869 ADD MSTORE DUP2 DUP2 PUSH2 0x2146 ADD MSTORE PUSH2 0x235B ADD MSTORE PUSH1 0x0 PUSH2 0x2681 ADD MSTORE PUSH1 0x0 PUSH2 0x26D0 ADD MSTORE PUSH1 0x0 PUSH2 0x26AB ADD MSTORE PUSH1 0x0 PUSH2 0x2604 ADD MSTORE PUSH1 0x0 PUSH2 0x262E ADD MSTORE PUSH1 0x0 PUSH2 0x2658 ADD MSTORE PUSH2 0x3C83 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x24A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B3C71D3 GT PUSH2 0x139 JUMPI DUP1 PUSH4 0xC28BC2FA GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xEA0217CF GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xEA0217CF EQ PUSH2 0x7AB JUMPI DUP1 PUSH4 0xEB9019D4 EQ PUSH2 0x7CB JUMPI DUP1 PUSH4 0xECE40CC1 EQ PUSH2 0x7EB JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x80B JUMPI DUP1 PUSH4 0xF8CE560A EQ PUSH2 0x837 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x857 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC28BC2FA EQ PUSH2 0x6CC JUMPI DUP1 PUSH4 0xC59057E4 EQ PUSH2 0x6DF JUMPI DUP1 PUSH4 0xD33219B4 EQ PUSH2 0x6FF JUMPI DUP1 PUSH4 0xDD4E2BA5 EQ PUSH2 0x731 JUMPI DUP1 PUSH4 0xDEAAA7CC EQ PUSH2 0x777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA890C910 GT PUSH2 0xFD JUMPI DUP1 PUSH4 0xA890C910 EQ PUSH2 0x62B JUMPI DUP1 PUSH4 0xAB58FB8E EQ PUSH2 0x64B JUMPI DUP1 PUSH4 0xB58131B0 EQ PUSH2 0x66B JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x680 JUMPI DUP1 PUSH4 0xC01F9E37 EQ PUSH2 0x6AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B3C71D3 EQ PUSH2 0x5A2 JUMPI DUP1 PUSH4 0x7D5E81E2 EQ PUSH2 0x5C2 JUMPI DUP1 PUSH4 0x97C3D334 EQ PUSH2 0x5E2 JUMPI DUP1 PUSH4 0x9A802A6D EQ PUSH2 0x5F6 JUMPI DUP1 PUSH4 0xA7713A70 EQ PUSH2 0x616 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3932ABB1 GT PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x54FD4D50 GT PUSH2 0x18B JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x4F8 JUMPI DUP1 PUSH4 0x56781388 EQ PUSH2 0x522 JUMPI DUP1 PUSH4 0x5F398A14 EQ PUSH2 0x542 JUMPI DUP1 PUSH4 0x60C4247F EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0x70B0F660 EQ PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3932ABB1 EQ PUSH2 0x3F7 JUMPI DUP1 PUSH4 0x3BCCF4FD EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0x3E4F49E6 EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0x43859632 EQ PUSH2 0x459 JUMPI DUP1 PUSH4 0x544FFC9C EQ PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x150B7A02 GT PUSH2 0x20E JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x32C JUMPI DUP1 PUSH4 0x160CBED7 EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0x2656227D EQ PUSH2 0x390 JUMPI DUP1 PUSH4 0x2D63F693 EQ PUSH2 0x3A3 JUMPI DUP1 PUSH4 0x2FE3E261 EQ PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0x2A251A3 EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0x3420181 EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x6F3F9E6 EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x30A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x26D JUMPI ADDRESS PUSH2 0x258 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x292 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB9 JUMP JUMPDEST PUSH2 0x8A4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x8B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x29E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x2E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2EF7 JUMP JUMPDEST PUSH2 0x8C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x305 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0x9B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x31F PUSH2 0xA50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x3003 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x357 PUSH2 0x347 CALLDATASIZE PUSH1 0x4 PUSH2 0x302B JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x29E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x38B CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH2 0xAE2 JUMP JUMPDEST PUSH2 0x2BC PUSH2 0x39E CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH2 0xCE2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0xDCF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH32 0xB3B3F3B703CD84CE352197DCFF232B1B5D3CFB2025CE47CF04742D0651F1AF88 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0xE06 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x427 CALLDATASIZE PUSH1 0x4 PUSH2 0x3296 JUMP JUMPDEST PUSH2 0xE11 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44C PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0xE87 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x32FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x465 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x292 PUSH2 0x474 CALLDATASIZE PUSH1 0x4 PUSH2 0x3322 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x3 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4DD PUSH2 0x4BE CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x29E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x31 PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x31F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x53D CALLDATASIZE PUSH1 0x4 PUSH2 0x3352 JUMP JUMPDEST PUSH2 0xE92 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x55D CALLDATASIZE PUSH1 0x4 PUSH2 0x337E JUMP JUMPDEST PUSH2 0xEBB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x57D CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0xF05 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x59D CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0xF9A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x5BD CALLDATASIZE PUSH1 0x4 PUSH2 0x3401 JUMP JUMPDEST PUSH2 0x1026 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x5DD CALLDATASIZE PUSH1 0x4 PUSH2 0x345A JUMP JUMPDEST PUSH2 0x1078 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x64 PUSH2 0x2BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x611 CALLDATASIZE PUSH1 0x4 PUSH2 0x350E JUMP JUMPDEST PUSH2 0x108F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x622 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x10A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x646 CALLDATASIZE PUSH1 0x4 PUSH2 0x3566 JUMP JUMPDEST PUSH2 0x10D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x666 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0x115C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x677 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x11F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x357 PUSH2 0x69B CALLDATASIZE PUSH1 0x4 PUSH2 0x3583 JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x6C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0x1201 JUMP JUMPDEST PUSH2 0x26B PUSH2 0x6DA CALLDATASIZE PUSH1 0x4 PUSH2 0x3616 JUMP JUMPDEST PUSH2 0x1230 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x6FA CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH2 0x1344 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x29E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP3 MSTORE PUSH32 0x737570706F72743D627261766F2671756F72756D3D666F722C6162737461696E SWAP1 DUP3 ADD MSTORE PUSH2 0x31F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x783 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH32 0x150214D74D59B7D1E90C73FC22EF3D991DD0A76B046543D4D80AB92D2A50328F DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x7C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0x137E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x7E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3659 JUMP JUMPDEST PUSH2 0x140A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x806 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0x1416 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x357 PUSH2 0x826 CALLDATASIZE PUSH1 0x4 PUSH2 0x3685 JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x843 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x852 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0x14A2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x863 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x719 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89F PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AF DUP3 PUSH2 0x15F3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89F PUSH1 0x5 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x964 PUSH2 0x95C PUSH32 0xB3B3F3B703CD84CE352197DCFF232B1B5D3CFB2025CE47CF04742D0651F1AF88 DUP13 DUP13 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH2 0x8FC SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP12 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x941 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x1618 JUMP JUMPDEST DUP7 DUP7 DUP7 PUSH2 0x1666 JUMP JUMPDEST SWAP1 POP PUSH2 0x9AA DUP11 DUP3 DUP12 DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP14 SWAP3 POP PUSH2 0x1684 SWAP2 POP POP JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x9C0 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x36FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH2 0xA02 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA44 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0xA22 SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0xA38 PUSH1 0x2 PUSH2 0x17E6 JUMP JUMPDEST EQ PUSH2 0xA42 JUMPI PUSH2 0xA2D JUMP JUMPDEST POP JUMPDEST PUSH2 0xA4D DUP2 PUSH2 0x1865 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0xA5F SWAP1 PUSH2 0x3734 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA8B SWAP1 PUSH2 0x3734 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAD8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAAD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAD8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xABB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAF1 DUP7 DUP7 DUP7 DUP7 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP PUSH1 0x4 PUSH2 0xAFE DUP3 PUSH2 0xE87 JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xB0F JUMPI PUSH2 0xB0F PUSH2 0x32E4 JUMP JUMPDEST EQ PUSH2 0xB2C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x376F JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x793D0649 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xF27A0C92 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB76 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB9A SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0xB1C5F427 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB1C5F427 SWAP1 PUSH2 0xBD4 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x0 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x3892 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBF1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC15 SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xA SLOAD SWAP2 MLOAD PUSH4 0x8F2A0BB PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x8F2A0BB0 SWAP2 PUSH2 0xC60 SWAP2 DUP12 SWAP2 DUP12 SWAP2 DUP12 SWAP2 SWAP1 DUP12 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x38E0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC8E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0x9A2E42FD6722813D69113E7D0079D3D940171428DF7373DF9C7F7617CFDA2892 DUP3 DUP3 TIMESTAMP PUSH2 0xCC0 SWAP2 SWAP1 PUSH2 0x394E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCF1 DUP7 DUP7 DUP7 DUP7 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCFE DUP3 PUSH2 0xE87 JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xD14 JUMPI PUSH2 0xD14 PUSH2 0x32E4 JUMP JUMPDEST EQ DUP1 PUSH2 0xD31 JUMPI POP PUSH1 0x5 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xD2F JUMPI PUSH2 0xD2F PUSH2 0x32E4 JUMP JUMPDEST EQ JUMPDEST PUSH2 0xD4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x376F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 DUP2 MSTORE PUSH32 0x712AE1383F79AC853F8D882153778E0260EF8F03B504E2866E0593E04D2B291F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xDAB DUP3 DUP9 DUP9 DUP9 DUP9 PUSH2 0x19B1 JUMP JUMPDEST PUSH2 0xDB8 DUP3 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1A54 JUMP JUMPDEST PUSH2 0xDC5 DUP3 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1A61 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD SWAP3 DUP4 ADD SWAP1 SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP2 SWAP1 MSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89F PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x150214D74D59B7D1E90C73FC22EF3D991DD0A76B046543D4D80AB92D2A50328F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0xE5F SWAP1 PUSH2 0x95C SWAP1 PUSH1 0x80 ADD PUSH2 0x941 JUMP JUMPDEST SWAP1 POP PUSH2 0xE7C DUP8 DUP3 DUP9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A9A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AF DUP3 PUSH2 0x1C1D JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH2 0xEB3 DUP5 DUP3 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A9A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH2 0xE7C DUP8 DUP3 DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP11 SWAP3 POP PUSH2 0x1684 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 DUP1 PUSH2 0xF1A JUMPI POP POP PUSH1 0x8 SLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 PUSH2 0xF29 PUSH1 0x1 DUP5 PUSH2 0x3966 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xF39 JUMPI PUSH2 0xF39 PUSH2 0x397D JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 POP DUP5 LT PUSH2 0xF8F JUMPI PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xEB3 PUSH1 0x9 DUP6 PUSH2 0x1D67 JUMP JUMPDEST PUSH2 0xFA2 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFD2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x36FD JUMP JUMPDEST ADDRESS PUSH2 0xFDB PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x101D JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0xFFB SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x1011 PUSH1 0x2 PUSH2 0x17E6 JUMP JUMPDEST EQ PUSH2 0x101B JUMPI PUSH2 0x1006 JUMP JUMPDEST POP JUMPDEST PUSH2 0xA4D DUP2 PUSH2 0x1E19 JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH2 0x106E DUP7 DUP3 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1A9A SWAP3 POP POP POP JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1086 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1E5A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109C DUP5 DUP5 DUP5 PUSH2 0x211D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x10C9 JUMPI PUSH2 0x10BB PUSH1 0x9 PUSH2 0x1550 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x10D8 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1108 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x36FD JUMP JUMPDEST ADDRESS PUSH2 0x1111 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1153 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x1131 SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x1147 PUSH1 0x2 PUSH2 0x17E6 JUMP JUMPDEST EQ PUSH2 0x1151 JUMPI PUSH2 0x113C JUMP JUMPDEST POP JUMPDEST PUSH2 0xA4D DUP2 PUSH2 0x21B3 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xD45C4435 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xD45C4435 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11DD SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ PUSH2 0x11ED JUMPI DUP1 PUSH2 0x109F JUMP JUMPDEST PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89F PUSH1 0x6 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD SWAP3 DUP4 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP2 SWAP1 MSTORE PUSH2 0xDF7 JUMP JUMPDEST PUSH2 0x1238 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1268 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x36FD JUMP JUMPDEST ADDRESS PUSH2 0x1271 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x12B3 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x1291 SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x12A7 PUSH1 0x2 PUSH2 0x17E6 JUMP JUMPDEST EQ PUSH2 0x12B1 JUMPI PUSH2 0x129C JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x12D1 SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x130E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1313 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x133B DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3C26 PUSH1 0x28 SWAP2 CODECOPY PUSH2 0x221C JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x135D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3993 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1386 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x13B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x36FD JUMP JUMPDEST ADDRESS PUSH2 0x13BF PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1401 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x13DF SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x13F5 PUSH1 0x2 PUSH2 0x17E6 JUMP JUMPDEST EQ PUSH2 0x13FF JUMPI PUSH2 0x13EA JUMP JUMPDEST POP JUMPDEST PUSH2 0xA4D DUP2 PUSH2 0x2235 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109F DUP4 DUP4 PUSH2 0x22D6 JUMP JUMPDEST PUSH2 0x141E PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x144E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x36FD JUMP JUMPDEST ADDRESS PUSH2 0x1457 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1499 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x1477 SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x148D PUSH1 0x2 PUSH2 0x17E6 JUMP JUMPDEST EQ PUSH2 0x1497 JUMPI PUSH2 0x1482 JUMP JUMPDEST POP JUMPDEST PUSH2 0xA4D DUP2 PUSH2 0x22F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AF DUP3 PUSH2 0x2338 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP3 GT ISZERO PUSH2 0x1516 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32342062697473 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1538 DUP5 PUSH2 0x152A NUMBER PUSH2 0x158E JUMP JUMPDEST PUSH2 0x1533 DUP7 PUSH2 0x14AD JUMP JUMPDEST PUSH2 0x23E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP2 DUP3 AND SWAP4 POP AND SWAP1 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 DUP1 ISZERO PUSH2 0x11ED JUMPI PUSH2 0x1578 DUP4 PUSH2 0x156A PUSH1 0x1 DUP5 PUSH2 0x3966 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x109F JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x1516 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6E665CED PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x8AF JUMPI POP PUSH2 0x8AF DUP3 PUSH2 0x258C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AF PUSH2 0x1625 PUSH2 0x25F7 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1677 DUP8 DUP8 DUP8 DUP8 PUSH2 0x271E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xDC5 DUP2 PUSH2 0x27E2 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 PUSH2 0x169E DUP9 PUSH2 0xE87 JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x16AF JUMPI PUSH2 0x16AF PUSH2 0x32E4 JUMP JUMPDEST EQ PUSH2 0x1708 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20766F7465206E6F742063757272656E746C7920616374 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x697665 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1731 SWAP1 DUP9 SWAP1 DUP7 PUSH2 0x211D JUMP JUMPDEST SWAP1 POP PUSH2 0x1740 DUP9 DUP9 DUP9 DUP5 DUP9 PUSH2 0x2930 JUMP JUMPDEST DUP4 MLOAD PUSH2 0x1792 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xB8E138887D0AA13BAB447E82DE9D5C1777041ECD21CA36BA824FF1E6C07DDDA4 DUP10 DUP9 DUP5 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1785 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xE7C JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE2BABFBAC5889A709B63BB7F598B324E08BC5A4FB9EC647FB3CBC9EC07EB8712 DUP10 DUP9 DUP5 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x17D3 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3A06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1801 DUP3 SLOAD PUSH1 0xF DUP2 DUP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV SWAP1 SIGNEXTEND SGT ISZERO SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x181F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1ED95095 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP1 SLOAD PUSH1 0xF SIGNEXTEND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP1 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD SWAP3 SWAP1 SSTORE DUP4 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x64 DUP2 GT ISZERO PUSH2 0x18E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x43 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74657351756F72756D4672616374696F6E3A2071756F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72756D4E756D657261746F72206F7665722071756F72756D44656E6F6D696E61 PUSH1 0x64 DUP3 ADD MSTORE PUSH3 0x3A37B9 PUSH1 0xE9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18F2 PUSH2 0x10A6 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1903 JUMPI POP PUSH1 0x9 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1967 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x9 SWAP1 PUSH1 0x20 DUP2 ADD PUSH2 0x1926 DUP5 PUSH2 0x14AD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD SWAP5 SWAP1 SWAP4 ADD MLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 ADD SSTORE JUMPDEST PUSH2 0x1972 PUSH1 0x9 DUP4 PUSH2 0x151A JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x553476BF02EF2726E8CE5CED78D63E26E602E4A2257B1F559418E24B4633997 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST ADDRESS PUSH2 0x19BA PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1A4D JUMPI PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1A4B JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x19F0 JUMPI PUSH2 0x19F0 PUSH2 0x397D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1A3B JUMPI PUSH2 0x1A3B DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1A1C JUMPI PUSH2 0x1A1C PUSH2 0x397D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x2 PUSH2 0x2AAF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1A44 DUP2 PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP PUSH2 0x19CB JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1A4D DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2AEB JUMP JUMPDEST ADDRESS PUSH2 0x1A6A PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1A4D JUMPI PUSH1 0x2 SLOAD PUSH1 0xF DUP2 DUP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x1A4D JUMPI PUSH1 0x0 PUSH1 0x2 SSTORE PUSH2 0x1A4D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1ABE DUP7 DUP7 DUP7 DUP7 PUSH2 0x1AB9 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x1684 JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDB230B52 CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B1A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B3E SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST SWAP1 POP PUSH3 0x186A0 PUSH1 0x0 PUSH1 0x64 DUP4 GT PUSH2 0x1B54 JUMPI DUP3 PUSH2 0x1B57 JUMP JUMPDEST PUSH1 0x64 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH2 0x1B66 GASPRICE DUP5 PUSH2 0x3A67 JUMP JUMPDEST PUSH2 0x1B70 SWAP2 SWAP1 PUSH2 0x3A67 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B7F DUP3 PUSH1 0x64 PUSH2 0x2B5F JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD ADDRESS CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BE9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C0D SWAP2 SWAP1 PUSH2 0x3A86 JUMP JUMPDEST POP SWAP5 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C29 DUP4 PUSH2 0x2B6B JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1C3F JUMPI PUSH2 0x1C3F PUSH2 0x32E4 JUMP JUMPDEST EQ PUSH2 0x1C4A JUMPI SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x1C65 JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0x2AB0F529 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2AB0F529 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CAE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CD2 SWAP2 SWAP1 PUSH2 0x3A86 JUMP JUMPDEST ISZERO PUSH2 0x1CE1 JUMPI POP PUSH1 0x7 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0x2C258A9F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x584B153E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D2A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D4E SWAP2 SWAP1 PUSH2 0x3A86 JUMP JUMPDEST ISZERO PUSH2 0x1D5D JUMPI POP PUSH1 0x5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 NUMBER DUP3 LT PUSH2 0x1DB8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436865636B706F696E74733A20626C6F636B206E6F7420796574206D696E6564 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DC3 DUP4 PUSH2 0x158E JUMP JUMPDEST DUP5 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 PUSH2 0x1DD6 DUP7 DUP5 DUP4 DUP6 PUSH2 0x2C77 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1E03 JUMPI PUSH2 0x1DED DUP7 PUSH2 0x156A PUSH1 0x1 DUP5 PUSH2 0x3966 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x1E06 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xC565B045403DC03C2EEA82B81A0465EDAD9E2E7FC4D97E11421C209DA93D7A93 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E64 PUSH2 0x11F6 JUMP JUMPDEST PUSH2 0x1E73 CALLER PUSH2 0x7E6 PUSH1 0x1 NUMBER PUSH2 0x3966 JUMP JUMPDEST LT ISZERO PUSH2 0x1EDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73657220766F7465732062656C6F772070 PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1C9BDC1BDCD85B081D1A1C995CDA1BDB19 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF0 DUP7 DUP7 DUP7 DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD DUP7 MLOAD EQ PUSH2 0x1F13 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x3AA8 JUMP JUMPDEST DUP4 MLOAD DUP7 MLOAD EQ PUSH2 0x1F34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x3AA8 JUMP JUMPDEST PUSH1 0x0 DUP7 MLOAD GT PUSH2 0x1F85 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20656D7074792070726F706F73616C0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD SWAP2 DUP3 ADD SWAP1 SWAP3 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP2 SWAP1 MSTORE ISZERO PUSH2 0x2005 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73616C20616C7265616479206578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2017 PUSH2 0x2012 PUSH2 0xE06 JUMP JUMPDEST PUSH2 0x2CD5 JUMP JUMPDEST PUSH2 0x2020 NUMBER PUSH2 0x2CD5 JUMP JUMPDEST PUSH2 0x202A SWAP2 SWAP1 PUSH2 0x3AE9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2039 PUSH2 0x2012 PUSH2 0x8B5 JUMP JUMPDEST PUSH2 0x2043 SWAP1 DUP4 PUSH2 0x3AE9 JUMP JUMPDEST DUP4 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND OR DUP5 SSTORE SWAP1 POP PUSH1 0x1 DUP4 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH32 0x7D84A6263AE0D98D3329BD7B46BB4E8D6F98CD35A7ADB45C274C8B7FD5EBD5E0 DUP5 CALLER DUP12 DUP12 DUP14 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x20BB JUMPI PUSH2 0x20BB PUSH2 0x2E3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20EE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x20D9 JUMPI SWAP1 POP JUMPDEST POP DUP13 DUP9 DUP9 DUP15 PUSH1 0x40 MLOAD PUSH2 0x2108 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3B14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x748D635 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x3A46B1A8 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x218F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x109C SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x8F74EA46EF7894F65EABFB5E6E695DE773A000B47C529AB559178069B226401 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x222B JUMPI POP DUP2 PUSH2 0x109F JUMP JUMPDEST PUSH2 0x109F DUP4 DUP4 PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x2295 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F7253657474696E67733A20766F74696E6720706572696F6420 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x746F6F206C6F77 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x7E3F7F0708A84DE9203036ABAA450DCCC85AD5FF52F78C170F3EDB55CF5E8828 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109F DUP4 DUP4 PUSH2 0x22F2 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x211D JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xCCB45DA8D5717E6C4544694297C4BA5CF151D455C9BB0ED4FC7A38411BC05461 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x2345 DUP4 PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2394E7A3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x8E539E8C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x23AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23CE SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST PUSH2 0x23D8 SWAP2 SWAP1 PUSH2 0x3A67 JUMP JUMPDEST PUSH2 0x8AF SWAP2 SWAP1 PUSH2 0x3C03 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH2 0x252F JUMPI PUSH1 0x0 PUSH2 0x2400 DUP8 PUSH2 0x156A PUSH1 0x1 DUP6 PUSH2 0x3966 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP1 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND DUP1 DUP5 MSTORE PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x20 DUP5 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP8 AND LT ISZERO PUSH2 0x2481 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436865636B706F696E743A20696E76616C6964206B6579000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F0 JUMP JUMPDEST DUP6 PUSH4 0xFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x24D0 JUMPI DUP5 PUSH2 0x24A9 DUP9 PUSH2 0x156A PUSH1 0x1 DUP7 PUSH2 0x3966 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x251F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP9 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP9 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP12 SLOAD PUSH1 0x1 DUP2 ADD DUP14 SSTORE PUSH1 0x0 DUP14 DUP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x20 SHL MUL SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 ADD SSTORE JUMPDEST PUSH1 0x20 ADD MLOAD SWAP3 POP DUP4 SWAP2 POP PUSH2 0x2584 SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 ADD DUP11 SSTORE PUSH1 0x0 DUP11 DUP2 MSTORE SWAP2 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x20 SHL MUL SWAP2 SWAP1 SWAP4 AND OR SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP DUP2 JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xBF26D897 PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x25BD JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x79DD796F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x25D8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x2711897 PUSH1 0xE5 SHL EQ JUMPDEST DUP1 PUSH2 0x8AF JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x8AF JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x2650 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x267A JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 DUP3 DUP5 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP4 ADD MSTORE CHAINID PUSH1 0x80 DUP4 ADD MSTORE ADDRESS PUSH1 0xA0 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x2755 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x27D9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x27D2 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x27D9 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x27F6 JUMPI PUSH2 0x27F6 PUSH2 0x32E4 JUMP JUMPDEST EQ ISZERO PUSH2 0x27FF JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2813 JUMPI PUSH2 0x2813 PUSH2 0x32E4 JUMP JUMPDEST EQ ISZERO PUSH2 0x2861 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2875 JUMPI PUSH2 0x2875 PUSH2 0x32E4 JUMP JUMPDEST EQ ISZERO PUSH2 0x28C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x28D7 JUMPI PUSH2 0x28D7 PUSH2 0x32E4 JUMP JUMPDEST EQ ISZERO PUSH2 0xA4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE PUSH1 0x3 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x29B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74696E6753696D706C653A20766F746520616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x191E4818D85CDD PUSH1 0xCA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0xFF AND DUP5 PUSH1 0xFF AND EQ ISZERO PUSH2 0x2A09 JUMPI DUP3 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x29FE SWAP2 SWAP1 PUSH2 0x394E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x1A4B SWAP1 POP JUMP JUMPDEST PUSH1 0xFF DUP5 AND PUSH1 0x1 EQ ISZERO PUSH2 0x2A29 JUMPI DUP3 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x29FE SWAP2 SWAP1 PUSH2 0x394E JUMP JUMPDEST PUSH1 0xFF DUP5 AND PUSH1 0x2 EQ ISZERO PUSH2 0x2A49 JUMPI DUP3 DUP2 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x29FE SWAP2 SWAP1 PUSH2 0x394E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74696E6753696D706C653A20696E76616C6964207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x6C756520666F7220656E756D20566F746554797065 PUSH1 0x58 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DUP2 SWAP1 DIV PUSH1 0xF SIGNEXTEND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP1 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 DUP2 AND SWAP4 SWAP1 SWAP2 ADD AND MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0xE38335E5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xE38335E5 SWAP1 CALLVALUE SWAP1 PUSH2 0x2B26 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x0 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x3892 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2B53 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109F DUP3 DUP5 PUSH2 0x3C03 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2B8F JUMPI POP PUSH1 0x7 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2BAA JUMPI POP PUSH1 0x2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BB5 DUP5 PUSH2 0xDCF JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2C04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20756E6B6E6F776E2070726F706F73616C206964000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F0 JUMP JUMPDEST NUMBER DUP2 LT PUSH2 0x2C15 JUMPI POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C20 DUP6 PUSH2 0x1201 JUMP JUMPDEST SWAP1 POP NUMBER DUP2 LT PUSH2 0x2C34 JUMPI POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2C3D DUP6 PUSH2 0x2D67 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2C5C JUMPI POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD GT JUMPDEST ISZERO PUSH2 0x2C6C JUMPI POP PUSH1 0x4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP PUSH1 0x3 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x2CCD JUMPI PUSH1 0x0 PUSH2 0x2C8E DUP5 DUP5 PUSH2 0x2D9E JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF DUP7 AND SWAP1 DUP3 ADD SLOAD PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x2CB9 JUMPI DUP1 SWAP3 POP PUSH2 0x2CC7 JUMP JUMPDEST PUSH2 0x2CC4 DUP2 PUSH1 0x1 PUSH2 0x394E JUMP JUMPDEST SWAP4 POP JUMPDEST POP PUSH2 0x2C7A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1516 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2036 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x342062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x2D4D JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP2 SWAP1 PUSH2 0x3003 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH2 0x2D89 SWAP2 SWAP1 PUSH2 0x394E JUMP JUMPDEST PUSH2 0x2D95 PUSH2 0x852 DUP6 PUSH2 0xDCF JUMP JUMPDEST GT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DAD PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x109F SWAP1 DUP5 DUP5 AND PUSH2 0x394E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x109F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2DF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2E0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2E22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2E78 JUMPI PUSH2 0x2E78 PUSH2 0x2E3A JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT ISZERO PUSH2 0x2E99 JUMPI PUSH2 0x2E99 PUSH2 0x2E3A JUMP JUMPDEST PUSH2 0x2EAC PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2E50 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x2EC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2EE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x109F DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x2E80 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x2F13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD SWAP8 POP PUSH2 0x2F23 PUSH1 0x20 DUP11 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2F3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F4B DUP13 DUP4 DUP14 ADD PUSH2 0x2DF9 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2F64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F71 DUP12 DUP3 DUP13 ADD PUSH2 0x2ED7 JUMP JUMPDEST SWAP5 POP POP PUSH2 0x2F80 PUSH1 0x80 DUP11 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2FDC JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x2FC0 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x2FEE JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x109F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2FB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3041 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x304C DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x305C DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x307E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x308A DUP8 DUP3 DUP9 ADD PUSH2 0x2ED7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x30AF JUMPI PUSH2 0x30AF PUSH2 0x2E3A JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x30CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x30DF PUSH2 0x30DA DUP4 PUSH2 0x3096 JUMP JUMPDEST PUSH2 0x2E50 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x30FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3122 JUMPI DUP1 CALLDATALOAD PUSH2 0x3115 DUP2 PUSH2 0x3016 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3102 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x313E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x314E PUSH2 0x30DA DUP4 PUSH2 0x3096 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x316D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3122 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3171 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x31A9 PUSH2 0x30DA DUP4 PUSH2 0x3096 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x31C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3122 JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x31EB JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x31F9 DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x2ED7 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x31CC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x321D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3240 DUP9 DUP4 DUP10 ADD PUSH2 0x30B9 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3262 DUP9 DUP4 DUP10 ADD PUSH2 0x312D JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3285 DUP8 DUP3 DUP9 ADD PUSH2 0x3188 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x32AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x32BE PUSH1 0x20 DUP8 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP4 POP PUSH2 0x32CC PUSH1 0x40 DUP8 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x8 DUP4 LT PUSH2 0x331C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3347 DUP2 PUSH2 0x3016 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x3375 PUSH1 0x20 DUP5 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3396 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x33A6 PUSH1 0x20 DUP8 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x33C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x33CE DUP10 DUP4 DUP11 ADD PUSH2 0x2DF9 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x33E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33F4 DUP9 DUP3 DUP10 ADD PUSH2 0x2ED7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x3427 PUSH1 0x20 DUP7 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x344E DUP8 DUP3 DUP9 ADD PUSH2 0x2DF9 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3470 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3487 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3493 DUP9 DUP4 DUP10 ADD PUSH2 0x30B9 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x34A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x34B5 DUP9 DUP4 DUP10 ADD PUSH2 0x312D JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x34CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x34D7 DUP9 DUP4 DUP10 ADD PUSH2 0x3188 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x34ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x34FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x308A DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2E80 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x352E DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x355C DUP7 DUP3 DUP8 ADD PUSH2 0x2ED7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x109F DUP2 PUSH2 0x3016 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x359B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x35A6 DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x35B6 DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x35D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x35DE DUP10 DUP4 DUP11 ADD PUSH2 0x312D JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x35F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3600 DUP10 DUP4 DUP11 ADD PUSH2 0x312D JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x33E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x362C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3637 DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x366C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3677 DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x369D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x36A8 DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x36B8 DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x36E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x33F4 DUP9 DUP3 DUP10 ADD PUSH2 0x2ED7 JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A206F6E6C79476F7665726E616E63650000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3748 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3769 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73616C206E6F7420737563636573736675 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0xFA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3802 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x37DD JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3802 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3821 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP1 DUP2 SWAP7 POP DUP4 PUSH1 0x5 SHL DUP2 ADD SWAP2 POP DUP3 DUP7 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3885 JUMPI DUP3 DUP5 SUB DUP10 MSTORE PUSH2 0x3873 DUP5 DUP4 MLOAD PUSH2 0x2FB6 JUMP JUMPDEST SWAP9 DUP6 ADD SWAP9 SWAP4 POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x385B JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x38A5 PUSH1 0xA0 DUP4 ADD DUP9 PUSH2 0x37C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x38B7 DUP2 DUP9 PUSH2 0x380D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x38CB DUP2 DUP8 PUSH2 0x383D JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x38F3 PUSH1 0xC0 DUP4 ADD DUP10 PUSH2 0x37C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3905 DUP2 DUP10 PUSH2 0x380D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3919 DUP2 DUP9 PUSH2 0x383D JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x80 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x3961 JUMPI PUSH2 0x3961 PUSH2 0x3938 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3978 JUMPI PUSH2 0x3978 PUSH2 0x3938 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x39A6 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x37C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x39B8 DUP2 DUP8 PUSH2 0x380D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x39CC DUP2 DUP7 PUSH2 0x383D JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x106E PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2FB6 JUMP JUMPDEST DUP6 DUP2 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x3A2E PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x2FB6 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x3A40 DUP2 DUP6 PUSH2 0x2FB6 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3A60 JUMPI PUSH2 0x3A60 PUSH2 0x3938 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3A81 JUMPI PUSH2 0x3A81 PUSH2 0x3938 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x109F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20696E76616C69642070726F706F73616C206C656E6774 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0xFB SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x3B0B JUMPI PUSH2 0x3B0B PUSH2 0x3938 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP12 DUP4 MSTORE PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP13 AND DUP2 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x3B3D DUP3 DUP6 ADD DUP13 PUSH2 0x37C9 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x3B51 DUP3 DUP12 PUSH2 0x380D JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x80 DUP6 ADD MSTORE DUP2 DUP10 MLOAD DUP1 DUP5 MSTORE DUP3 DUP5 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP6 ADD ADD DUP4 DUP13 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3BA2 JUMPI PUSH1 0x1F NOT DUP8 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x3B90 DUP4 DUP4 MLOAD PUSH2 0x2FB6 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3B74 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0xA0 DUP9 ADD MSTORE PUSH2 0x3BB6 DUP2 DUP13 PUSH2 0x383D JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x3BD1 PUSH1 0xC0 DUP5 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0xE0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x3BF3 DUP2 DUP6 PUSH2 0x2FB6 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3C20 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID SELFBALANCE PUSH16 0x7665726E6F723A2072656C6179207265 PUSH23 0x657274656420776974686F7574206D657373616765A264 PUSH10 0x70667358221220ACBFF8 JUMPDEST 0xD0 ADDRESS MSTORE8 DUP3 0xCE ADD GASPRICE 0x1F JUMPI NUMBER 0xBF 0xBD GASLIMIT 0xA9 DUP13 DUP4 RETURN 0xC4 0xBF GAS PUSH18 0xD76DD28AC79C7364736F6C634300080C0033 ",
          "sourceMap": "670:4014:34:-:0;;;906:69;;;-1:-1:-1;;;;;;906:69:34;933:42;906:69;;;980:563;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1475:9;1428:17;1388:6;1229:12;1279:13;1340:1;3441:88:4;;;;;;;;;;;;;-1:-1:-1;;;3441:88:4;;;3481:5;3488:9;:7;;;:9;;:::i;:::-;2550:22:26;;;;;;;;;;2606:25;;;;;;2787;;;;2822:31;;;;2882:13;2863:32;;;;-1:-1:-1;3642:73:26;;2660:117;3642:73;;;1193:25:53;;;1234:18;;;1227:34;;;-1:-1:-1;1277:18:53;;1270:34;;;1320:18;;;1313:34;;;;3709:4:26;1363:19:53;;;1356:61;3642:73:26;;;;;;;;;;1165:19:53;;3642:73:26;;3632:84;;;;;;;;2550:22;;2606:25;;2905:85;;3023:4;3000:28;;3038:21;;-1:-1:-1;;3509:13:4;;::::1;::::0;-1:-1:-1;3509:5:4::1;::::0;-1:-1:-1;3509:13:4::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;892:35:8;;-1:-1:-1;908:18:8;892:15;:35::i;:::-;937:37;954:19;937:16;:37::i;:::-;984:47;1006:24;984:21;:47::i;:::-;-1:-1:-1;;;;;;;;499:20:10;;;1209:44:11;1232:20;1209:22;:44::i;:::-;-1:-1:-1;1780:32:9;1796:15;1780;:32::i;:::-;-1:-1:-1;1494:20:34::5;:44:::0;;-1:-1:-1;;;;;;1494:44:34::5;-1:-1:-1::0;;;;;1494:44:34;;;::::5;::::0;;;::::5;::::0;;-1:-1:-1;670:4014:34;;-1:-1:-1;;;;670:4014:34;4780:99:4;4862:10;;;;;;;;;;;;-1:-1:-1;;;4862:10:4;;;;;4780:99::o;2622:171:8:-;2718:12;;2703:44;;;1602:25:53;;;1658:2;1643:18;;1636:34;;;2703:44:8;;1575:18:53;2703:44:8;;;;;;;2757:12;:29;2622:171::o;2913:316::-;3074:1;3056:15;:19;3048:71;;;;-1:-1:-1;;;3048:71:8;;1883:2:53;3048:71:8;;;1865:21:53;1922:2;1902:18;;;1895:30;1961:34;1941:18;;;1934:62;-1:-1:-1;;;2012:18:53;;;2005:37;2059:19;;3048:71:8;;;;;;;;;3150:13;;3134:47;;;1602:25:53;;;1658:2;1643:18;;1636:34;;;3134:47:8;;1575:18:53;3134:47:8;;;;;;;3191:13;:31;2913:316::o;3359:213::-;3473:18;;3452:62;;;1602:25:53;;;1658:2;1643:18;;1636:34;;;3452:62:8;;1575:18:53;3452:62:8;;;;;;;3524:18;:41;3359:213::o;3498:887:11:-;2503:3;3606:18;:41;;3585:155;;;;-1:-1:-1;;;3585:155:11;;2291:2:53;3585:155:11;;;2273:21:53;2330:2;2310:18;;;2303:30;2369:34;2349:18;;;2342:62;2440:34;2420:18;;;2413:62;-1:-1:-1;;;2491:19:53;;;2484:34;2535:19;;3585:155:11;2089:471:53;3585:155:11;3751:26;3780:17;:15;:17::i;:::-;3751:46;-1:-1:-1;3931:23:11;;;;;:75;;-1:-1:-1;3958:23:11;:43;:48;3931:75;3927:268;;;4022:23;:36;;4081:89;;;;;;;;4119:1;4081:89;;;;;;4130:38;4149:18;4130;;;;;:38;;:::i;:::-;-1:-1:-1;;;;;4081:89:11;;;;;;4022:162;;;;;;;-1:-1:-1;4022:162:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3927:268;4252:48;4281:18;4252:23;:28;;;;;;:48;;;;:::i;:::-;-1:-1:-1;;4316:62:11;;;1602:25:53;;;1658:2;1643:18;;1636:34;;;4316:62:11;;1575:18:53;4316:62:11;;;;;;;3575:810;3498:887;:::o;6386:176:9:-;6489:9;;6466:56;;;-1:-1:-1;;;;;6489:9:9;;;2777:34:53;;2847:15;;;2842:2;2827:18;;2820:43;6466:56:9;;2712:18:53;6466:56:9;;;;;;;6532:9;:23;;-1:-1:-1;;;;;;6532:23:9;-1:-1:-1;;;;;6532:23:9;;;;;;;;;;6386:176::o;1357:191:11:-;1439:23;:43;1413:7;;1439:48;:102;;1509:32;:23;:30;;;;;:32;;:::i;:::-;-1:-1:-1;;;;;1439:102:11;1432:109;;1357:191;:::o;1439:102::-;-1:-1:-1;1490:16:11;;;1357:191::o;2836:192:30:-;2893:7;-1:-1:-1;;;;;2920:26:30;;;2912:78;;;;-1:-1:-1;;;2912:78:30;;3076:2:53;2912:78:30;;;3058:21:53;3115:2;3095:18;;;3088:30;3154:34;3134:18;;;3127:62;-1:-1:-1;;;3205:18:53;;;3198:37;3252:19;;2912:78:30;2874:403:53;2912:78:30;-1:-1:-1;3015:5:30;2836:192::o;3000:197:21:-;3069:7;3078;3104:86;3112:4;:17;;3131:31;3149:12;3131:17;;;;;:31;;:::i;:::-;3164:25;3183:5;3164:18;;;;;:25;;:::i;:::-;3104:7;:86::i;:::-;-1:-1:-1;;;;;3097:93:21;;;;;;;-1:-1:-1;3000:197:21;-1:-1:-1;;;3000:197:21:o;3779:205::-;3873:24;;3840:7;;3914:8;;:63;;3929:41;3943:4;3962:7;3968:1;3962:3;:7;:::i;:::-;7653:25;7713:20;;;7778:4;7765:18;;;7761:28;;7568:237;3929:41;:48;;;;-1:-1:-1;;;;;3929:48:21;3914:63;;;3925:1;3914:63;3907:70;3779:205;-1:-1:-1;;;3779:205:21:o;15264:187:30:-;15320:6;15355:16;15346:25;;;15338:76;;;;-1:-1:-1;;;15338:76:30;;3711:2:53;15338:76:30;;;3693:21:53;3750:2;3730:18;;;3723:30;3789:34;3769:18;;;3762:62;-1:-1:-1;;;3840:18:53;;;3833:36;3886:19;;15338:76:30;3509:402:53;4999:879:21;5159:11;;5117:7;;;;5185;;5181:691;;5260:22;5285:28;5299:4;5305:7;5311:1;5305:3;:7;:::i;5285:28::-;5260:53;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5260:53:21;;;;;;;-1:-1:-1;5388:24:21;;;-1:-1:-1;5388:24:21;5380:60;;;;-1:-1:-1;;;5380:60:21;;4118:2:53;5380:60:21;;;4100:21:53;4157:2;4137:18;;;4130:30;4196:25;4176:18;;;4169:53;4239:18;;5380:60:21;3916:347:53;5380:60:21;5525:3;5504:24;;:4;:17;;;:24;;;5500:202;;;5586:5;5548:28;5562:4;5568:7;5574:1;5568:3;:7;:::i;5548:28::-;:43;;-1:-1:-1;;;;;5548:43:21;;;;;;;;;;;;;;;;5500:202;;;5640:46;;;;;;;;;;;;;;;-1:-1:-1;;;;;5640:46:21;;;;;;;;;;5630:57;;;;;;;-1:-1:-1;5630:57:21;;;;;;;;;;;;;;;;;;;;;;;;;5500:202;5723:11;;;;-1:-1:-1;5736:5:21;;-1:-1:-1;5715:27:21;;-1:-1:-1;5715:27:21;5181:691;-1:-1:-1;;5783:46:21;;;;;;;;;;;;;;;-1:-1:-1;;;;;5783:46:21;;;;;;;;;;5773:57;;;;;;;-1:-1:-1;5773:57:21;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5822:5:21;4999:879;;;;;;;:::o;670:4014:34:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;670:4014:34;;;-1:-1:-1;670:4014:34;;;;;;;;;;;;;;14:139:53;-1:-1:-1;;;;;97:31:53;;87:42;;77:70;;143:1;140;133:12;77:70;14:139;:::o;158:771::-;315:6;323;331;339;347;355;408:3;396:9;387:7;383:23;379:33;376:53;;;425:1;422;415:12;376:53;457:9;451:16;476:39;509:5;476:39;:::i;:::-;584:2;569:18;;563:25;534:5;;-1:-1:-1;597:41:53;563:25;597:41;:::i;:::-;657:7;647:17;;;704:2;693:9;689:18;683:25;673:35;;748:2;737:9;733:18;727:25;717:35;;792:3;781:9;777:19;771:26;761:36;;842:3;831:9;827:19;821:26;856:41;889:7;856:41;:::i;:::-;916:7;906:17;;;158:771;;;;;;;;:::o;3282:222::-;3322:4;3350:1;3347;3344:8;3341:131;;;3394:10;3389:3;3385:20;3382:1;3375:31;3429:4;3426:1;3419:15;3457:4;3454:1;3447:15;3341:131;-1:-1:-1;3489:9:53;;3282:222::o;4268:380::-;4347:1;4343:12;;;;4390;;;4411:61;;4465:4;4457:6;4453:17;4443:27;;4411:61;4518:2;4510:6;4507:14;4487:18;4484:38;4481:161;;;4564:10;4559:3;4555:20;4552:1;4545:31;4599:4;4596:1;4589:15;4627:4;4624:1;4617:15;4481:161;;4268:380;;;:::o;:::-;670:4014:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@BALLOT_TYPEHASH_589": {
              "entryPoint": null,
              "id": 589,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@COUNTING_MODE_3102": {
              "entryPoint": null,
              "id": 3102,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@EXTENDED_BALLOT_TYPEHASH_594": {
              "entryPoint": null,
              "id": 594,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_683": {
              "entryPoint": null,
              "id": 683,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_afterExecute_1356": {
              "entryPoint": 6753,
              "id": 1356,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@_beforeExecute_1318": {
              "entryPoint": 6577,
              "id": 1318,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@_buildDomainSeparator_7300": {
              "entryPoint": null,
              "id": 7300,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_castVote_10780": {
              "entryPoint": 6810,
              "id": 10780,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@_castVote_1744": {
              "entryPoint": 5764,
              "id": 1744,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@_countVote_3291": {
              "entryPoint": 10544,
              "id": 3291,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@_defaultParams_967": {
              "entryPoint": null,
              "id": 967,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_domainSeparatorV4_7273": {
              "entryPoint": 9719,
              "id": 7273,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_execute_10641": {
              "entryPoint": 6740,
              "id": 10641,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@_execute_3746": {
              "entryPoint": 10987,
              "id": 3746,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@_executor_10682": {
              "entryPoint": 2187,
              "id": 10682,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_executor_3810": {
              "entryPoint": null,
              "id": 3810,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_getVotes_3888": {
              "entryPoint": 8477,
              "id": 3888,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_hashTypedDataV4_7316": {
              "entryPoint": 5656,
              "id": 7316,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_insert_5437": {
              "entryPoint": 9186,
              "id": 5437,
              "parameterSlots": 3,
              "returnSlots": 2
            },
            "@_msgData_6412": {
              "entryPoint": null,
              "id": 6412,
              "parameterSlots": 0,
              "returnSlots": 2
            },
            "@_msgSender_6403": {
              "entryPoint": null,
              "id": 6403,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_quorumReached_3178": {
              "entryPoint": 11623,
              "id": 3178,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_revert_5019": {
              "entryPoint": 11581,
              "id": 5019,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_setProposalThreshold_3469": {
              "entryPoint": 8951,
              "id": 3469,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_setVotingDelay_3430": {
              "entryPoint": 7705,
              "id": 3430,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_setVotingPeriod_3453": {
              "entryPoint": 8757,
              "id": 3453,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_throwError_6856": {
              "entryPoint": 10210,
              "id": 6856,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_unsafeAccess_5556": {
              "entryPoint": null,
              "id": 5556,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_updateQuorumNumerator_4091": {
              "entryPoint": 6245,
              "id": 4091,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_updateTimelock_3846": {
              "entryPoint": 8627,
              "id": 3846,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_upperBinaryLookup_5489": {
              "entryPoint": 11383,
              "id": 5489,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@_voteSucceeded_3201": {
              "entryPoint": null,
              "id": 3201,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@average_7419": {
              "entryPoint": 11678,
              "id": 7419,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@castVoteBySig_1583": {
              "entryPoint": 3601,
              "id": 1583,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@castVoteWithReasonAndParamsBySig_1641": {
              "entryPoint": 2240,
              "id": 1641,
              "parameterSlots": 8,
              "returnSlots": 1
            },
            "@castVoteWithReasonAndParams_1539": {
              "entryPoint": 3771,
              "id": 1539,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@castVoteWithReason_1510": {
              "entryPoint": 4134,
              "id": 1510,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@castVote_1484": {
              "entryPoint": 3730,
              "id": 1484,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@clear_10369": {
              "entryPoint": null,
              "id": 10369,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@div_9980": {
              "entryPoint": 11103,
              "id": 9980,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@empty_10411": {
              "entryPoint": null,
              "id": 10411,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@execute_1198": {
              "entryPoint": 3298,
              "id": 1198,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@getAtBlock_5092": {
              "entryPoint": 7527,
              "id": 5092,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getDeadline_6711": {
              "entryPoint": null,
              "id": 6711,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getVotesWithParams_1460": {
              "entryPoint": 4239,
              "id": 1460,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@getVotes_10553": {
              "entryPoint": 5130,
              "id": 10553,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getVotes_1440": {
              "entryPoint": 8918,
              "id": 1440,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@hasVoted_3121": {
              "entryPoint": null,
              "id": 3121,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@hashProposal_786": {
              "entryPoint": 4932,
              "id": 786,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@isUnset_6753": {
              "entryPoint": null,
              "id": 6753,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@latest_5284": {
              "entryPoint": 5456,
              "id": 5284,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@name_744": {
              "entryPoint": 2640,
              "id": 744,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@onERC1155BatchReceived_1854": {
              "entryPoint": null,
              "id": 1854,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@onERC1155Received_1830": {
              "entryPoint": null,
              "id": 1830,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@onERC721Received_1808": {
              "entryPoint": null,
              "id": 1808,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@popFront_10248": {
              "entryPoint": 6118,
              "id": 10248,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@proposalDeadline_907": {
              "entryPoint": 4609,
              "id": 907,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@proposalEta_3636": {
              "entryPoint": 4444,
              "id": 3636,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@proposalSnapshot_890": {
              "entryPoint": 3535,
              "id": 890,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@proposalThreshold_10611": {
              "entryPoint": 4598,
              "id": 10611,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@proposalThreshold_3375": {
              "entryPoint": null,
              "id": 3375,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@proposalVotes_3149": {
              "entryPoint": null,
              "id": 3149,
              "parameterSlots": 1,
              "returnSlots": 3
            },
            "@propose_10598": {
              "entryPoint": 4216,
              "id": 10598,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@propose_1113": {
              "entryPoint": 7770,
              "id": 1113,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@pushBack_10122": {
              "entryPoint": 10927,
              "id": 10122,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@push_5220": {
              "entryPoint": 5402,
              "id": 5220,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@queue_3714": {
              "entryPoint": 2786,
              "id": 3714,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@quorumDenominator_3998": {
              "entryPoint": null,
              "id": 3998,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@quorumNumerator_3941": {
              "entryPoint": 4262,
              "id": 3941,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@quorumNumerator_3989": {
              "entryPoint": 3845,
              "id": 3989,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@quorum_10534": {
              "entryPoint": 5282,
              "id": 10534,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@quorum_4021": {
              "entryPoint": 9016,
              "id": 4021,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@recover_7103": {
              "entryPoint": 5734,
              "id": 7103,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@relay_1776": {
              "entryPoint": 4656,
              "id": 1776,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@setDeadline_6726": {
              "entryPoint": null,
              "id": 6726,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@setProposalThreshold_3414": {
              "entryPoint": 5142,
              "id": 3414,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setVotingDelay_3388": {
              "entryPoint": 3994,
              "id": 3388,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setVotingPeriod_3401": {
              "entryPoint": 4990,
              "id": 3401,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@state_10570": {
              "entryPoint": 3719,
              "id": 10570,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@state_3597": {
              "entryPoint": 7197,
              "id": 3597,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@state_873": {
              "entryPoint": 11115,
              "id": 873,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_10698": {
              "entryPoint": 2212,
              "id": 10698,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_3530": {
              "entryPoint": 5619,
              "id": 3530,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_734": {
              "entryPoint": 9612,
              "id": 734,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_7340": {
              "entryPoint": null,
              "id": 7340,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@timelock_3610": {
              "entryPoint": null,
              "id": 3610,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@toTypedDataHash_7162": {
              "entryPoint": null,
              "id": 7162,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@toUint224_8321": {
              "entryPoint": 5293,
              "id": 8321,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@toUint32_8921": {
              "entryPoint": 5518,
              "id": 8921,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@toUint64_8821": {
              "entryPoint": 11477,
              "id": 8821,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@token_3857": {
              "entryPoint": null,
              "id": 3857,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@tryRecover_7070": {
              "entryPoint": 10014,
              "id": 7070,
              "parameterSlots": 4,
              "returnSlots": 2
            },
            "@updateQuorumNumerator_4034": {
              "entryPoint": 2488,
              "id": 4034,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@updateTimelock_3824": {
              "entryPoint": 4304,
              "id": 3824,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@verifyCallResult_4999": {
              "entryPoint": 8732,
              "id": 4999,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@version_754": {
              "entryPoint": null,
              "id": 754,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@votingDelay_10505": {
              "entryPoint": 3590,
              "id": 10505,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@votingDelay_3355": {
              "entryPoint": null,
              "id": 3355,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@votingPeriod_10518": {
              "entryPoint": 2229,
              "id": 10518,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@votingPeriod_3365": {
              "entryPoint": null,
              "id": 3365,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_array_address_dyn": {
              "entryPoint": 12473,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_array_bytes_dyn": {
              "entryPoint": 12680,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_array_uint256_dyn": {
              "entryPoint": 12589,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_available_length_bytes": {
              "entryPoint": 11904,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_bytes": {
              "entryPoint": 11991,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_string_calldata": {
              "entryPoint": 11769,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr": {
              "entryPoint": 13699,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
              "entryPoint": 12331,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr": {
              "entryPoint": 13957,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 13913,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr": {
              "entryPoint": 13846,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr": {
              "entryPoint": 13582,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_bytes32": {
              "entryPoint": 12807,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_string_memory_ptr": {
              "entryPoint": 13402,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 14982,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32_fromMemory": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 11705,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_TimelockController_$3066": {
              "entryPoint": 13670,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 12189,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 14256,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_address": {
              "entryPoint": 13090,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256t_uint8": {
              "entryPoint": 13138,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptr": {
              "entryPoint": 13313,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptrt_bytes_memory_ptr": {
              "entryPoint": 13182,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptrt_bytes_memory_ptrt_uint8t_bytes32t_bytes32": {
              "entryPoint": 12023,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 8
            },
            "abi_decode_tuple_t_uint256t_uint8t_uint8t_bytes32t_bytes32": {
              "entryPoint": 12950,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_uint8": {
              "entryPoint": 11747,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_array_address_dyn": {
              "entryPoint": 14281,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_array_bytes_dyn": {
              "entryPoint": 14397,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_array_uint256_dyn": {
              "entryPoint": 14349,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_string": {
              "entryPoint": 12214,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 14061,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__fromStack_reversed": {
              "entryPoint": 14739,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_rational_0_by_1_t_bytes32__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32_t_bytes32__fromStack_reversed": {
              "entryPoint": 14482,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_rational_0_by_1_t_bytes32_t_uint256__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32_t_bytes32_t_uint256__fromStack_reversed": {
              "entryPoint": 14560,
              "id": null,
              "parameterSlots": 7,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_uint256_t_uint8__to_t_bytes32_t_uint256_t_uint8__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IVotes_$4211__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_enum$_ProposalState_$1870__to_t_uint8__fromStack_reversed": {
              "entryPoint": 13050,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 12291,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_01397b9b23826f2770c44682f6f60114915147b09511a75fee3231adbc22847f__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 14077,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0687f8064c09ccf183090b5092c4485c730072a161487645a7e37b56cef356bb__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_35c793b1b5a6be245307722bba06fa552ac609ebfd70358ab0b3220eed40db4d__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 15016,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3f314603cb191f371d117be724372820f824fc7fbb608c5408b31620bafe9a83__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_52977fe78dd360b196702e8b1aa8e7d06cd560911da4c4d483548d7b2d1a38d8__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_5b1e239298a1362f9b5245bd4e9393de28380a12326aa31532e03fe3f1061d80__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_65bd29ebd873d82da6b3634513fc6582859c8e00f2a09cb4bdbeddf7d05eb5be__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8400b334e0df18026c76df742cddc258619f9923d5f5b8ba67cd6eec1d1f3513__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_a608627370ddd238e48feab42026732822e64969fe5a8155723eaa5f397576d9__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 14191,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_b717461289064d78d4f64eae2786bccf758ed88a7bfa28ee6fa5093be89d54df__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_be0e8e67d15e920d3846a46401854a27a676d8965bbdde05e68fc2cc5672c892__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c16dd4ca2a7081ef35bfb3860532c95d6b1aacddadf6f22f1058fc06b5718887__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c1bb0f67bc14091429c4b8b5d74e1f929b2838d72b5fb3c5a2cbef13b2faab40__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_df78ee0077e11770202b643d4ac130b9964a5ac311c9b8d8ed6242eb4e2dcf86__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint64_t_uint64_t_string_memory_ptr__to_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 15124,
              "id": null,
              "parameterSlots": 10,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint8_t_uint256_t_string_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 14814,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint8_t_uint256_t_string_memory_ptr_t_bytes_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_string_memory_ptr_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 14854,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_uint64": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "allocate_memory": {
              "entryPoint": 11856,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_allocation_size_array_address_dyn": {
              "entryPoint": 12438,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 14670,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint64": {
              "entryPoint": 15081,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 15363,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 14951,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 14694,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 14132,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 14924,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 14648,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x21": {
              "entryPoint": 13028,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 14717,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 11834,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 12310,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:37920:53",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:53",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "83:217:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "129:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "138:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "141:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "131:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "131:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "131:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "104:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "113:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "100:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "100:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "125:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "96:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "96:32:53"
                          },
                          "nodeType": "YulIf",
                          "src": "93:52:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "154:36:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "180:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "167:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "167:23:53"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "158:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "254:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "263:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "266:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "256:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "256:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "256:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "212:5:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "223:5:53"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "234:3:53",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "239:10:53",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "230:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "230:20:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "219:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "219:32:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "209:2:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "209:43:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "202:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "202:51:53"
                          },
                          "nodeType": "YulIf",
                          "src": "199:71:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "279:15:53",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "289:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "279:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "49:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "60:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "72:6:53",
                        "type": ""
                      }
                    ],
                    "src": "14:286:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "400:92:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "410:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "422:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "433:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "418:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "418:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "410:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "452:9:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "477:6:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "470:6:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "470:14:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "463:6:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "463:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "445:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "445:41:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "445:41:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "369:9:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "380:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "391:4:53",
                        "type": ""
                      }
                    ],
                    "src": "305:187:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "598:76:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "608:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "620:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "631:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "616:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "616:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "608:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "650:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "661:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "643:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "643:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "643:25:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "567:9:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "578:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "589:4:53",
                        "type": ""
                      }
                    ],
                    "src": "497:177:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "726:109:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "736:29:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "758:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "745:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "745:20:53"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "736:5:53"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "813:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "822:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "825:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "815:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "815:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "815:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "787:5:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "798:5:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "805:4:53",
                                        "type": "",
                                        "value": "0xff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "794:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "794:16:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "784:2:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "784:27:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "777:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "777:35:53"
                          },
                          "nodeType": "YulIf",
                          "src": "774:55:53"
                        }
                      ]
                    },
                    "name": "abi_decode_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "705:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "716:5:53",
                        "type": ""
                      }
                    ],
                    "src": "679:156:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "913:275:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "962:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "971:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "974:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "964:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "964:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "964:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "941:6:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "949:4:53",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "937:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "937:17:53"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "956:3:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "933:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "933:27:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "926:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "926:35:53"
                          },
                          "nodeType": "YulIf",
                          "src": "923:55:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "987:30:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1010:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "997:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "997:20:53"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "987:6:53"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1060:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1069:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1072:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1062:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1062:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1062:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1032:6:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1040:18:53",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1029:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1029:30:53"
                          },
                          "nodeType": "YulIf",
                          "src": "1026:50:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1085:29:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1101:6:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1109:4:53",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1097:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1097:17:53"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nodeType": "YulIdentifier",
                              "src": "1085:8:53"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1166:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1175:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1178:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1168:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1168:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1168:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1137:6:53"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "1145:6:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1133:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1133:19:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1154:4:53",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1129:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1129:30:53"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1161:3:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1126:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1126:39:53"
                          },
                          "nodeType": "YulIf",
                          "src": "1123:59:53"
                        }
                      ]
                    },
                    "name": "abi_decode_string_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "876:6:53",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "884:3:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nodeType": "YulTypedName",
                        "src": "892:8:53",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "902:6:53",
                        "type": ""
                      }
                    ],
                    "src": "840:348:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1225:95:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1242:1:53",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1249:3:53",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1254:10:53",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1245:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1245:20:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1235:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1235:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1235:31:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1282:1:53",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1285:4:53",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1275:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1275:15:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1275:15:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1306:1:53",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1309:4:53",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "1299:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1299:15:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1299:15:53"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "1193:127:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1370:230:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1380:19:53",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1396:2:53",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1390:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1390:9:53"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "1380:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1408:58:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1430:6:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "1446:4:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1452:2:53",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1442:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1442:13:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1461:2:53",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "1457:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1457:7:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1438:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1438:27:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1426:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1426:40:53"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "1412:10:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1541:22:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1543:16:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1543:18:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1543:18:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1484:10:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1496:18:53",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1481:2:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1481:34:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1520:10:53"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1532:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1517:2:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1517:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1478:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1478:62:53"
                          },
                          "nodeType": "YulIf",
                          "src": "1475:88:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1579:2:53",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1583:10:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1572:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1572:22:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1572:22:53"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "1350:4:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "1359:6:53",
                        "type": ""
                      }
                    ],
                    "src": "1325:275:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1679:332:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1723:22:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1725:16:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1725:18:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1725:18:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1695:6:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1703:18:53",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1692:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1692:30:53"
                          },
                          "nodeType": "YulIf",
                          "src": "1689:56:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1754:66:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "1791:6:53"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1799:2:53",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1787:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1787:15:53"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1808:2:53",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "1804:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1804:7:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1783:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1783:29:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1814:4:53",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1779:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1779:40:53"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1763:15:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1763:57:53"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "1754:5:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "1836:5:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1843:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1829:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1829:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1829:21:53"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1888:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1897:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1900:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1890:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1890:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1890:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "1869:3:53"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1874:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1865:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1865:16:53"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "1883:3:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1862:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1862:25:53"
                          },
                          "nodeType": "YulIf",
                          "src": "1859:45:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nodeType": "YulIdentifier",
                                    "src": "1930:5:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1937:4:53",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1926:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1926:16:53"
                              },
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "1944:3:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1949:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "1913:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1913:43:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1913:43:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "array",
                                        "nodeType": "YulIdentifier",
                                        "src": "1980:5:53"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "1987:6:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1976:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1976:18:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1996:4:53",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1972:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1972:29:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2003:1:53",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1965:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1965:40:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1965:40:53"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "1648:3:53",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "1653:6:53",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1661:3:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "1669:5:53",
                        "type": ""
                      }
                    ],
                    "src": "1605:406:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2068:168:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2117:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2126:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2129:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2119:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2119:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2119:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2096:6:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2104:4:53",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2092:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2092:17:53"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2111:3:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2088:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2088:27:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2081:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2081:35:53"
                          },
                          "nodeType": "YulIf",
                          "src": "2078:55:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2142:88:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2189:6:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2197:4:53",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2185:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2185:17:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2217:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2204:12:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2204:20:53"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2226:3:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "2151:33:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2151:79:53"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "2142:5:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2042:6:53",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2050:3:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2058:5:53",
                        "type": ""
                      }
                    ],
                    "src": "2016:220:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2438:781:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2485:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2494:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2497:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2487:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2487:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2487:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2459:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2468:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2455:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2455:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2480:3:53",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2451:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2451:33:53"
                          },
                          "nodeType": "YulIf",
                          "src": "2448:53:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2510:33:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2533:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2520:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2520:23:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2510:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2552:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2583:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2594:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2579:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2579:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "2562:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2562:36:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2552:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2607:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2638:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2649:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2634:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2634:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2621:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2621:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "2611:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2662:28:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2672:18:53",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2666:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2717:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2726:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2729:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2719:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2719:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2719:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2705:6:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2713:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2702:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2702:14:53"
                          },
                          "nodeType": "YulIf",
                          "src": "2699:34:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2742:85:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2799:9:53"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2810:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2795:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2795:22:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2819:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "2768:26:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2768:59:53"
                          },
                          "variables": [
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "2746:8:53",
                              "type": ""
                            },
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "2756:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2836:18:53",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "2846:8:53"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "2836:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2863:18:53",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "2873:8:53"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "2863:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2890:48:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2923:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2934:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2919:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2919:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2906:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2906:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "2894:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2967:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2976:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2979:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2969:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2969:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2969:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "2953:8:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2963:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2950:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2950:16:53"
                          },
                          "nodeType": "YulIf",
                          "src": "2947:36:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2992:61:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3023:9:53"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3034:8:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3019:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3019:24:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3045:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "3002:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3002:51:53"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "2992:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3062:47:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3093:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3104:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3089:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3089:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "3072:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3072:37:53"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "3062:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3118:43:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3145:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3156:3:53",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3141:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3141:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3128:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3128:33:53"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "3118:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3170:43:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3197:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3208:3:53",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3193:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3193:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3180:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3180:33:53"
                          },
                          "variableNames": [
                            {
                              "name": "value7",
                              "nodeType": "YulIdentifier",
                              "src": "3170:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptrt_bytes_memory_ptrt_uint8t_bytes32t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2348:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2359:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2371:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2379:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2387:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "2395:6:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "2403:6:53",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "2411:6:53",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "2419:6:53",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "2427:6:53",
                        "type": ""
                      }
                    ],
                    "src": "2241:978:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3294:110:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3340:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3349:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3352:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3342:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3342:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3342:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3315:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3324:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3311:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3311:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3336:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3307:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3307:32:53"
                          },
                          "nodeType": "YulIf",
                          "src": "3304:52:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3365:33:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3388:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3375:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3375:23:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3365:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3260:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3271:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3283:6:53",
                        "type": ""
                      }
                    ],
                    "src": "3224:180:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3459:422:53",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3469:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3489:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3483:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3483:12:53"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3473:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3511:3:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3516:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3504:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3504:19:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3504:19:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3532:10:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3541:1:53",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "3536:1:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3603:110:53",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "3617:14:53",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3627:4:53",
                                  "type": "",
                                  "value": "0x20"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulTypedName",
                                    "src": "3621:2:53",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "3659:3:53"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3664:1:53"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3655:3:53"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3655:11:53"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3668:2:53"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3651:3:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3651:20:53"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3687:5:53"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3694:1:53"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "3683:3:53"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3683:13:53"
                                            },
                                            {
                                              "name": "_1",
                                              "nodeType": "YulIdentifier",
                                              "src": "3698:2:53"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3679:3:53"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3679:22:53"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3673:5:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3673:29:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3644:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3644:59:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3644:59:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3562:1:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3565:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3559:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3559:13:53"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "3573:21:53",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3575:17:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "3584:1:53"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3587:4:53",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3580:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3580:12:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "3575:1:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "3555:3:53",
                            "statements": []
                          },
                          "src": "3551:162:53"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3747:62:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "pos",
                                              "nodeType": "YulIdentifier",
                                              "src": "3776:3:53"
                                            },
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "3781:6:53"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3772:3:53"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3772:16:53"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3790:4:53",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3768:3:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3768:27:53"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3797:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3761:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3761:38:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3761:38:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3728:1:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3731:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3725:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3725:13:53"
                          },
                          "nodeType": "YulIf",
                          "src": "3722:87:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3818:57:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "3833:3:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "3846:6:53"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3854:2:53",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3842:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3842:15:53"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "3863:2:53",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "3859:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3859:7:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "3838:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3838:29:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3829:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3829:39:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3870:4:53",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3825:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3825:50:53"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "3818:3:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3436:5:53",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "3443:3:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3451:3:53",
                        "type": ""
                      }
                    ],
                    "src": "3409:472:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4007:99:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4024:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4035:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4017:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4017:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4017:21:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4047:53:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4073:6:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4085:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4096:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4081:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4081:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "4055:17:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4055:45:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4047:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3976:9:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3987:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3998:4:53",
                        "type": ""
                      }
                    ],
                    "src": "3886:220:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4156:86:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4220:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4229:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4232:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4222:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4222:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4222:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4179:5:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4190:5:53"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "4205:3:53",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "4210:1:53",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "4201:3:53"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4201:11:53"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4214:1:53",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "4197:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4197:19:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4186:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4186:31:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "4176:2:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4176:42:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4169:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4169:50:53"
                          },
                          "nodeType": "YulIf",
                          "src": "4166:70:53"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4145:5:53",
                        "type": ""
                      }
                    ],
                    "src": "4111:131:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4377:535:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4424:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4433:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4436:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4426:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4426:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4426:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4398:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4407:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4394:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4394:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4419:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4390:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4390:33:53"
                          },
                          "nodeType": "YulIf",
                          "src": "4387:53:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4449:36:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4475:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4462:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4462:23:53"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "4453:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4519:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "4494:24:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4494:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4494:31:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4534:15:53",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4544:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4534:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4558:47:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4590:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4601:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4586:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4586:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4573:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4573:32:53"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "4562:7:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "4639:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "4614:24:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4614:33:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4614:33:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4656:17:53",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "4666:7:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4656:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4682:42:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4709:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4720:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4705:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4705:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4692:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4692:32:53"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "4682:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4733:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4764:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4775:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4760:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4760:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4747:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4747:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "4737:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4822:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4831:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4834:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4824:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4824:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4824:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4794:6:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4802:18:53",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4791:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4791:30:53"
                          },
                          "nodeType": "YulIf",
                          "src": "4788:50:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4847:59:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4878:9:53"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "4889:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4874:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4874:22:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4898:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "4857:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4857:49:53"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "4847:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4319:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4330:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4342:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4350:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "4358:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "4366:6:53",
                        "type": ""
                      }
                    ],
                    "src": "4247:665:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5016:103:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5026:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5038:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5049:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5034:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5034:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5026:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5068:9:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5083:6:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5095:3:53",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5100:10:53",
                                        "type": "",
                                        "value": "0xffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "5091:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5091:20:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5079:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5079:33:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5061:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5061:52:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5061:52:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4985:9:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4996:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5007:4:53",
                        "type": ""
                      }
                    ],
                    "src": "4917:202:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5193:114:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5237:22:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "5239:16:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5239:18:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5239:18:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5209:6:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5217:18:53",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5206:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5206:30:53"
                          },
                          "nodeType": "YulIf",
                          "src": "5203:56:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5268:33:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5284:1:53",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "5287:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "5280:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5280:14:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5296:4:53",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5276:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5276:25:53"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "5268:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_array_address_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "5173:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "5184:4:53",
                        "type": ""
                      }
                    ],
                    "src": "5124:183:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5376:673:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5425:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5434:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5437:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5427:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5427:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5427:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "5404:6:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5412:4:53",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5400:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5400:17:53"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "5419:3:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "5396:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5396:27:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5389:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5389:35:53"
                          },
                          "nodeType": "YulIf",
                          "src": "5386:55:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5450:30:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5473:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5460:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5460:20:53"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5454:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5489:14:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5499:4:53",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "5493:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5512:71:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5579:2:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_address_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "5539:39:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5539:43:53"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "5523:15:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5523:60:53"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "5516:3:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5592:16:53",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "5605:3:53"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "5596:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "5624:3:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5629:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5617:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5617:15:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5617:15:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5641:19:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "5652:3:53"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "5657:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5648:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5648:12:53"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "5641:3:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5669:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5691:6:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5703:1:53",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "5706:2:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "5699:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5699:10:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5687:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5687:23:53"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "5712:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5683:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5683:32:53"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "5673:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5743:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5752:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5755:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5745:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5745:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5745:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5730:6:53"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "5738:3:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "5727:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5727:15:53"
                          },
                          "nodeType": "YulIf",
                          "src": "5724:35:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5768:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "5783:6:53"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "5791:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5779:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5779:15:53"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "5772:3:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5859:161:53",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "5873:30:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "5899:3:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "calldataload",
                                    "nodeType": "YulIdentifier",
                                    "src": "5886:12:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5886:17:53"
                                },
                                "variables": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulTypedName",
                                    "src": "5877:5:53",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "5941:5:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "validator_revert_address",
                                    "nodeType": "YulIdentifier",
                                    "src": "5916:24:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5916:31:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5916:31:53"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "5967:3:53"
                                    },
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "5972:5:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "5960:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5960:18:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5960:18:53"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "5991:19:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "6002:3:53"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "6007:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5998:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5998:12:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "5991:3:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "5814:3:53"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5819:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "5811:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5811:15:53"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "5827:23:53",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "5829:19:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "5840:3:53"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "5845:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5836:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5836:12:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "5829:3:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "5807:3:53",
                            "statements": []
                          },
                          "src": "5803:217:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6029:14:53",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "6038:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "6029:5:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_address_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "5350:6:53",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5358:3:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "5366:5:53",
                        "type": ""
                      }
                    ],
                    "src": "5312:737:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6118:598:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6167:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6176:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6179:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6169:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6169:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6169:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "6146:6:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6154:4:53",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6142:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6142:17:53"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "6161:3:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6138:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6138:27:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "6131:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6131:35:53"
                          },
                          "nodeType": "YulIf",
                          "src": "6128:55:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6192:30:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6215:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6202:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6202:20:53"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6196:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6231:14:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6241:4:53",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "6235:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6254:71:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6321:2:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_address_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "6281:39:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6281:43:53"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "6265:15:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6265:60:53"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "6258:3:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6334:16:53",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "6347:3:53"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "6338:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "6366:3:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "6371:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6359:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6359:15:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6359:15:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6383:19:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "6394:3:53"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6399:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6390:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6390:12:53"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "6383:3:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6411:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "6433:6:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6445:1:53",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "6448:2:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "6441:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6441:10:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6429:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6429:23:53"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6454:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6425:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6425:32:53"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "6415:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6485:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6494:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6497:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6487:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6487:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6487:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6472:6:53"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "6480:3:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "6469:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6469:15:53"
                          },
                          "nodeType": "YulIf",
                          "src": "6466:35:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6510:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6525:6:53"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "6533:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6521:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6521:15:53"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "6514:3:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6601:86:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "6622:3:53"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "6640:3:53"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "calldataload",
                                        "nodeType": "YulIdentifier",
                                        "src": "6627:12:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6627:17:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "6615:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6615:30:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6615:30:53"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "6658:19:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "6669:3:53"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "6674:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6665:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6665:12:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "6658:3:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "6556:3:53"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6561:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "6553:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6553:15:53"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "6569:23:53",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "6571:19:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "6582:3:53"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "6587:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "6578:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6578:12:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "6571:3:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "6549:3:53",
                            "statements": []
                          },
                          "src": "6545:142:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6696:14:53",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "6705:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "6696:5:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_uint256_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "6092:6:53",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6100:3:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "6108:5:53",
                        "type": ""
                      }
                    ],
                    "src": "6054:662:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6783:824:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6832:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6841:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6844:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6834:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6834:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6834:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "6811:6:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6819:4:53",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6807:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6807:17:53"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "6826:3:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6803:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6803:27:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "6796:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6796:35:53"
                          },
                          "nodeType": "YulIf",
                          "src": "6793:55:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6857:30:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6880:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6867:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6867:20:53"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6861:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6896:14:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6906:4:53",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "6900:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6919:71:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6986:2:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_array_address_dyn",
                                  "nodeType": "YulIdentifier",
                                  "src": "6946:39:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6946:43:53"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "6930:15:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6930:60:53"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "6923:3:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6999:16:53",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "7012:3:53"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "7003:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "7031:3:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7036:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7024:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7024:15:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7024:15:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7048:19:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "7059:3:53"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "7064:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7055:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7055:12:53"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "7048:3:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7076:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "7098:6:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7110:1:53",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "7113:2:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "7106:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7106:10:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7094:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7094:23:53"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "7119:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7090:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7090:32:53"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "7080:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7150:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7159:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7162:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7152:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7152:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7152:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7137:6:53"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "7145:3:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7134:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7134:15:53"
                          },
                          "nodeType": "YulIf",
                          "src": "7131:35:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7175:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7190:6:53"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "7198:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7186:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7186:15:53"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "7179:3:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7266:312:53",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "7280:36:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "7312:3:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "calldataload",
                                    "nodeType": "YulIdentifier",
                                    "src": "7299:12:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7299:17:53"
                                },
                                "variables": [
                                  {
                                    "name": "innerOffset",
                                    "nodeType": "YulTypedName",
                                    "src": "7284:11:53",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "7380:74:53",
                                  "statements": [
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "7398:11:53",
                                      "value": {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7408:1:53",
                                        "type": "",
                                        "value": "0"
                                      },
                                      "variables": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulTypedName",
                                          "src": "7402:2:53",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "7433:2:53"
                                          },
                                          {
                                            "name": "_3",
                                            "nodeType": "YulIdentifier",
                                            "src": "7437:2:53"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "revert",
                                          "nodeType": "YulIdentifier",
                                          "src": "7426:6:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7426:14:53"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "7426:14:53"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "innerOffset",
                                      "nodeType": "YulIdentifier",
                                      "src": "7335:11:53"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7348:18:53",
                                      "type": "",
                                      "value": "0xffffffffffffffff"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "7332:2:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7332:35:53"
                                },
                                "nodeType": "YulIf",
                                "src": "7329:125:53"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "7474:3:53"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "offset",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7504:6:53"
                                                },
                                                {
                                                  "name": "innerOffset",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7512:11:53"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "7500:3:53"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "7500:24:53"
                                            },
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "7526:2:53"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "7496:3:53"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "7496:33:53"
                                        },
                                        {
                                          "name": "end",
                                          "nodeType": "YulIdentifier",
                                          "src": "7531:3:53"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_bytes",
                                        "nodeType": "YulIdentifier",
                                        "src": "7479:16:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7479:56:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "7467:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7467:69:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7467:69:53"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "7549:19:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "7560:3:53"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "7565:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7556:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7556:12:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "7549:3:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "7221:3:53"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7226:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "7218:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7218:15:53"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "7234:23:53",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "7236:19:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "7247:3:53"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "7252:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7243:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7243:12:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "7236:3:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "7214:3:53",
                            "statements": []
                          },
                          "src": "7210:368:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7587:14:53",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "7596:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "7587:5:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_bytes_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "6757:6:53",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6765:3:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "6773:5:53",
                        "type": ""
                      }
                    ],
                    "src": "6721:886:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7817:692:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7864:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7873:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7876:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7866:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7866:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7866:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7838:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7847:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7834:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7834:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7859:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7830:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7830:33:53"
                          },
                          "nodeType": "YulIf",
                          "src": "7827:53:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7889:37:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7916:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7903:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7903:23:53"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "7893:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7935:28:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7945:18:53",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7939:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7990:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7999:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8002:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7992:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7992:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7992:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7978:6:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7986:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7975:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7975:14:53"
                          },
                          "nodeType": "YulIf",
                          "src": "7972:34:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8015:71:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8058:9:53"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "8069:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8054:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8054:22:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8078:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "8025:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8025:61:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "8015:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8095:48:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8128:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8139:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8124:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8124:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8111:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8111:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "8099:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8172:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8181:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8184:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8174:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8174:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8174:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "8158:8:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8168:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8155:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8155:16:53"
                          },
                          "nodeType": "YulIf",
                          "src": "8152:36:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8197:73:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8240:9:53"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8251:8:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8236:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8236:24:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8262:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "8207:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8207:63:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "8197:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8279:48:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8312:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8323:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8308:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8308:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8295:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8295:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "8283:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8356:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8365:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8368:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8358:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8358:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8358:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "8342:8:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8352:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8339:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8339:16:53"
                          },
                          "nodeType": "YulIf",
                          "src": "8336:36:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8381:71:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8422:9:53"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8433:8:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8418:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8418:24:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8444:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_bytes_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "8391:26:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8391:61:53"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "8381:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8461:42:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8488:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8499:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8484:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8484:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8471:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8471:32:53"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "8461:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7759:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7770:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7782:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7790:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7798:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7806:6:53",
                        "type": ""
                      }
                    ],
                    "src": "7612:897:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8615:76:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8625:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8637:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8648:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8633:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8633:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8625:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8667:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8678:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8660:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8660:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8660:25:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8584:9:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8595:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8606:4:53",
                        "type": ""
                      }
                    ],
                    "src": "8514:177:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8830:324:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8877:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8886:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8889:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8879:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8879:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8879:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8851:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8860:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8847:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8847:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8872:3:53",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8843:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8843:33:53"
                          },
                          "nodeType": "YulIf",
                          "src": "8840:53:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8902:33:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8925:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8912:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8912:23:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "8902:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8944:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8975:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8986:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8971:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8971:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "8954:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8954:36:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "8944:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8999:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9030:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9041:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9026:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9026:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "9009:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9009:36:53"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "8999:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9054:42:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9081:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9092:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9077:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9077:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9064:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9064:32:53"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "9054:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9105:43:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9132:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9143:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9128:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9128:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9115:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9115:33:53"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "9105:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint8t_uint8t_bytes32t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8764:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "8775:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8787:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8795:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8803:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "8811:6:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "8819:6:53",
                        "type": ""
                      }
                    ],
                    "src": "8696:458:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9191:95:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9208:1:53",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9215:3:53",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9220:10:53",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "9211:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9211:20:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9201:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9201:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9201:31:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9248:1:53",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9251:4:53",
                                "type": "",
                                "value": "0x21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9241:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9241:15:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9241:15:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9272:1:53",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9275:4:53",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "9265:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9265:15:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9265:15:53"
                        }
                      ]
                    },
                    "name": "panic_error_0x21",
                    "nodeType": "YulFunctionDefinition",
                    "src": "9159:127:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9408:229:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9418:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9430:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9441:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9426:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9426:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9418:4:53"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9486:111:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9507:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "9514:3:53",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "9519:10:53",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "9510:3:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9510:20:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "9500:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9500:31:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9500:31:53"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9551:1:53",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9554:4:53",
                                      "type": "",
                                      "value": "0x21"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "9544:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9544:15:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9544:15:53"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9579:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9582:4:53",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9572:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9572:15:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9572:15:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "9466:6:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9474:1:53",
                                    "type": "",
                                    "value": "8"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "9463:2:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9463:13:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "9456:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9456:21:53"
                          },
                          "nodeType": "YulIf",
                          "src": "9453:144:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9613:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9624:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9606:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9606:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9606:25:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_enum$_ProposalState_$1870__to_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9377:9:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9388:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9399:4:53",
                        "type": ""
                      }
                    ],
                    "src": "9291:346:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9729:228:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9775:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9784:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9787:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9777:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9777:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9777:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9750:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9759:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9746:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9746:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9771:2:53",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9742:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9742:32:53"
                          },
                          "nodeType": "YulIf",
                          "src": "9739:52:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9800:33:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9823:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9810:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9810:23:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9800:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9842:45:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9872:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9883:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9868:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9868:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9855:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9855:32:53"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "9846:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9921:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "9896:24:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9896:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9896:31:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9936:15:53",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9946:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "9936:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9687:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9698:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9710:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9718:6:53",
                        "type": ""
                      }
                    ],
                    "src": "9642:315:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10119:162:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10129:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10141:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10152:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10137:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10137:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10129:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10171:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "10182:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10164:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10164:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10164:25:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10209:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10220:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10205:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10205:18:53"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "10225:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10198:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10198:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10198:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10252:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10263:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10248:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10248:18:53"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "10268:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10241:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10241:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10241:34:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10072:9:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "10083:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10091:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10099:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10110:4:53",
                        "type": ""
                      }
                    ],
                    "src": "9962:319:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10371:165:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10417:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10426:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10429:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10419:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10419:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10419:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10392:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10401:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10388:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10388:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10413:2:53",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10384:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10384:32:53"
                          },
                          "nodeType": "YulIf",
                          "src": "10381:52:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10442:33:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10465:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10452:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10452:23:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "10442:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10484:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10515:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10526:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10511:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10511:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "10494:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10494:36:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "10484:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10329:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10340:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10352:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10360:6:53",
                        "type": ""
                      }
                    ],
                    "src": "10286:250:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10689:621:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10736:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10745:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10748:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10738:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10738:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10738:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10710:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10719:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10706:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10706:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10731:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10702:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10702:33:53"
                          },
                          "nodeType": "YulIf",
                          "src": "10699:53:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10761:33:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10784:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10771:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10771:23:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "10761:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10803:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10834:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10845:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10830:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10830:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "10813:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10813:36:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "10803:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10858:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10889:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10900:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10885:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10885:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10872:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10872:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "10862:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10913:28:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10923:18:53",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10917:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10968:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10977:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10980:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10970:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10970:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10970:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10956:6:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10964:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10953:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10953:14:53"
                          },
                          "nodeType": "YulIf",
                          "src": "10950:34:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10993:85:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11050:9:53"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "11061:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11046:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11046:22:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11070:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "11019:26:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11019:59:53"
                          },
                          "variables": [
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "10997:8:53",
                              "type": ""
                            },
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "11007:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11087:18:53",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "11097:8:53"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "11087:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11114:18:53",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "11124:8:53"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "11114:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11141:48:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11174:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11185:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11170:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11170:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11157:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11157:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "11145:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11218:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11227:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11230:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11220:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11220:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11220:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "11204:8:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11214:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11201:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11201:16:53"
                          },
                          "nodeType": "YulIf",
                          "src": "11198:36:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11243:61:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11274:9:53"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "11285:8:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11270:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11270:24:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11296:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "11253:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11253:51:53"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "11243:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptrt_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10623:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10634:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10646:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10654:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "10662:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "10670:6:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "10678:6:53",
                        "type": ""
                      }
                    ],
                    "src": "10541:769:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11437:427:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11483:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11492:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11495:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11485:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11485:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11485:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11458:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11467:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11454:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11454:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11479:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "11450:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11450:32:53"
                          },
                          "nodeType": "YulIf",
                          "src": "11447:52:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11508:33:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11531:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11518:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11518:23:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "11508:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11550:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11581:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11592:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11577:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11577:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint8",
                              "nodeType": "YulIdentifier",
                              "src": "11560:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11560:36:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "11550:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11605:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11636:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11647:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11632:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11632:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11619:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11619:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "11609:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11694:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11703:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11706:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11696:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11696:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11696:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "11666:6:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11674:18:53",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11663:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11663:30:53"
                          },
                          "nodeType": "YulIf",
                          "src": "11660:50:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11719:85:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11776:9:53"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "11787:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11772:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11772:22:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "11796:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "11745:26:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11745:59:53"
                          },
                          "variables": [
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "11723:8:53",
                              "type": ""
                            },
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "11733:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11813:18:53",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "11823:8:53"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "11813:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11840:18:53",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "11850:8:53"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "11840:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11379:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "11390:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11402:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11410:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "11418:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "11426:6:53",
                        "type": ""
                      }
                    ],
                    "src": "11315:549:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12084:942:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12131:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12140:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12143:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12133:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12133:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12133:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12105:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12114:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12101:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12101:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12126:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "12097:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12097:33:53"
                          },
                          "nodeType": "YulIf",
                          "src": "12094:53:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12156:37:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12183:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12170:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12170:23:53"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "12160:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12202:28:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12212:18:53",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "12206:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12257:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12266:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12269:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12259:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12259:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12259:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "12245:6:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12253:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12242:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12242:14:53"
                          },
                          "nodeType": "YulIf",
                          "src": "12239:34:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12282:71:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12325:9:53"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "12336:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12321:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12321:22:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "12345:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "12292:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12292:61:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "12282:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12362:48:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12395:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12406:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12391:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12391:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12378:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12378:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "12366:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12439:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12448:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12451:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12441:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12441:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12441:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "12425:8:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12435:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12422:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12422:16:53"
                          },
                          "nodeType": "YulIf",
                          "src": "12419:36:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12464:73:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12507:9:53"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12518:8:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12503:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12503:24:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "12529:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "12474:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12474:63:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "12464:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12546:48:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12579:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12590:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12575:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12575:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12562:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12562:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "12550:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12623:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12632:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12635:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12625:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12625:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12625:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "12609:8:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12619:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12606:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12606:16:53"
                          },
                          "nodeType": "YulIf",
                          "src": "12603:36:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12648:71:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12689:9:53"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "12700:8:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12685:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12685:24:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "12711:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_bytes_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "12658:26:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12658:61:53"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "12648:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12728:48:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12761:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12772:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12757:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12757:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "12744:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12744:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset_3",
                              "nodeType": "YulTypedName",
                              "src": "12732:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12805:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12814:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12817:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12807:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12807:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12807:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_3",
                                "nodeType": "YulIdentifier",
                                "src": "12791:8:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12801:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12788:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12788:16:53"
                          },
                          "nodeType": "YulIf",
                          "src": "12785:36:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12830:34:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12844:9:53"
                              },
                              {
                                "name": "offset_3",
                                "nodeType": "YulIdentifier",
                                "src": "12855:8:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12840:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12840:24:53"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "12834:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12912:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12921:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "12924:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "12914:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12914:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12914:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "12891:2:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12895:4:53",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12887:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12887:13:53"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12902:7:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "12883:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12883:27:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "12876:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12876:35:53"
                          },
                          "nodeType": "YulIf",
                          "src": "12873:55:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12937:83:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "12985:2:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12989:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12981:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12981:11:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "13007:2:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "12994:12:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12994:16:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "13012:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "12947:33:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12947:73:53"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "12937:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12026:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "12037:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12049:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "12057:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "12065:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "12073:6:53",
                        "type": ""
                      }
                    ],
                    "src": "11869:1157:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13144:410:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13190:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13199:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13202:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13192:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13192:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13192:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "13165:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13174:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13161:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13161:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13186:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "13157:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13157:32:53"
                          },
                          "nodeType": "YulIf",
                          "src": "13154:52:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13215:36:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13241:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "13228:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13228:23:53"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "13219:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "13285:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "13260:24:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13260:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13260:31:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13300:15:53",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "13310:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "13300:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13324:42:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13351:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13362:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13347:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13347:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "13334:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13334:32:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "13324:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13375:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13406:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13417:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13402:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13402:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "13389:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13389:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "13379:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13464:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13473:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13476:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13466:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13466:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13466:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "13436:6:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13444:18:53",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "13433:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13433:30:53"
                          },
                          "nodeType": "YulIf",
                          "src": "13430:50:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13489:59:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13520:9:53"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "13531:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13516:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13516:22:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "13540:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "13499:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13499:49:53"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "13489:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13094:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "13105:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13117:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "13125:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "13133:6:53",
                        "type": ""
                      }
                    ],
                    "src": "13031:523:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13656:177:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13702:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13711:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13714:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13704:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13704:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13704:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "13677:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13686:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13673:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13673:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13698:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "13669:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13669:32:53"
                          },
                          "nodeType": "YulIf",
                          "src": "13666:52:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "13727:36:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13753:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "13740:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13740:23:53"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "13731:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "13797:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "13772:24:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13772:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13772:31:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13812:15:53",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "13822:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "13812:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_TimelockController_$3066",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13622:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "13633:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13645:6:53",
                        "type": ""
                      }
                    ],
                    "src": "13559:274:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14035:874:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14082:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14091:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14094:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14084:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14084:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14084:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "14056:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14065:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14052:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14052:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14077:3:53",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "14048:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14048:33:53"
                          },
                          "nodeType": "YulIf",
                          "src": "14045:53:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14107:36:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14133:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "14120:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14120:23:53"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "14111:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14177:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "14152:24:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14152:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14152:31:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14192:15:53",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "14202:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "14192:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14216:47:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14248:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14259:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14244:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14244:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "14231:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14231:32:53"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "14220:7:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "14297:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "14272:24:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14272:33:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14272:33:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14314:17:53",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "14324:7:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "14314:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14340:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14371:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14382:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14367:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14367:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "14354:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14354:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "14344:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14395:28:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14405:18:53",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "14399:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14450:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14459:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14462:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14452:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14452:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14452:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "14438:6:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "14446:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14435:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14435:14:53"
                          },
                          "nodeType": "YulIf",
                          "src": "14432:34:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14475:71:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14518:9:53"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "14529:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14514:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14514:22:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "14538:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "14485:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14485:61:53"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "14475:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14555:48:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14588:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14599:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14584:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14584:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "14571:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14571:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "14559:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14632:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14641:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14644:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14634:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14634:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14634:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "14618:8:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "14628:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14615:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14615:16:53"
                          },
                          "nodeType": "YulIf",
                          "src": "14612:36:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14657:73:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14700:9:53"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14711:8:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14696:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14696:24:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "14722:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "14667:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14667:63:53"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "14657:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14739:49:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14772:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14783:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14768:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14768:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "14755:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14755:33:53"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "14743:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14817:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14826:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14829:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14819:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14819:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14819:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "14803:8:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "14813:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14800:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14800:16:53"
                          },
                          "nodeType": "YulIf",
                          "src": "14797:36:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14842:61:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14873:9:53"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "14884:8:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14869:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14869:24:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "14895:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "14852:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14852:51:53"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "14842:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13969:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "13980:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13992:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "14000:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "14008:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "14016:6:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "14024:6:53",
                        "type": ""
                      }
                    ],
                    "src": "13838:1071:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15037:490:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15083:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15092:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15095:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15085:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15085:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15085:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "15058:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15067:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15054:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15054:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15079:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "15050:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15050:32:53"
                          },
                          "nodeType": "YulIf",
                          "src": "15047:52:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15108:36:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15134:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "15121:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15121:23:53"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "15112:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "15178:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "15153:24:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15153:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15153:31:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15193:15:53",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "15203:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "15193:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15217:42:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15244:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15255:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15240:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15240:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "15227:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15227:32:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "15217:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15268:46:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15299:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15310:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15295:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15295:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "15282:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15282:32:53"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "15272:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15357:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15366:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15369:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15359:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15359:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15359:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "15329:6:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15337:18:53",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "15326:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15326:30:53"
                          },
                          "nodeType": "YulIf",
                          "src": "15323:50:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15382:85:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15439:9:53"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "15450:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15435:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15435:22:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "15459:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_string_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "15408:26:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15408:59:53"
                          },
                          "variables": [
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "15386:8:53",
                              "type": ""
                            },
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "15396:8:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15476:18:53",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "15486:8:53"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "15476:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15503:18:53",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "15513:8:53"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "15503:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14979:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "14990:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15002:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "15010:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "15018:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "15026:6:53",
                        "type": ""
                      }
                    ],
                    "src": "14914:613:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15633:102:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "15643:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15655:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15666:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15651:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15651:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15643:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15685:9:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "15700:6:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "15716:3:53",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "15721:1:53",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "15712:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15712:11:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15725:1:53",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "15708:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15708:19:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "15696:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15696:32:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15678:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15678:51:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15678:51:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15602:9:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15613:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15624:4:53",
                        "type": ""
                      }
                    ],
                    "src": "15532:203:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15827:228:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15873:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15882:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15885:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "15875:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15875:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15875:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "15848:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15857:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15844:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15844:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15869:2:53",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "15840:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15840:32:53"
                          },
                          "nodeType": "YulIf",
                          "src": "15837:52:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15898:36:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15924:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "15911:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15911:23:53"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "15902:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "15968:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "15943:24:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15943:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15943:31:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15983:15:53",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "15993:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "15983:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16007:42:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16034:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16045:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16030:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16030:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "16017:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16017:32:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "16007:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15785:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "15796:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15808:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "15816:6:53",
                        "type": ""
                      }
                    ],
                    "src": "15740:315:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16207:587:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16254:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16263:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16266:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "16256:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16256:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16256:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "16228:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16237:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "16224:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16224:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16249:3:53",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "16220:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16220:33:53"
                          },
                          "nodeType": "YulIf",
                          "src": "16217:53:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16279:36:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16305:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "16292:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16292:23:53"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "16283:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "16349:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "16324:24:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16324:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16324:31:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16364:15:53",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "16374:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "16364:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16388:47:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16420:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16431:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16416:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16416:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "16403:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16403:32:53"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "16392:7:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "16469:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "16444:24:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16444:33:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16444:33:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16486:17:53",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "16496:7:53"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "16486:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16512:42:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16539:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16550:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16535:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16535:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "16522:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16522:32:53"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "16512:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16563:42:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16590:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16601:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16586:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16586:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "16573:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16573:32:53"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "16563:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "16614:47:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16645:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16656:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16641:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16641:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "16628:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16628:33:53"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "16618:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16704:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16713:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16716:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "16706:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16706:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16706:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "16676:6:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16684:18:53",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "16673:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16673:30:53"
                          },
                          "nodeType": "YulIf",
                          "src": "16670:50:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16729:59:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16760:9:53"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "16771:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16756:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16756:22:53"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "16780:7:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "16739:16:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16739:49:53"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "16729:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16141:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "16152:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16164:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "16172:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "16180:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "16188:6:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "16196:6:53",
                        "type": ""
                      }
                    ],
                    "src": "16060:734:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16915:102:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16925:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16937:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16948:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16933:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16933:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16925:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16967:9:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "16982:6:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "16998:3:53",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "17003:1:53",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "16994:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "16994:11:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17007:1:53",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "16990:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16990:19:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "16978:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16978:32:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16960:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16960:51:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16960:51:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IVotes_$4211__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16884:9:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16895:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16906:4:53",
                        "type": ""
                      }
                    ],
                    "src": "16799:218:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17169:124:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17192:3:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "17197:6:53"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "17205:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "17179:12:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17179:33:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17179:33:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17221:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17235:3:53"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "17240:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17231:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17231:16:53"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "17225:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "17263:2:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17267:1:53",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17256:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17256:13:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17256:13:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17278:9:53",
                          "value": {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "17285:2:53"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "17278:3:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "17137:3:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "17142:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17150:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "17161:3:53",
                        "type": ""
                      }
                    ],
                    "src": "17022:271:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17507:261:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17517:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17529:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17540:3:53",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17525:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17525:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17517:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17560:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "17571:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17553:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17553:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17553:25:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17598:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17609:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17594:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17594:18:53"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "17614:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17587:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17587:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17587:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17641:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17652:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17637:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17637:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "17661:6:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17669:4:53",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "17657:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17657:17:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17630:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17630:45:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17630:45:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17695:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17706:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17691:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17691:18:53"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "17711:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17684:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17684:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17684:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17738:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17749:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17734:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17734:19:53"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "17755:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17727:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17727:35:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17727:35:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17444:9:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "17455:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "17463:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "17471:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "17479:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17487:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17498:4:53",
                        "type": ""
                      }
                    ],
                    "src": "17298:470:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17947:174:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17964:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17975:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17957:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17957:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17957:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17998:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18009:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17994:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17994:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18014:2:53",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17987:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17987:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17987:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18037:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18048:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18033:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18033:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f723a206f6e6c79476f7665726e616e6365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18053:26:53",
                                "type": "",
                                "value": "Governor: onlyGovernance"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18026:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18026:54:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18026:54:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18089:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18101:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18112:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18097:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18097:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18089:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_01397b9b23826f2770c44682f6f60114915147b09511a75fee3231adbc22847f__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17924:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17938:4:53",
                        "type": ""
                      }
                    ],
                    "src": "17773:348:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18181:325:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18191:22:53",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18205:1:53",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "18208:4:53"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "18201:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18201:12:53"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "18191:6:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18222:38:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "18252:4:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18258:1:53",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "18248:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18248:12:53"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "18226:18:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18299:31:53",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "18301:27:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "18315:6:53"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18323:4:53",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "18311:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18311:17:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "18301:6:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "18279:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "18272:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18272:26:53"
                          },
                          "nodeType": "YulIf",
                          "src": "18269:61:53"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18389:111:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18410:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "18417:3:53",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "18422:10:53",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "18413:3:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18413:20:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "18403:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18403:31:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18403:31:53"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18454:1:53",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18457:4:53",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "18447:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18447:15:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18447:15:53"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18482:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18485:4:53",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18475:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18475:15:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18475:15:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "18345:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "18368:6:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18376:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "18365:2:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18365:14:53"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "18342:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18342:38:53"
                          },
                          "nodeType": "YulIf",
                          "src": "18339:161:53"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "18161:4:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "18170:6:53",
                        "type": ""
                      }
                    ],
                    "src": "18126:380:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18685:223:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18702:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18713:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18695:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18695:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18695:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18736:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18747:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18732:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18732:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18752:2:53",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18725:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18725:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18725:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18775:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18786:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18771:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18771:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f723a2070726f706f73616c206e6f7420737563636573736675",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18791:34:53",
                                "type": "",
                                "value": "Governor: proposal not successfu"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18764:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18764:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18764:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18846:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18857:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18842:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18842:18:53"
                              },
                              {
                                "hexValue": "6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18862:3:53",
                                "type": "",
                                "value": "l"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18835:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18835:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18835:31:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18875:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18887:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18898:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18883:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18883:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18875:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a608627370ddd238e48feab42026732822e64969fe5a8155723eaa5f397576d9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18662:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18676:4:53",
                        "type": ""
                      }
                    ],
                    "src": "18511:397:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18994:103:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19040:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19049:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19052:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "19042:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19042:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19042:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "19015:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19024:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "19011:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19011:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19036:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "19007:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19007:32:53"
                          },
                          "nodeType": "YulIf",
                          "src": "19004:52:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19065:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19081:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19075:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19075:16:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "19065:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18960:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "18971:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18983:6:53",
                        "type": ""
                      }
                    ],
                    "src": "18913:184:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19163:400:53",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19173:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "19193:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19187:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19187:12:53"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "19177:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19215:3:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "19220:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19208:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19208:19:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19208:19:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19236:14:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19246:4:53",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "19240:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19259:19:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19270:3:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "19275:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19266:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19266:12:53"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "19259:3:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19287:28:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "19305:5:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "19312:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19301:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19301:14:53"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "19291:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19324:10:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19333:1:53",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "19328:1:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19392:146:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "19413:3:53"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "srcPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "19428:6:53"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "19422:5:53"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "19422:13:53"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "19445:3:53",
                                                  "type": "",
                                                  "value": "160"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "19450:1:53",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "19441:3:53"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "19441:11:53"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "19454:1:53",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "19437:3:53"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "19437:19:53"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "19418:3:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "19418:39:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "19406:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19406:52:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19406:52:53"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "19471:19:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "19482:3:53"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "19487:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "19478:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19478:12:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "19471:3:53"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "19503:25:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "19517:6:53"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "19525:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "19513:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19513:15:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "19503:6:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "19354:1:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "19357:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "19351:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19351:13:53"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "19365:18:53",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "19367:14:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "19376:1:53"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19379:1:53",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "19372:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19372:9:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "19367:1:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "19347:3:53",
                            "statements": []
                          },
                          "src": "19343:195:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19547:10:53",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "19554:3:53"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "19547:3:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_array_address_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "19140:5:53",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "19147:3:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "19155:3:53",
                        "type": ""
                      }
                    ],
                    "src": "19102:461:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19629:374:53",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19639:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "19659:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19653:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19653:12:53"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "19643:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19681:3:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "19686:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19674:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19674:19:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19674:19:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19702:14:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19712:4:53",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "19706:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19725:19:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19736:3:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "19741:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19732:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19732:12:53"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "19725:3:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19753:28:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "19771:5:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "19778:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19767:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19767:14:53"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "19757:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19790:10:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19799:1:53",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "19794:1:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19858:120:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "19879:3:53"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "19890:6:53"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "19884:5:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "19884:13:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "19872:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19872:26:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19872:26:53"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "19911:19:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "19922:3:53"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "19927:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "19918:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19918:12:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "19911:3:53"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "19943:25:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "19957:6:53"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "19965:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "19953:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19953:15:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "19943:6:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "19820:1:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "19823:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "19817:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19817:13:53"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "19831:18:53",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "19833:14:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "19842:1:53"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "19845:1:53",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "19838:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19838:9:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "19833:1:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "19813:3:53",
                            "statements": []
                          },
                          "src": "19809:169:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19987:10:53",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "19994:3:53"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "19987:3:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_array_uint256_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "19606:5:53",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "19613:3:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "19621:3:53",
                        "type": ""
                      }
                    ],
                    "src": "19568:435:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20067:556:53",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20077:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "20097:5:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20091:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20091:12:53"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "20081:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "20119:3:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "20124:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20112:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20112:19:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20112:19:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20140:14:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20150:4:53",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "20144:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20163:31:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "20186:3:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "20191:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20182:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20182:12:53"
                          },
                          "variables": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulTypedName",
                              "src": "20167:11:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20203:24:53",
                          "value": {
                            "name": "updated_pos",
                            "nodeType": "YulIdentifier",
                            "src": "20216:11:53"
                          },
                          "variables": [
                            {
                              "name": "pos_1",
                              "nodeType": "YulTypedName",
                              "src": "20207:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20236:18:53",
                          "value": {
                            "name": "updated_pos",
                            "nodeType": "YulIdentifier",
                            "src": "20243:11:53"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "20236:3:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20263:38:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos_1",
                                "nodeType": "YulIdentifier",
                                "src": "20279:5:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20290:1:53",
                                    "type": "",
                                    "value": "5"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "20293:6:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "20286:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20286:14:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20275:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20275:26:53"
                          },
                          "variables": [
                            {
                              "name": "tail",
                              "nodeType": "YulTypedName",
                              "src": "20267:4:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20310:28:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "20328:5:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "20335:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20324:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20324:14:53"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "20314:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20347:10:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20356:1:53",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "20351:1:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20415:182:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "20436:3:53"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "tail",
                                          "nodeType": "YulIdentifier",
                                          "src": "20445:4:53"
                                        },
                                        {
                                          "name": "pos_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "20451:5:53"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "20441:3:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "20441:16:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "20429:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20429:29:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20429:29:53"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "20471:46:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "20503:6:53"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "20497:5:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "20497:13:53"
                                    },
                                    {
                                      "name": "tail",
                                      "nodeType": "YulIdentifier",
                                      "src": "20512:4:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_string",
                                    "nodeType": "YulIdentifier",
                                    "src": "20479:17:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20479:38:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "20471:4:53"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "20530:25:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "20544:6:53"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "20552:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "20540:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20540:15:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "20530:6:53"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "20568:19:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "20579:3:53"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "20584:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "20575:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20575:12:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "20568:3:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "20377:1:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "20380:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "20374:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20374:13:53"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "20388:18:53",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "20390:14:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "20399:1:53"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20402:1:53",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "20395:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20395:9:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "20390:1:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "20370:3:53",
                            "statements": []
                          },
                          "src": "20366:231:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20606:11:53",
                          "value": {
                            "name": "tail",
                            "nodeType": "YulIdentifier",
                            "src": "20613:4:53"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "20606:3:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_array_bytes_dyn",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "20044:5:53",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "20051:3:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "20059:3:53",
                        "type": ""
                      }
                    ],
                    "src": "20008:615:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21017:449:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21034:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21045:3:53",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21027:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21027:22:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21027:22:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21058:71:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "21101:6:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21113:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21124:3:53",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21109:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21109:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "21072:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21072:57:53"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "21062:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21149:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21160:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21145:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21145:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21169:6:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21177:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "21165:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21165:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21138:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21138:50:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21138:50:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21197:58:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "21240:6:53"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "21248:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "21211:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21211:44:53"
                          },
                          "variables": [
                            {
                              "name": "tail_2",
                              "nodeType": "YulTypedName",
                              "src": "21201:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21275:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21286:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21271:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21271:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "21295:6:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21303:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "21291:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21291:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21264:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21264:50:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21264:50:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21323:50:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "21358:6:53"
                              },
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "21366:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_bytes_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "21331:26:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21331:42:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21323:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21393:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21404:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21389:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21389:18:53"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "21409:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21382:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21382:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21382:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21436:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21447:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21432:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21432:19:53"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "21453:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21425:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21425:35:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21425:35:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_rational_0_by_1_t_bytes32__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20954:9:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "20965:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "20973:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "20981:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20989:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20997:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21008:4:53",
                        "type": ""
                      }
                    ],
                    "src": "20628:838:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21552:103:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21598:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21607:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21610:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "21600:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21600:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21600:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "21573:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21582:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "21569:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21569:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21594:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "21565:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21565:32:53"
                          },
                          "nodeType": "YulIf",
                          "src": "21562:52:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21623:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21639:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "21633:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21633:16:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "21623:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21518:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "21529:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21541:6:53",
                        "type": ""
                      }
                    ],
                    "src": "21471:184:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22077:493:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22094:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22105:3:53",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22087:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22087:22:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22087:22:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22118:71:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22161:6:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22173:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22184:3:53",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22169:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22169:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "22132:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22132:57:53"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "22122:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22209:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22220:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22205:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22205:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22229:6:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22237:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22225:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22225:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22198:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22198:50:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22198:50:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22257:58:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "22300:6:53"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "22308:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "22271:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22271:44:53"
                          },
                          "variables": [
                            {
                              "name": "tail_2",
                              "nodeType": "YulTypedName",
                              "src": "22261:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22335:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22346:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22331:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22331:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "22355:6:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22363:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22351:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22351:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22324:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22324:50:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22324:50:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22383:50:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "22418:6:53"
                              },
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "22426:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_bytes_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "22391:26:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22391:42:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22383:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22453:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22464:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22449:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22449:18:53"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "22469:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22442:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22442:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22442:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22496:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22507:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22492:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22492:19:53"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "22513:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22485:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22485:35:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22485:35:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22540:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22551:3:53",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22536:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22536:19:53"
                              },
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "22557:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22529:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22529:35:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22529:35:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_rational_0_by_1_t_bytes32_t_uint256__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32_t_bytes32_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22006:9:53",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "22017:6:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "22025:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "22033:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "22041:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22049:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22057:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22068:4:53",
                        "type": ""
                      }
                    ],
                    "src": "21660:910:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22607:95:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22624:1:53",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22631:3:53",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22636:10:53",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "22627:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22627:20:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22617:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22617:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22617:31:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22664:1:53",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22667:4:53",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22657:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22657:15:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22657:15:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22688:1:53",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22691:4:53",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "22681:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22681:15:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22681:15:53"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "22575:127:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22755:80:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22782:22:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "22784:16:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22784:18:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22784:18:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "22771:1:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "22778:1:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "22774:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22774:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "22768:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22768:13:53"
                          },
                          "nodeType": "YulIf",
                          "src": "22765:39:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22813:16:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "22824:1:53"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "22827:1:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22820:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22820:9:53"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "22813:3:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "22738:1:53",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "22741:1:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "22747:3:53",
                        "type": ""
                      }
                    ],
                    "src": "22707:128:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22969:119:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22979:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22991:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23002:2:53",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22987:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22987:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22979:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23021:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "23032:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23014:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23014:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23014:25:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23059:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23070:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23055:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23055:18:53"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "23075:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23048:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23048:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23048:34:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22930:9:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22941:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22949:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22960:4:53",
                        "type": ""
                      }
                    ],
                    "src": "22840:248:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23246:173:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "23256:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23268:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23279:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23264:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23264:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23256:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23298:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "23309:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23291:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23291:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23291:25:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23336:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23347:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23332:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23332:18:53"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "23352:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23325:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23325:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23325:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23379:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23390:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23375:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23375:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "23399:6:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23407:4:53",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "23395:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23395:17:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23368:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23368:45:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23368:45:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_uint256_t_uint8__to_t_bytes32_t_uint256_t_uint8__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23199:9:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "23210:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "23218:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "23226:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23237:4:53",
                        "type": ""
                      }
                    ],
                    "src": "23093:326:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23473:76:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23495:22:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "23497:16:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23497:18:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23497:18:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "23489:1:53"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "23492:1:53"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "23486:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23486:8:53"
                          },
                          "nodeType": "YulIf",
                          "src": "23483:34:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23526:17:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "23538:1:53"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "23541:1:53"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "23534:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23534:9:53"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "23526:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "23455:1:53",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "23458:1:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "23464:4:53",
                        "type": ""
                      }
                    ],
                    "src": "23424:125:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23586:95:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23603:1:53",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23610:3:53",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23615:10:53",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "23606:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23606:20:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23596:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23596:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23596:31:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23643:1:53",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23646:4:53",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23636:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23636:15:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23636:15:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23667:1:53",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23670:4:53",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "23660:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23660:15:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23660:15:53"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "23554:127:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24039:405:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24056:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24067:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24049:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24049:22:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24049:22:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "24080:71:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "24123:6:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24135:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24146:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24131:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24131:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "24094:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24094:57:53"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "24084:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24171:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24182:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24167:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24167:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "24191:6:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24199:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "24187:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24187:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24160:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24160:50:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24160:50:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "24219:58:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "24262:6:53"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "24270:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "24233:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24233:44:53"
                          },
                          "variables": [
                            {
                              "name": "tail_2",
                              "nodeType": "YulTypedName",
                              "src": "24223:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24297:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24308:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24293:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24293:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "24317:6:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24325:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "24313:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24313:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24286:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24286:50:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24286:50:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24345:50:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "24380:6:53"
                              },
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "24388:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_bytes_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "24353:26:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24353:42:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24345:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24415:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24426:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24411:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24411:18:53"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "24431:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24404:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24404:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24404:34:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23984:9:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "23995:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "24003:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "24011:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "24019:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24030:4:53",
                        "type": ""
                      }
                    ],
                    "src": "23686:758:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24623:229:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24640:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24651:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24633:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24633:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24633:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24674:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24685:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24670:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24670:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24690:2:53",
                                "type": "",
                                "value": "39"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24663:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24663:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24663:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24713:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24724:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24709:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24709:18:53"
                              },
                              {
                                "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2032",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24729:34:53",
                                "type": "",
                                "value": "SafeCast: value doesn't fit in 2"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24702:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24702:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24702:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24784:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24795:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24780:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24780:18:53"
                              },
                              {
                                "hexValue": "32342062697473",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24800:9:53",
                                "type": "",
                                "value": "24 bits"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24773:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24773:37:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24773:37:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24819:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24831:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24842:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24827:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24827:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24819:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24600:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24614:4:53",
                        "type": ""
                      }
                    ],
                    "src": "24449:403:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25031:228:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25048:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25059:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25041:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25041:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25041:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25082:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25093:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25078:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25078:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25098:2:53",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25071:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25071:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25071:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25121:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25132:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25117:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25117:18:53"
                              },
                              {
                                "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2033",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25137:34:53",
                                "type": "",
                                "value": "SafeCast: value doesn't fit in 3"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25110:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25110:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25110:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25192:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25203:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25188:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25188:18:53"
                              },
                              {
                                "hexValue": "322062697473",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25208:8:53",
                                "type": "",
                                "value": "2 bits"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25181:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25181:36:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25181:36:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25226:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25238:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25249:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25234:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25234:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25226:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25008:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25022:4:53",
                        "type": ""
                      }
                    ],
                    "src": "24857:402:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25438:225:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25455:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25466:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25448:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25448:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25448:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25489:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25500:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25485:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25485:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25505:2:53",
                                "type": "",
                                "value": "35"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25478:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25478:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25478:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25528:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25539:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25524:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25524:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f723a20766f7465206e6f742063757272656e746c7920616374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25544:34:53",
                                "type": "",
                                "value": "Governor: vote not currently act"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25517:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25517:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25517:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25599:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25610:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25595:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25595:18:53"
                              },
                              {
                                "hexValue": "697665",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "25615:5:53",
                                "type": "",
                                "value": "ive"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25588:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25588:33:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25588:33:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25630:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25642:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25653:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25638:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25638:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25630:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5b1e239298a1362f9b5245bd4e9393de28380a12326aa31532e03fe3f1061d80__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25415:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25429:4:53",
                        "type": ""
                      }
                    ],
                    "src": "25264:399:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25869:241:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25886:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "25897:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25879:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25879:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25879:25:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25924:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25935:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25920:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25920:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "25944:6:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25952:4:53",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "25940:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25940:17:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25913:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25913:45:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25913:45:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25978:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25989:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25974:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25974:18:53"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "25994:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25967:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25967:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25967:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26021:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26032:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26017:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26017:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26037:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26010:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26010:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26010:31:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26050:54:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "26076:6:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26088:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26099:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26084:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26084:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "26058:17:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26058:46:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26050:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint8_t_uint256_t_string_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25814:9:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "25825:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "25833:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "25841:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "25849:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25860:4:53",
                        "type": ""
                      }
                    ],
                    "src": "25668:442:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26362:357:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26379:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "26390:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26372:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26372:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26372:25:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26417:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26428:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26413:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26413:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "26437:6:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26445:4:53",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "26433:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26433:17:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26406:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26406:45:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26406:45:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26471:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26482:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26467:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26467:18:53"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "26487:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26460:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26460:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26460:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26514:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26525:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26510:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26510:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26530:3:53",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26503:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26503:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26503:31:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26543:60:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "26575:6:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26587:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26598:3:53",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26583:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26583:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "26557:17:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26557:46:53"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "26547:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26623:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26634:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26619:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26619:19:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "26644:6:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26652:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "26640:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26640:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26612:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26612:51:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26612:51:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26672:41:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "26698:6:53"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "26706:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "26680:17:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26680:33:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "26672:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint8_t_uint256_t_string_memory_ptr_t_bytes_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_string_memory_ptr_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26299:9:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "26310:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "26318:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "26326:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "26334:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "26342:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26353:4:53",
                        "type": ""
                      }
                    ],
                    "src": "26115:604:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26898:297:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "26915:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26926:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26908:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26908:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26908:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26949:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26960:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26945:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26945:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26965:2:53",
                                "type": "",
                                "value": "67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26938:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26938:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26938:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26988:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26999:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26984:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26984:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27004:34:53",
                                "type": "",
                                "value": "GovernorVotesQuorumFraction: quo"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26977:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26977:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26977:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27059:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27070:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27055:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27055:18:53"
                              },
                              {
                                "hexValue": "72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e61",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27075:34:53",
                                "type": "",
                                "value": "rumNumerator over quorumDenomina"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27048:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27048:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27048:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27130:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27141:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27126:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27126:19:53"
                              },
                              {
                                "hexValue": "746f72",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27147:5:53",
                                "type": "",
                                "value": "tor"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27119:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27119:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27119:34:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27162:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27174:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27185:3:53",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27170:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27170:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27162:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0687f8064c09ccf183090b5092c4485c730072a161487645a7e37b56cef356bb__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26875:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "26889:4:53",
                        "type": ""
                      }
                    ],
                    "src": "26724:471:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27247:88:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "27278:22:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "27280:16:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "27280:18:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "27280:18:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "27263:5:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27274:1:53",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "27270:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27270:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "27260:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27260:17:53"
                          },
                          "nodeType": "YulIf",
                          "src": "27257:43:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27309:20:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "27320:5:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27327:1:53",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27316:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27316:13:53"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "27309:3:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "27229:5:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "27239:3:53",
                        "type": ""
                      }
                    ],
                    "src": "27200:135:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27392:116:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "27451:22:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "27453:16:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "27453:18:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "27453:18:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "27423:1:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "27416:6:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "27416:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "27409:6:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27409:17:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "27431:1:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "27442:1:53",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "27438:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "27438:6:53"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "27446:1:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "27434:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "27434:14:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "27428:2:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27428:21:53"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "27405:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27405:45:53"
                          },
                          "nodeType": "YulIf",
                          "src": "27402:71:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27482:20:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "27497:1:53"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "27500:1:53"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "27493:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27493:9:53"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "27482:7:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "27371:1:53",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "27374:1:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "27380:7:53",
                        "type": ""
                      }
                    ],
                    "src": "27340:168:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27670:218:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "27680:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27692:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27703:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27688:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27688:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "27680:4:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "27715:29:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27733:3:53",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27738:1:53",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "27729:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27729:11:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27742:1:53",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "27725:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27725:19:53"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "27719:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "27760:9:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "27775:6:53"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27783:2:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27771:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27771:15:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27753:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27753:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27753:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27807:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27818:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27803:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27803:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27827:6:53"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27835:2:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27823:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27823:15:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27796:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27796:43:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27796:43:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "27859:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27870:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27855:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27855:18:53"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "27875:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27848:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27848:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27848:34:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27623:9:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "27634:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "27642:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "27650:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "27661:4:53",
                        "type": ""
                      }
                    ],
                    "src": "27513:375:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27971:199:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "28017:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "28026:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "28029:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "28019:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "28019:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "28019:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "27992:7:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28001:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "27988:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27988:23:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28013:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "27984:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27984:32:53"
                          },
                          "nodeType": "YulIf",
                          "src": "27981:52:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "28042:29:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28061:9:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "28055:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28055:16:53"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "28046:5:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "28124:16:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "28133:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "28136:1:53",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "28126:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "28126:12:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "28126:12:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "28093:5:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "28114:5:53"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "28107:6:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "28107:13:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "28100:6:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "28100:21:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "28090:2:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28090:32:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "28083:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28083:40:53"
                          },
                          "nodeType": "YulIf",
                          "src": "28080:60:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28149:15:53",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "28159:5:53"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "28149:6:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "27937:9:53",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "27948:7:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "27960:6:53",
                        "type": ""
                      }
                    ],
                    "src": "27893:277:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28349:182:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28366:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28377:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28359:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28359:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28359:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28400:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28411:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28396:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28396:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28416:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28389:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28389:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28389:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28439:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28450:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28435:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28435:18:53"
                              },
                              {
                                "hexValue": "436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28455:34:53",
                                "type": "",
                                "value": "Checkpoints: block not yet mined"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28428:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28428:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28428:62:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28499:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28511:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28522:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28507:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28507:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28499:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_65bd29ebd873d82da6b3634513fc6582859c8e00f2a09cb4bdbeddf7d05eb5be__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28326:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28340:4:53",
                        "type": ""
                      }
                    ],
                    "src": "28175:356:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28710:239:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28727:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28738:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28720:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28720:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28720:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28761:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28772:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28757:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28757:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28777:2:53",
                                "type": "",
                                "value": "49"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28750:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28750:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28750:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28800:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28811:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28796:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28796:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f723a2070726f706f73657220766f7465732062656c6f772070",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28816:34:53",
                                "type": "",
                                "value": "Governor: proposer votes below p"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28789:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28789:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28789:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28871:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28882:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28867:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28867:18:53"
                              },
                              {
                                "hexValue": "726f706f73616c207468726573686f6c64",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28887:19:53",
                                "type": "",
                                "value": "roposal threshold"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28860:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28860:47:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28860:47:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28916:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28928:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28939:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28924:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28924:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28916:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_df78ee0077e11770202b643d4ac130b9964a5ac311c9b8d8ed6242eb4e2dcf86__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28687:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28701:4:53",
                        "type": ""
                      }
                    ],
                    "src": "28536:413:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29128:223:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29145:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29156:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29138:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29138:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29138:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29179:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29190:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29175:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29175:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29195:2:53",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29168:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29168:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29168:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29218:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29229:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29214:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29214:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e6774",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29234:34:53",
                                "type": "",
                                "value": "Governor: invalid proposal lengt"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29207:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29207:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29207:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29289:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29300:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29285:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29285:18:53"
                              },
                              {
                                "hexValue": "68",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29305:3:53",
                                "type": "",
                                "value": "h"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29278:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29278:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29278:31:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29318:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29330:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29341:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29326:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29326:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29318:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_35c793b1b5a6be245307722bba06fa552ac609ebfd70358ab0b3220eed40db4d__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29105:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29119:4:53",
                        "type": ""
                      }
                    ],
                    "src": "28954:397:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29530:174:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29547:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29558:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29540:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29540:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29540:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29581:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29592:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29577:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29577:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29597:2:53",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29570:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29570:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29570:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29620:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29631:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29616:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29616:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f723a20656d7074792070726f706f73616c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29636:26:53",
                                "type": "",
                                "value": "Governor: empty proposal"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29609:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29609:54:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29609:54:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29672:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29684:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29695:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29680:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29680:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29672:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8400b334e0df18026c76df742cddc258619f9923d5f5b8ba67cd6eec1d1f3513__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29507:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29521:4:53",
                        "type": ""
                      }
                    ],
                    "src": "29356:348:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29883:223:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29900:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29911:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29893:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29893:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29893:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29934:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29945:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29930:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29930:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29950:2:53",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29923:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29923:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29923:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29973:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29984:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29969:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29969:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f723a2070726f706f73616c20616c7265616479206578697374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29989:34:53",
                                "type": "",
                                "value": "Governor: proposal already exist"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29962:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29962:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29962:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30044:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30055:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30040:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30040:18:53"
                              },
                              {
                                "hexValue": "73",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "30060:3:53",
                                "type": "",
                                "value": "s"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30033:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30033:31:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30033:31:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30073:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30085:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30096:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30081:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30081:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30073:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c1bb0f67bc14091429c4b8b5d74e1f929b2838d72b5fb3c5a2cbef13b2faab40__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29860:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29874:4:53",
                        "type": ""
                      }
                    ],
                    "src": "29709:397:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30158:189:53",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "30168:28:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "30178:18:53",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "30172:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "30205:21:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "30220:1:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "30223:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "30216:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30216:10:53"
                          },
                          "variables": [
                            {
                              "name": "x_1",
                              "nodeType": "YulTypedName",
                              "src": "30209:3:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "30235:21:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "30250:1:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "30253:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "30246:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30246:10:53"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "30239:3:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "30290:22:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "30292:16:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "30292:18:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "30292:18:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "30271:3:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "30280:2:53"
                                  },
                                  {
                                    "name": "y_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "30284:3:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "30276:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30276:12:53"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "30268:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30268:21:53"
                          },
                          "nodeType": "YulIf",
                          "src": "30265:47:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "30321:20:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "x_1",
                                "nodeType": "YulIdentifier",
                                "src": "30332:3:53"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "30337:3:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30328:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30328:13:53"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "30321:3:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint64",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "30141:1:53",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "30144:1:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "30150:3:53",
                        "type": ""
                      }
                    ],
                    "src": "30111:236:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30395:59:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "30412:3:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "30421:5:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30428:18:53",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "30417:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30417:30:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "30405:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30405:43:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30405:43:53"
                        }
                      ]
                    },
                    "name": "abi_encode_uint64",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "30379:5:53",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "30386:3:53",
                        "type": ""
                      }
                    ],
                    "src": "30352:102:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31040:1303:53",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31050:13:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31060:3:53",
                            "type": "",
                            "value": "288"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "31054:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "31079:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "31090:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31072:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31072:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31072:25:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31106:12:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31116:2:53",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "31110:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31138:9:53"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "31149:2:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31134:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31134:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "31158:6:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "31174:3:53",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "31179:1:53",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "31170:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "31170:11:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "31183:1:53",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "31166:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "31166:19:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "31154:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31154:32:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31127:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31127:60:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31127:60:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31207:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31218:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31203:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31203:18:53"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "31223:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31196:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31196:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31196:30:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31235:70:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "31278:6:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31290:9:53"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "31301:2:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31286:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31286:18:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_address_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "31249:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31249:56:53"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "31239:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31325:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31336:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31321:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31321:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "31345:6:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31353:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "31341:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31341:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31314:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31314:50:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31314:50:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31373:58:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "31416:6:53"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "31424:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_uint256_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "31387:28:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31387:44:53"
                          },
                          "variables": [
                            {
                              "name": "tail_2",
                              "nodeType": "YulTypedName",
                              "src": "31377:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31451:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31462:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31447:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31447:19:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "31472:6:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31480:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "31468:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31468:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31440:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31440:51:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31440:51:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31500:17:53",
                          "value": {
                            "name": "tail_2",
                            "nodeType": "YulIdentifier",
                            "src": "31511:6:53"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "31504:3:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31526:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "31546:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "31540:5:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31540:13:53"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "31530:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "31569:6:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "31577:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31562:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31562:22:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31562:22:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31593:22:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "31604:6:53"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "31612:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31600:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31600:15:53"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "31593:3:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31624:50:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "tail_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "31646:6:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "31658:1:53",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "31661:6:53"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "31654:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "31654:14:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31642:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31642:27:53"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "31671:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31638:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31638:36:53"
                          },
                          "variables": [
                            {
                              "name": "tail_3",
                              "nodeType": "YulTypedName",
                              "src": "31628:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31683:29:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "31701:6:53"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "31709:2:53"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31697:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31697:15:53"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "31687:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31721:10:53",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "31730:1:53",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "31725:1:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "31789:203:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "31810:3:53"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "tail_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "31823:6:53"
                                            },
                                            {
                                              "name": "tail_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "31831:6:53"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "31819:3:53"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "31819:19:53"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "31844:2:53",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "31840:3:53"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "31840:7:53"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "31815:3:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "31815:33:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "31803:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "31803:46:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "31803:46:53"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "31862:50:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "31896:6:53"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "31890:5:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "31890:13:53"
                                    },
                                    {
                                      "name": "tail_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "31905:6:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_string",
                                    "nodeType": "YulIdentifier",
                                    "src": "31872:17:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "31872:40:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "tail_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "31862:6:53"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "31925:25:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "31939:6:53"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "31947:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "31935:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "31935:15:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "31925:6:53"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "31963:19:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "31974:3:53"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "31979:2:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "31970:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "31970:12:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "31963:3:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "31751:1:53"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "31754:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "31748:2:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31748:13:53"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "31762:18:53",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "31764:14:53",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "31773:1:53"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "31776:1:53",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "31769:3:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "31769:9:53"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "31764:1:53"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "31744:3:53",
                            "statements": []
                          },
                          "src": "31740:252:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32012:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32023:3:53",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32008:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32008:19:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "32033:6:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32041:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "32029:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32029:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32001:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32001:51:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32001:51:53"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "32061:56:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "32102:6:53"
                              },
                              {
                                "name": "tail_3",
                                "nodeType": "YulIdentifier",
                                "src": "32110:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_array_bytes_dyn",
                              "nodeType": "YulIdentifier",
                              "src": "32075:26:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32075:42:53"
                          },
                          "variables": [
                            {
                              "name": "tail_4",
                              "nodeType": "YulTypedName",
                              "src": "32065:6:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value6",
                                "nodeType": "YulIdentifier",
                                "src": "32144:6:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32156:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32167:3:53",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32152:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32152:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_uint64",
                              "nodeType": "YulIdentifier",
                              "src": "32126:17:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32126:46:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32126:46:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value7",
                                "nodeType": "YulIdentifier",
                                "src": "32199:6:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32211:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32222:3:53",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32207:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32207:19:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_uint64",
                              "nodeType": "YulIdentifier",
                              "src": "32181:17:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32181:46:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32181:46:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32247:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32258:3:53",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32243:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32243:19:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "32268:6:53"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32276:9:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "32264:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32264:22:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32236:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32236:51:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32236:51:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "32296:41:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "value8",
                                "nodeType": "YulIdentifier",
                                "src": "32322:6:53"
                              },
                              {
                                "name": "tail_4",
                                "nodeType": "YulIdentifier",
                                "src": "32330:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "32304:17:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32304:33:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "32296:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint64_t_uint64_t_string_memory_ptr__to_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30945:9:53",
                        "type": ""
                      },
                      {
                        "name": "value8",
                        "nodeType": "YulTypedName",
                        "src": "30956:6:53",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "30964:6:53",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "30972:6:53",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "30980:6:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "30988:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "30996:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "31004:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "31012:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "31020:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "31031:4:53",
                        "type": ""
                      }
                    ],
                    "src": "30459:1884:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32477:145:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "32487:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32499:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32510:2:53",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32495:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32495:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "32487:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32529:9:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "32544:6:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "32560:3:53",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "32565:1:53",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "32556:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "32556:11:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "32569:1:53",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "32552:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "32552:19:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "32540:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32540:32:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32522:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32522:51:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32522:51:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32593:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32604:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32589:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32589:18:53"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "32609:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32582:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32582:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32582:34:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "32438:9:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "32449:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "32457:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "32468:4:53",
                        "type": ""
                      }
                    ],
                    "src": "32348:274:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32756:175:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "32766:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32778:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32789:2:53",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32774:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32774:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "32766:4:53"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "32801:29:53",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32819:3:53",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32824:1:53",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "32815:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32815:11:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32828:1:53",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "32811:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32811:19:53"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "32805:2:53",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "32846:9:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "32861:6:53"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "32869:2:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "32857:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32857:15:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32839:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32839:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32839:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "32893:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32904:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32889:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32889:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "32913:6:53"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "32921:2:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "32909:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32909:15:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32882:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32882:43:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32882:43:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "32717:9:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "32728:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "32736:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "32747:4:53",
                        "type": ""
                      }
                    ],
                    "src": "32627:304:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33110:229:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33127:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33138:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33120:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33120:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33120:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33161:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33172:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33157:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33157:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33177:2:53",
                                "type": "",
                                "value": "39"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33150:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33150:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33150:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33200:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33211:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33196:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33196:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "33216:34:53",
                                "type": "",
                                "value": "GovernorSettings: voting period "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33189:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33189:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33189:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33271:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33282:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33267:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33267:18:53"
                              },
                              {
                                "hexValue": "746f6f206c6f77",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "33287:9:53",
                                "type": "",
                                "value": "too low"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33260:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33260:37:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33260:37:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33306:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33318:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33329:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33314:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33314:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "33306:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3f314603cb191f371d117be724372820f824fc7fbb608c5408b31620bafe9a83__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "33087:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "33101:4:53",
                        "type": ""
                      }
                    ],
                    "src": "32936:403:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33390:171:53",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "33421:111:53",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "33442:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "33449:3:53",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "33454:10:53",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "33445:3:53"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "33445:20:53"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "33435:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33435:31:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "33435:31:53"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "33486:1:53",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "33489:4:53",
                                      "type": "",
                                      "value": "0x12"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "33479:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33479:15:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "33479:15:53"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "33514:1:53",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "33517:4:53",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "33507:6:53"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "33507:15:53"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "33507:15:53"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "33410:1:53"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "33403:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33403:9:53"
                          },
                          "nodeType": "YulIf",
                          "src": "33400:132:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33541:14:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "33550:1:53"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "33553:1:53"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "33546:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33546:9:53"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "33541:1:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "33375:1:53",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "33378:1:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "33384:1:53",
                        "type": ""
                      }
                    ],
                    "src": "33344:217:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33740:173:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33757:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33768:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33750:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33750:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33750:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33791:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33802:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33787:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33787:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33807:2:53",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33780:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33780:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33780:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "33830:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33841:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33826:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33826:18:53"
                              },
                              {
                                "hexValue": "436865636b706f696e743a20696e76616c6964206b6579",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "33846:25:53",
                                "type": "",
                                "value": "Checkpoint: invalid key"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33819:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33819:53:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33819:53:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33881:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "33893:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33904:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33889:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33889:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "33881:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_b717461289064d78d4f64eae2786bccf758ed88a7bfa28ee6fa5093be89d54df__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "33717:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "33731:4:53",
                        "type": ""
                      }
                    ],
                    "src": "33566:347:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34166:144:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "34183:3:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34192:3:53",
                                    "type": "",
                                    "value": "240"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34197:4:53",
                                    "type": "",
                                    "value": "6401"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "34188:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34188:14:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34176:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34176:27:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34176:27:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "34223:3:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34228:1:53",
                                    "type": "",
                                    "value": "2"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34219:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34219:11:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "34232:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34212:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34212:27:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34212:27:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "34259:3:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34264:2:53",
                                    "type": "",
                                    "value": "34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34255:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34255:12:53"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "34269:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34248:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34248:28:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34248:28:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34285:19:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "34296:3:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34301:2:53",
                                "type": "",
                                "value": "66"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34292:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34292:12:53"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "34285:3:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "34134:3:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "34139:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "34147:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "34158:3:53",
                        "type": ""
                      }
                    ],
                    "src": "33918:392:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34496:217:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "34506:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34518:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34529:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "34514:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34514:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "34506:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34549:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "34560:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34542:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34542:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34542:25:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34587:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34598:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34583:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34583:18:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "34607:6:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34615:4:53",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "34603:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34603:17:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34576:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34576:45:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34576:45:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34641:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34652:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34637:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34637:18:53"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "34657:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34630:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34630:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34630:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34684:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34695:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34680:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34680:18:53"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "34700:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34673:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34673:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34673:34:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "34441:9:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "34452:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "34460:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "34468:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "34476:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "34487:4:53",
                        "type": ""
                      }
                    ],
                    "src": "34315:398:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34892:174:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "34909:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34920:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34902:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34902:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34902:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34943:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34954:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34939:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34939:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "34959:2:53",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34932:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34932:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34932:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "34982:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "34993:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "34978:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "34978:18:53"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "34998:26:53",
                                "type": "",
                                "value": "ECDSA: invalid signature"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "34971:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34971:54:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "34971:54:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "35034:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35046:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35057:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "35042:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35042:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "35034:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "34869:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "34883:4:53",
                        "type": ""
                      }
                    ],
                    "src": "34718:348:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35245:181:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35262:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35273:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35255:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35255:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35255:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35296:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35307:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35292:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35292:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35312:2:53",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35285:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35285:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35285:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35335:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35346:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35331:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35331:18:53"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "35351:33:53",
                                "type": "",
                                "value": "ECDSA: invalid signature length"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35324:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35324:61:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35324:61:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "35394:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35406:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35417:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "35402:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35402:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "35394:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "35222:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "35236:4:53",
                        "type": ""
                      }
                    ],
                    "src": "35071:355:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35605:224:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35622:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35633:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35615:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35615:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35615:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35656:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35667:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35652:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35652:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35672:2:53",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35645:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35645:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35645:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35695:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35706:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35691:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35691:18:53"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "35711:34:53",
                                "type": "",
                                "value": "ECDSA: invalid signature 's' val"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35684:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35684:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35684:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "35766:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35777:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35762:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35762:18:53"
                              },
                              {
                                "hexValue": "7565",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "35782:4:53",
                                "type": "",
                                "value": "ue"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35755:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35755:32:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35755:32:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "35796:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "35808:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35819:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "35804:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35804:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "35796:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "35582:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "35596:4:53",
                        "type": ""
                      }
                    ],
                    "src": "35431:398:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36008:229:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36025:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36036:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36018:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36018:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36018:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36059:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36070:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36055:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36055:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36075:2:53",
                                "type": "",
                                "value": "39"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36048:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36048:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36048:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36098:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36109:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36094:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36094:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "36114:34:53",
                                "type": "",
                                "value": "GovernorVotingSimple: vote alrea"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36087:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36087:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36087:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36169:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36180:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36165:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36165:18:53"
                              },
                              {
                                "hexValue": "64792063617374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "36185:9:53",
                                "type": "",
                                "value": "dy cast"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36158:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36158:37:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36158:37:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "36204:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36216:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36227:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36212:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36212:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "36204:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_52977fe78dd360b196702e8b1aa8e7d06cd560911da4c4d483548d7b2d1a38d8__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "35985:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "35999:4:53",
                        "type": ""
                      }
                    ],
                    "src": "35834:403:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36416:243:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36433:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36444:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36426:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36426:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36426:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36467:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36478:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36463:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36463:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36483:2:53",
                                "type": "",
                                "value": "53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36456:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36456:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36456:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36506:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36517:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36502:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36502:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f72566f74696e6753696d706c653a20696e76616c6964207661",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "36522:34:53",
                                "type": "",
                                "value": "GovernorVotingSimple: invalid va"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36495:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36495:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36495:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36577:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36588:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36573:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36573:18:53"
                              },
                              {
                                "hexValue": "6c756520666f7220656e756d20566f746554797065",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "36593:23:53",
                                "type": "",
                                "value": "lue for enum VoteType"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36566:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36566:51:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36566:51:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "36626:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36638:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36649:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36634:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36634:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "36626:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c16dd4ca2a7081ef35bfb3860532c95d6b1aacddadf6f22f1058fc06b5718887__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "36393:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "36407:4:53",
                        "type": ""
                      }
                    ],
                    "src": "36242:417:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36838:179:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36855:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36866:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36848:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36848:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36848:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36889:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36900:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36885:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36885:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36905:2:53",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36878:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36878:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36878:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36928:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36939:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36924:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36924:18:53"
                              },
                              {
                                "hexValue": "476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c206964",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "36944:31:53",
                                "type": "",
                                "value": "Governor: unknown proposal id"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36917:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36917:59:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36917:59:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "36985:26:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36997:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37008:2:53",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36993:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36993:18:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "36985:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_be0e8e67d15e920d3846a46401854a27a676d8965bbdde05e68fc2cc5672c892__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "36815:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "36829:4:53",
                        "type": ""
                      }
                    ],
                    "src": "36664:353:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37196:228:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37213:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37224:2:53",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37206:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37206:21:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37206:21:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "37247:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "37258:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "37243:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37243:18:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37263:2:53",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37236:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37236:30:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37236:30:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "37286:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "37297:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "37282:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37282:18:53"
                              },
                              {
                                "hexValue": "53616665436173743a2076616c756520646f65736e27742066697420696e2036",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "37302:34:53",
                                "type": "",
                                "value": "SafeCast: value doesn't fit in 6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37275:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37275:62:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37275:62:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "37357:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "37368:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "37353:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37353:18:53"
                              },
                              {
                                "hexValue": "342062697473",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "37373:8:53",
                                "type": "",
                                "value": "4 bits"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37346:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37346:36:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37346:36:53"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "37391:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37403:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37414:3:53",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37399:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37399:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "37391:4:53"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "37173:9:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "37187:4:53",
                        "type": ""
                      }
                    ],
                    "src": "37022:402:53"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37642:276:53",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "37652:27:53",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37664:9:53"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37675:3:53",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37660:3:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37660:19:53"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "37652:4:53"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37695:9:53"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "37706:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37688:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37688:25:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37688:25:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "37733:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "37744:2:53",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "37729:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37729:18:53"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "37749:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37722:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37722:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37722:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "37776:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "37787:2:53",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "37772:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37772:18:53"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "37792:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37765:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37765:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37765:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "37819:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "37830:2:53",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "37815:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37815:18:53"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "37835:6:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37808:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37808:34:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37808:34:53"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "37862:9:53"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "37873:3:53",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "37858:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37858:19:53"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value4",
                                    "nodeType": "YulIdentifier",
                                    "src": "37883:6:53"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "37899:3:53",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "37904:1:53",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "37895:3:53"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "37895:11:53"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "37908:1:53",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "37891:3:53"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "37891:19:53"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "37879:3:53"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37879:32:53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37851:6:53"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37851:61:53"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37851:61:53"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "37579:9:53",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "37590:6:53",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "37598:6:53",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "37606:6:53",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "37614:6:53",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "37622:6:53",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "37633:4:53",
                        "type": ""
                      }
                    ],
                    "src": "37429:489:53"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_string_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_available_length_bytes(src, length, end) -> array\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        array := allocate_memory(add(and(add(length, 31), not(31)), 0x20))\n        mstore(array, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(array, 0x20), src, length)\n        mstore(add(add(array, length), 0x20), 0)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_bytes(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptrt_bytes_memory_ptrt_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_uint8(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n        value5 := abi_decode_uint8(add(headStart, 128))\n        value6 := calldataload(add(headStart, 160))\n        value7 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(pos, length), 0x20), 0)\n        }\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function array_allocation_size_array_address_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_array_address_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let value := calldataload(src)\n            validator_revert_address(value)\n            mstore(dst, value)\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_array_bytes_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let dst := allocate_memory(array_allocation_size_array_address_dyn(_1))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, shl(5, _1)), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, 0xffffffffffffffff)\n            {\n                let _3 := 0\n                revert(_3, _3)\n            }\n            mstore(dst, abi_decode_bytes(add(add(offset, innerOffset), _2), end))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_bytes32(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_array_bytes_dyn(add(headStart, offset_2), dataEnd)\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_uint8t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_uint8(add(headStart, 32))\n        value2 := abi_decode_uint8(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_ProposalState_$1870__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 8))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_uint256t_uint8(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_uint8(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_uint8(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256t_uint8t_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_uint8(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_array$_t_bytes_memory_ptr_$dyn_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_array_bytes_dyn(add(headStart, offset_2), dataEnd)\n        let offset_3 := calldataload(add(headStart, 96))\n        if gt(offset_3, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset_3)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_bytes(add(_2, 32), calldataload(_2), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_contract$_TimelockController_$3066(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value2 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value4 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_contract$_IVotes_$4211__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_packed_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint256_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xff))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_stringliteral_01397b9b23826f2770c44682f6f60114915147b09511a75fee3231adbc22847f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Governor: onlyGovernance\")\n        tail := add(headStart, 96)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_a608627370ddd238e48feab42026732822e64969fe5a8155723eaa5f397576d9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Governor: proposal not successfu\")\n        mstore(add(headStart, 96), \"l\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_array_address_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_array_uint256_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        pos := add(pos, _1)\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos\n    }\n    function abi_encode_array_bytes_dyn(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let _1 := 0x20\n        let updated_pos := add(pos, _1)\n        let pos_1 := updated_pos\n        pos := updated_pos\n        let tail := add(pos_1, shl(5, length))\n        let srcPtr := add(value, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, sub(tail, pos_1))\n            tail := abi_encode_string(mload(srcPtr), tail)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        end := tail\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_rational_0_by_1_t_bytes32__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32_t_bytes32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 160)\n        let tail_1 := abi_encode_array_address_dyn(value0, add(headStart, 160))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_array_bytes_dyn(value2, tail_2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_rational_0_by_1_t_bytes32_t_uint256__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32_t_bytes32_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 192)\n        let tail_1 := abi_encode_array_address_dyn(value0, add(headStart, 192))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_array_bytes_dyn(value2, tail_2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint8__to_t_bytes32_t_uint256_t_uint8__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, 0xff))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 128)\n        let tail_1 := abi_encode_array_address_dyn(value0, add(headStart, 128))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_array_bytes_dyn(value2, tail_2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 2\")\n        mstore(add(headStart, 96), \"24 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c907489dafcfb622d3b83f2657a14d6da2f59e0de3116af0d6a80554c1a7cb19__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 3\")\n        mstore(add(headStart, 96), \"2 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5b1e239298a1362f9b5245bd4e9393de28380a12326aa31532e03fe3f1061d80__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Governor: vote not currently act\")\n        mstore(add(headStart, 96), \"ive\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_uint8_t_uint256_t_string_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_uint256_t_uint8_t_uint256_t_string_memory_ptr_t_bytes_memory_ptr__to_t_uint256_t_uint8_t_uint256_t_string_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 160)\n        let tail_1 := abi_encode_string(value3, add(headStart, 160))\n        mstore(add(headStart, 128), sub(tail_1, headStart))\n        tail := abi_encode_string(value4, tail_1)\n    }\n    function abi_encode_tuple_t_stringliteral_0687f8064c09ccf183090b5092c4485c730072a161487645a7e37b56cef356bb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 67)\n        mstore(add(headStart, 64), \"GovernorVotesQuorumFraction: quo\")\n        mstore(add(headStart, 96), \"rumNumerator over quorumDenomina\")\n        mstore(add(headStart, 128), \"tor\")\n        tail := add(headStart, 160)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_65bd29ebd873d82da6b3634513fc6582859c8e00f2a09cb4bdbeddf7d05eb5be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Checkpoints: block not yet mined\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_df78ee0077e11770202b643d4ac130b9964a5ac311c9b8d8ed6242eb4e2dcf86__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"Governor: proposer votes below p\")\n        mstore(add(headStart, 96), \"roposal threshold\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_35c793b1b5a6be245307722bba06fa552ac609ebfd70358ab0b3220eed40db4d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Governor: invalid proposal lengt\")\n        mstore(add(headStart, 96), \"h\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8400b334e0df18026c76df742cddc258619f9923d5f5b8ba67cd6eec1d1f3513__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Governor: empty proposal\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c1bb0f67bc14091429c4b8b5d74e1f929b2838d72b5fb3c5a2cbef13b2faab40__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Governor: proposal already exist\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function checked_add_t_uint64(x, y) -> sum\n    {\n        let _1 := 0xffffffffffffffff\n        let x_1 := and(x, _1)\n        let y_1 := and(y, _1)\n        if gt(x_1, sub(_1, y_1)) { panic_error_0x11() }\n        sum := add(x_1, y_1)\n    }\n    function abi_encode_uint64(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint64_t_uint64_t_string_memory_ptr__to_t_uint256_t_address_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_string_memory_ptr_$dyn_memory_ptr_t_array$_t_bytes_memory_ptr_$dyn_memory_ptr_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 288\n        mstore(headStart, value0)\n        let _2 := 32\n        mstore(add(headStart, _2), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), _1)\n        let tail_1 := abi_encode_array_address_dyn(value2, add(headStart, _1))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn(value3, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value4)\n        mstore(tail_2, length)\n        pos := add(tail_2, _2)\n        let tail_3 := add(add(tail_2, shl(5, length)), _2)\n        let srcPtr := add(value4, _2)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_3, tail_2), not(31)))\n            tail_3 := abi_encode_string(mload(srcPtr), tail_3)\n            srcPtr := add(srcPtr, _2)\n            pos := add(pos, _2)\n        }\n        mstore(add(headStart, 160), sub(tail_3, headStart))\n        let tail_4 := abi_encode_array_bytes_dyn(value5, tail_3)\n        abi_encode_uint64(value6, add(headStart, 192))\n        abi_encode_uint64(value7, add(headStart, 224))\n        mstore(add(headStart, 256), sub(tail_4, headStart))\n        tail := abi_encode_string(value8, tail_4)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_3f314603cb191f371d117be724372820f824fc7fbb608c5408b31620bafe9a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"GovernorSettings: voting period \")\n        mstore(add(headStart, 96), \"too low\")\n        tail := add(headStart, 128)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_b717461289064d78d4f64eae2786bccf758ed88a7bfa28ee6fa5093be89d54df__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Checkpoint: invalid key\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, shl(240, 6401))\n        mstore(add(pos, 2), value0)\n        mstore(add(pos, 34), value1)\n        end := add(pos, 66)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_52977fe78dd360b196702e8b1aa8e7d06cd560911da4c4d483548d7b2d1a38d8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"GovernorVotingSimple: vote alrea\")\n        mstore(add(headStart, 96), \"dy cast\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c16dd4ca2a7081ef35bfb3860532c95d6b1aacddadf6f22f1058fc06b5718887__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 53)\n        mstore(add(headStart, 64), \"GovernorVotingSimple: invalid va\")\n        mstore(add(headStart, 96), \"lue for enum VoteType\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_be0e8e67d15e920d3846a46401854a27a676d8965bbdde05e68fc2cc5672c892__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Governor: unknown proposal id\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_93ae0c6bf6ffaece591a770b1865daa9f65157e541970aa9d8dc5f89a9490939__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 6\")\n        mstore(add(headStart, 96), \"4 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n}",
              "id": 53,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {
            "3857": [
              {
                "length": 32,
                "start": 2153
              },
              {
                "length": 32,
                "start": 8518
              },
              {
                "length": 32,
                "start": 9051
              }
            ],
            "7169": [
              {
                "length": 32,
                "start": 9816
              }
            ],
            "7171": [
              {
                "length": 32,
                "start": 9774
              }
            ],
            "7173": [
              {
                "length": 32,
                "start": 9732
              }
            ],
            "7175": [
              {
                "length": 32,
                "start": 9899
              }
            ],
            "7177": [
              {
                "length": 32,
                "start": 9936
              }
            ],
            "7179": [
              {
                "length": 32,
                "start": 9857
              }
            ]
          },
          "linkReferences": {},
          "object": "60806040526004361061024a5760003560e01c80637b3c71d311610139578063c28bc2fa116100b6578063ea0217cf1161007a578063ea0217cf146107ab578063eb9019d4146107cb578063ece40cc1146107eb578063f23a6e611461080b578063f8ce560a14610837578063fc0c546a1461085757600080fd5b8063c28bc2fa146106cc578063c59057e4146106df578063d33219b4146106ff578063dd4e2ba514610731578063deaaa7cc1461077757600080fd5b8063a890c910116100fd578063a890c9101461062b578063ab58fb8e1461064b578063b58131b01461066b578063bc197c8114610680578063c01f9e37146106ac57600080fd5b80637b3c71d3146105a25780637d5e81e2146105c257806397c3d334146105e25780639a802a6d146105f6578063a7713a701461061657600080fd5b80633932abb1116101c757806354fd4d501161018b57806354fd4d50146104f857806356781388146105225780635f398a141461054257806360c4247f1461056257806370b0f6601461058257600080fd5b80633932abb1146103f75780633bccf4fd1461040c5780633e4f49e61461042c5780634385963214610459578063544ffc9c146104a357600080fd5b8063150b7a021161020e578063150b7a021461032c578063160cbed7146103705780632656227d146103905780632d63f693146103a35780632fe3e261146103c357600080fd5b806301ffc9a71461027257806302a251a3146102a757806303420181146102ca57806306f3f9e6146102ea57806306fdde031461030a57600080fd5b3661026d573061025861088b565b6001600160a01b03161461026b57600080fd5b005b600080fd5b34801561027e57600080fd5b5061029261028d366004612db9565b6108a4565b60405190151581526020015b60405180910390f35b3480156102b357600080fd5b506102bc6108b5565b60405190815260200161029e565b3480156102d657600080fd5b506102bc6102e5366004612ef7565b6108c0565b3480156102f657600080fd5b5061026b610305366004612f9d565b6109b8565b34801561031657600080fd5b5061031f610a50565b60405161029e9190613003565b34801561033857600080fd5b5061035761034736600461302b565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161029e565b34801561037c57600080fd5b506102bc61038b366004613207565b610ae2565b6102bc61039e366004613207565b610ce2565b3480156103af57600080fd5b506102bc6103be366004612f9d565b610dcf565b3480156103cf57600080fd5b506102bc7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af8881565b34801561040357600080fd5b506102bc610e06565b34801561041857600080fd5b506102bc610427366004613296565b610e11565b34801561043857600080fd5b5061044c610447366004612f9d565b610e87565b60405161029e91906132fa565b34801561046557600080fd5b50610292610474366004613322565b60008281526007602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156104af57600080fd5b506104dd6104be366004612f9d565b6000908152600760205260409020805460018201546002909201549092565b6040805193845260208401929092529082015260600161029e565b34801561050457600080fd5b506040805180820190915260018152603160f81b602082015261031f565b34801561052e57600080fd5b506102bc61053d366004613352565b610e92565b34801561054e57600080fd5b506102bc61055d36600461337e565b610ebb565b34801561056e57600080fd5b506102bc61057d366004612f9d565b610f05565b34801561058e57600080fd5b5061026b61059d366004612f9d565b610f9a565b3480156105ae57600080fd5b506102bc6105bd366004613401565b611026565b3480156105ce57600080fd5b506102bc6105dd36600461345a565b611078565b3480156105ee57600080fd5b5060646102bc565b34801561060257600080fd5b506102bc61061136600461350e565b61108f565b34801561062257600080fd5b506102bc6110a6565b34801561063757600080fd5b5061026b610646366004613566565b6110d0565b34801561065757600080fd5b506102bc610666366004612f9d565b61115c565b34801561067757600080fd5b506102bc6111f6565b34801561068c57600080fd5b5061035761069b366004613583565b63bc197c8160e01b95945050505050565b3480156106b857600080fd5b506102bc6106c7366004612f9d565b611201565b61026b6106da366004613616565b611230565b3480156106eb57600080fd5b506102bc6106fa366004613207565b611344565b34801561070b57600080fd5b50600a546001600160a01b03165b6040516001600160a01b03909116815260200161029e565b34801561073d57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e9082015261031f565b34801561078357600080fd5b506102bc7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b3480156107b757600080fd5b5061026b6107c6366004612f9d565b61137e565b3480156107d757600080fd5b506102bc6107e6366004613659565b61140a565b3480156107f757600080fd5b5061026b610806366004612f9d565b611416565b34801561081757600080fd5b50610357610826366004613685565b63f23a6e6160e01b95945050505050565b34801561084357600080fd5b506102bc610852366004612f9d565b6114a2565b34801561086357600080fd5b506107197f000000000000000000000000000000000000000000000000000000000000000081565b600061089f600a546001600160a01b031690565b905090565b60006108af826115f3565b92915050565b600061089f60055490565b60008061096461095c7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af888c8c8c8c6040516108fc9291906136ed565b60405180910390208b80519060200120604051602001610941959493929190948552602085019390935260ff9190911660408401526060830152608082015260a00190565b60405160208183030381529060405280519060200120611618565b868686611666565b90506109aa8a828b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611684915050565b9a9950505050505050505050565b6109c061088b565b6001600160a01b0316336001600160a01b0316146109f95760405162461bcd60e51b81526004016109f0906136fd565b60405180910390fd5b30610a0261088b565b6001600160a01b031614610a445760008036604051610a229291906136ed565b604051809103902090505b80610a3860026117e6565b14610a4257610a2d565b505b610a4d81611865565b50565b606060008054610a5f90613734565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8b90613734565b8015610ad85780601f10610aad57610100808354040283529160200191610ad8565b820191906000526020600020905b815481529060010190602001808311610abb57829003601f168201915b5050505050905090565b600080610af186868686611344565b90506004610afe82610e87565b6007811115610b0f57610b0f6132e4565b14610b2c5760405162461bcd60e51b81526004016109f09061376f565b600a546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a91906137b0565b600a5460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610bd4908a908a908a906000908b90600401613892565b602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1591906137b0565b6000838152600b602052604080822092909255600a5491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610c60918b918b918b91908b9089906004016138e0565b600060405180830381600087803b158015610c7a57600080fd5b505af1158015610c8e573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610cc0919061394e565b6040805192835260208301919091520160405180910390a15095945050505050565b600080610cf186868686611344565b90506000610cfe82610e87565b90506004816007811115610d1457610d146132e4565b1480610d3157506005816007811115610d2f57610d2f6132e4565b145b610d4d5760405162461bcd60e51b81526004016109f09061376f565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610dab82888888886119b1565b610db88288888888611a54565b610dc58288888888611a61565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b600061089f60045490565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610e5f9061095c90608001610941565b9050610e7c87828860405180602001604052806000815250611a9a565b979650505050505050565b60006108af82611c1d565b600080339050610eb384828560405180602001604052806000815250611a9a565b949350505050565b600080339050610e7c87828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611684915050565b60095460009080610f1a575050600854919050565b60006009610f29600184613966565b81548110610f3957610f3961397d565b60009182526020918290206040805180820190915291015463ffffffff8116808352600160201b9091046001600160e01b03169282019290925291508410610f8f57602001516001600160e01b03169392505050565b610eb3600985611d67565b610fa261088b565b6001600160a01b0316336001600160a01b031614610fd25760405162461bcd60e51b81526004016109f0906136fd565b30610fdb61088b565b6001600160a01b03161461101d5760008036604051610ffb9291906136ed565b604051809103902090505b8061101160026117e6565b1461101b57611006565b505b610a4d81611e19565b60008033905061106e86828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a9a92505050565b9695505050505050565b600061108685858585611e5a565b95945050505050565b600061109c84848461211d565b90505b9392505050565b600954600090156110c9576110bb6009611550565b6001600160e01b0316905090565b5060085490565b6110d861088b565b6001600160a01b0316336001600160a01b0316146111085760405162461bcd60e51b81526004016109f0906136fd565b3061111161088b565b6001600160a01b03161461115357600080366040516111319291906136ed565b604051809103902090505b8061114760026117e6565b146111515761113c565b505b610a4d816121b3565b600a546000828152600b602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa1580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd91906137b0565b9050806001146111ed578061109f565b60009392505050565b600061089f60065490565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610df7565b61123861088b565b6001600160a01b0316336001600160a01b0316146112685760405162461bcd60e51b81526004016109f0906136fd565b3061127161088b565b6001600160a01b0316146112b357600080366040516112919291906136ed565b604051809103902090505b806112a760026117e6565b146112b15761129c565b505b600080856001600160a01b03168585856040516112d19291906136ed565b60006040518083038185875af1925050503d806000811461130e576040519150601f19603f3d011682016040523d82523d6000602084013e611313565b606091505b509150915061133b8282604051806060016040528060288152602001613c266028913961221c565b50505050505050565b60008484848460405160200161135d9493929190613993565b60408051601f19818403018152919052805160209091012095945050505050565b61138661088b565b6001600160a01b0316336001600160a01b0316146113b65760405162461bcd60e51b81526004016109f0906136fd565b306113bf61088b565b6001600160a01b03161461140157600080366040516113df9291906136ed565b604051809103902090505b806113f560026117e6565b146113ff576113ea565b505b610a4d81612235565b600061109f83836122d6565b61141e61088b565b6001600160a01b0316336001600160a01b03161461144e5760405162461bcd60e51b81526004016109f0906136fd565b3061145761088b565b6001600160a01b03161461149957600080366040516114779291906136ed565b604051809103902090505b8061148d60026117e6565b1461149757611482565b505b610a4d816122f7565b60006108af82612338565b60006001600160e01b038211156115165760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016109f0565b5090565b6000806115388461152a4361158e565b611533866114ad565b6123e2565b6001600160e01b0391821693501690505b9250929050565b805460009080156111ed576115788361156a600184613966565b600091825260209091200190565b54600160201b90046001600160e01b031661109f565b600063ffffffff8211156115165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016109f0565b60006001600160e01b03198216636e665ced60e01b14806108af57506108af8261258c565b60006108af6116256125f7565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006116778787878761271e565b91509150610dc5816127e2565b600085815260016020819052604082209061169e88610e87565b60078111156116af576116af6132e4565b146117085760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b60648201526084016109f0565b604080516020810190915281546001600160401b0316908190526000906117319088908661211d565b90506117408888888488612930565b835161179257866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48988848960405161178594939291906139de565b60405180910390a2610e7c565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb871289888489896040516117d3959493929190613a06565b60405180910390a2979650505050505050565b60006118018254600f81810b600160801b909204900b131590565b1561181f57604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016001600160801b03169190911790915590565b60648111156118e85760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a4016109f0565b60006118f26110a6565b905080158015906119035750600954155b1561196757604080518082019091526000815260099060208101611926846114ad565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b61197260098361151a565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b306119ba61088b565b6001600160a01b031614611a4d5760005b8451811015611a4b57306001600160a01b03168582815181106119f0576119f061397d565b60200260200101516001600160a01b03161415611a3b57611a3b838281518110611a1c57611a1c61397d565b6020026020010151805190602001206002612aaf90919063ffffffff16565b611a4481613a4c565b90506119cb565b505b5050505050565b611a4d8585858585612aeb565b30611a6a61088b565b6001600160a01b031614611a4d57600254600f81810b600160801b909204900b1315611a4d576000600255611a4d565b600080611abe86868686611ab960408051602081019091526000815290565b611684565b600c549091506000906001600160a01b031663db230b52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3e91906137b0565b9050620186a0600060648311611b545782611b57565b60645b9050600082611b663a84613a67565b611b709190613a67565b90506000611b7f826064612b5f565b600d549091506001600160a01b03166323b872dd30336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af1158015611be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0d9190613a86565b50949a9950505050505050505050565b600080611c2983612b6b565b90506004816007811115611c3f57611c3f6132e4565b14611c4a5792915050565b6000838152600b602052604090205480611c65575092915050565b600a54604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd29190613a86565b15611ce1575060079392505050565b600a54604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e90602401602060405180830381865afa158015611d2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4e9190613a86565b15611d5d575060059392505050565b5060029392505050565b6000438210611db85760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e656460448201526064016109f0565b6000611dc38361158e565b84549091506000611dd686848385612c77565b90508015611e0357611ded8661156a600184613966565b54600160201b90046001600160e01b0316611e06565b60005b6001600160e01b03169695505050505050565b60045460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600455565b6000611e646111f6565b611e73336107e6600143613966565b1015611edb5760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f723a2070726f706f73657220766f7465732062656c6f7720706044820152701c9bdc1bdcd85b081d1a1c995cda1bdb19607a1b60648201526084016109f0565b6000611ef08686868680519060200120611344565b90508451865114611f135760405162461bcd60e51b81526004016109f090613aa8565b8351865114611f345760405162461bcd60e51b81526004016109f090613aa8565b6000865111611f855760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c000000000000000060448201526064016109f0565b600081815260016020908152604091829020825191820190925281546001600160401b031690819052156120055760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b60648201526084016109f0565b6000612017612012610e06565b612cd5565b61202043612cd5565b61202a9190613ae9565b905060006120396120126108b5565b6120439083613ae9565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b038111156120bb576120bb612e3a565b6040519080825280602002602001820160405280156120ee57816020015b60608152602001906001900390816120d95790505b508c88888e60405161210899989796959493929190613b14565b60405180910390a15091979650505050505050565b604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa15801561218f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109c91906137b0565b600a54604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6060831561222b57508161109f565b61109f8383612d3d565b600081116122955760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084016109f0565b60055460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600555565b600061109f83836122f260408051602081019091526000815290565b61211d565b60065460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600655565b6000606461234583610f05565b604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156123aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ce91906137b0565b6123d89190613a67565b6108af9190613c03565b82546000908190801561252f5760006124008761156a600185613966565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b0316602084015291925090871610156124815760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b657900000000000000000060448201526064016109f0565b8563ffffffff16816000015163ffffffff1614156124d057846124a98861156a600186613966565b80546001600160e01b0392909216600160201b0263ffffffff90921691909117905561251f565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b6020015192508391506125849050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b0291909316179201919091559050815b935093915050565b60006001600160e01b0319821663bf26d89760e01b14806125bd57506001600160e01b031982166379dd796f60e01b145b806125d857506001600160e01b03198216630271189760e51b145b806108af57506301ffc9a760e01b6001600160e01b03198316146108af565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561265057507f000000000000000000000000000000000000000000000000000000000000000046145b1561267a57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561275557506000905060036127d9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156127a9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166127d2576000600192509250506127d9565b9150600090505b94509492505050565b60008160048111156127f6576127f66132e4565b14156127ff5750565b6001816004811115612813576128136132e4565b14156128615760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016109f0565b6002816004811115612875576128756132e4565b14156128c35760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016109f0565b60038160048111156128d7576128d76132e4565b1415610a4d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016109f0565b60008581526007602090815260408083206001600160a01b0388168452600381019092529091205460ff16156129b85760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b60648201526084016109f0565b6001600160a01b03851660009081526003820160205260408120805460ff1916600117905560ff168460ff161415612a0957828160000160008282546129fe919061394e565b90915550611a4b9050565b60ff841660011415612a2957828160010160008282546129fe919061394e565b60ff841660021415612a4957828160020160008282546129fe919061394e565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b60648201526084016109f0565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b600a5460405163e38335e560e01b81526001600160a01b039091169063e38335e5903490612b26908890889088906000908990600401613892565b6000604051808303818588803b158015612b3f57600080fd5b505af1158015612b53573d6000803e3d6000fd5b50505050505050505050565b600061109f8284613c03565b6000818152600160205260408120600281015460ff1615612b8f5750600792915050565b6002810154610100900460ff1615612baa5750600292915050565b6000612bb584610dcf565b905080612c045760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c20696400000060448201526064016109f0565b438110612c15575060009392505050565b6000612c2085611201565b9050438110612c3457506001949350505050565b612c3d85612d67565b8015612c5c575060008581526007602052604090208054600190910154115b15612c6c57506004949350505050565b506003949350505050565b60005b81831015612ccd576000612c8e8484612d9e565b60008781526020902090915063ffffffff86169082015463ffffffff161115612cb957809250612cc7565b612cc481600161394e565b93505b50612c7a565b509392505050565b60006001600160401b038211156115165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016109f0565b815115612d4d5781518083602001fd5b8060405162461bcd60e51b81526004016109f09190613003565b600081815260076020526040812060028101546001820154612d89919061394e565b612d9561085285610dcf565b11159392505050565b6000612dad6002848418613c03565b61109f9084841661394e565b600060208284031215612dcb57600080fd5b81356001600160e01b03198116811461109f57600080fd5b803560ff81168114612df457600080fd5b919050565b60008083601f840112612e0b57600080fd5b5081356001600160401b03811115612e2257600080fd5b60208301915083602082850101111561154957600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612e7857612e78612e3a565b604052919050565b60006001600160401b03831115612e9957612e99612e3a565b612eac601f8401601f1916602001612e50565b9050828152838383011115612ec057600080fd5b828260208301376000602084830101529392505050565b600082601f830112612ee857600080fd5b61109f83833560208501612e80565b60008060008060008060008060e0898b031215612f1357600080fd5b88359750612f2360208a01612de3565b965060408901356001600160401b0380821115612f3f57600080fd5b612f4b8c838d01612df9565b909850965060608b0135915080821115612f6457600080fd5b50612f718b828c01612ed7565b945050612f8060808a01612de3565b925060a0890135915060c089013590509295985092959890939650565b600060208284031215612faf57600080fd5b5035919050565b6000815180845260005b81811015612fdc57602081850181015186830182015201612fc0565b81811115612fee576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061109f6020830184612fb6565b6001600160a01b0381168114610a4d57600080fd5b6000806000806080858703121561304157600080fd5b843561304c81613016565b9350602085013561305c81613016565b92506040850135915060608501356001600160401b0381111561307e57600080fd5b61308a87828801612ed7565b91505092959194509250565b60006001600160401b038211156130af576130af612e3a565b5060051b60200190565b600082601f8301126130ca57600080fd5b813560206130df6130da83613096565b612e50565b82815260059290921b840181019181810190868411156130fe57600080fd5b8286015b8481101561312257803561311581613016565b8352918301918301613102565b509695505050505050565b600082601f83011261313e57600080fd5b8135602061314e6130da83613096565b82815260059290921b8401810191818101908684111561316d57600080fd5b8286015b848110156131225780358352918301918301613171565b600082601f83011261319957600080fd5b813560206131a96130da83613096565b82815260059290921b840181019181810190868411156131c857600080fd5b8286015b848110156131225780356001600160401b038111156131eb5760008081fd5b6131f98986838b0101612ed7565b8452509183019183016131cc565b6000806000806080858703121561321d57600080fd5b84356001600160401b038082111561323457600080fd5b613240888389016130b9565b9550602087013591508082111561325657600080fd5b6132628883890161312d565b9450604087013591508082111561327857600080fd5b5061328587828801613188565b949793965093946060013593505050565b600080600080600060a086880312156132ae57600080fd5b853594506132be60208701612de3565b93506132cc60408701612de3565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061331c57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561333557600080fd5b82359150602083013561334781613016565b809150509250929050565b6000806040838503121561336557600080fd5b8235915061337560208401612de3565b90509250929050565b60008060008060006080868803121561339657600080fd5b853594506133a660208701612de3565b935060408601356001600160401b03808211156133c257600080fd5b6133ce89838a01612df9565b909550935060608801359150808211156133e757600080fd5b506133f488828901612ed7565b9150509295509295909350565b6000806000806060858703121561341757600080fd5b8435935061342760208601612de3565b925060408501356001600160401b0381111561344257600080fd5b61344e87828801612df9565b95989497509550505050565b6000806000806080858703121561347057600080fd5b84356001600160401b038082111561348757600080fd5b613493888389016130b9565b955060208701359150808211156134a957600080fd5b6134b58883890161312d565b945060408701359150808211156134cb57600080fd5b6134d788838901613188565b935060608701359150808211156134ed57600080fd5b508501601f810187136134ff57600080fd5b61308a87823560208401612e80565b60008060006060848603121561352357600080fd5b833561352e81613016565b92506020840135915060408401356001600160401b0381111561355057600080fd5b61355c86828701612ed7565b9150509250925092565b60006020828403121561357857600080fd5b813561109f81613016565b600080600080600060a0868803121561359b57600080fd5b85356135a681613016565b945060208601356135b681613016565b935060408601356001600160401b03808211156135d257600080fd5b6135de89838a0161312d565b945060608801359150808211156135f457600080fd5b61360089838a0161312d565b935060808801359150808211156133e757600080fd5b6000806000806060858703121561362c57600080fd5b843561363781613016565b93506020850135925060408501356001600160401b0381111561344257600080fd5b6000806040838503121561366c57600080fd5b823561367781613016565b946020939093013593505050565b600080600080600060a0868803121561369d57600080fd5b85356136a881613016565b945060208601356136b881613016565b9350604086013592506060860135915060808601356001600160401b038111156136e157600080fd5b6133f488828901612ed7565b8183823760009101908152919050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c9082168061374857607f821691505b6020821081141561376957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b6000602082840312156137c257600080fd5b5051919050565b600081518084526020808501945080840160005b838110156138025781516001600160a01b0316875295820195908201906001016137dd565b509495945050505050565b600081518084526020808501945080840160005b8381101561380257815187529582019590820190600101613821565b600081518084526020808501808196508360051b8101915082860160005b85811015613885578284038952613873848351612fb6565b9885019893509084019060010161385b565b5091979650505050505050565b60a0815260006138a560a08301886137c9565b82810360208401526138b7818861380d565b905082810360408401526138cb818761383d565b60608401959095525050608001529392505050565b60c0815260006138f360c08301896137c9565b8281036020840152613905818961380d565b90508281036040840152613919818861383d565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561396157613961613938565b500190565b60008282101561397857613978613938565b500390565b634e487b7160e01b600052603260045260246000fd5b6080815260006139a660808301876137c9565b82810360208401526139b8818761380d565b905082810360408401526139cc818661383d565b91505082606083015295945050505050565b84815260ff8416602082015282604082015260806060820152600061106e6080830184612fb6565b85815260ff8516602082015283604082015260a060608201526000613a2e60a0830185612fb6565b8281036080840152613a408185612fb6565b98975050505050505050565b6000600019821415613a6057613a60613938565b5060010190565b6000816000190483118215151615613a8157613a81613938565b500290565b600060208284031215613a9857600080fd5b8151801515811461109f57600080fd5b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115613b0b57613b0b613938565b01949350505050565b60006101208b8352602060018060a01b038c1681850152816040850152613b3d8285018c6137c9565b91508382036060850152613b51828b61380d565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015613ba257601f19878403018552613b90838351612fb6565b94860194925090850190600101613b74565b505086810360a0880152613bb6818c61383d565b945050505050613bd160c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152613bf38185612fb6565b9c9b505050505050505050505050565b600082613c2057634e487b7160e01b600052601260045260246000fd5b50049056fe476f7665726e6f723a2072656c617920726576657274656420776974686f7574206d657373616765a2646970667358221220acbff85bd0305382ce013a1f5743bfbd45a98c83f3c4bf5a71d76dd28ac79c7364736f6c634300080c0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x24A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B3C71D3 GT PUSH2 0x139 JUMPI DUP1 PUSH4 0xC28BC2FA GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xEA0217CF GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xEA0217CF EQ PUSH2 0x7AB JUMPI DUP1 PUSH4 0xEB9019D4 EQ PUSH2 0x7CB JUMPI DUP1 PUSH4 0xECE40CC1 EQ PUSH2 0x7EB JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x80B JUMPI DUP1 PUSH4 0xF8CE560A EQ PUSH2 0x837 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x857 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC28BC2FA EQ PUSH2 0x6CC JUMPI DUP1 PUSH4 0xC59057E4 EQ PUSH2 0x6DF JUMPI DUP1 PUSH4 0xD33219B4 EQ PUSH2 0x6FF JUMPI DUP1 PUSH4 0xDD4E2BA5 EQ PUSH2 0x731 JUMPI DUP1 PUSH4 0xDEAAA7CC EQ PUSH2 0x777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA890C910 GT PUSH2 0xFD JUMPI DUP1 PUSH4 0xA890C910 EQ PUSH2 0x62B JUMPI DUP1 PUSH4 0xAB58FB8E EQ PUSH2 0x64B JUMPI DUP1 PUSH4 0xB58131B0 EQ PUSH2 0x66B JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x680 JUMPI DUP1 PUSH4 0xC01F9E37 EQ PUSH2 0x6AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B3C71D3 EQ PUSH2 0x5A2 JUMPI DUP1 PUSH4 0x7D5E81E2 EQ PUSH2 0x5C2 JUMPI DUP1 PUSH4 0x97C3D334 EQ PUSH2 0x5E2 JUMPI DUP1 PUSH4 0x9A802A6D EQ PUSH2 0x5F6 JUMPI DUP1 PUSH4 0xA7713A70 EQ PUSH2 0x616 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3932ABB1 GT PUSH2 0x1C7 JUMPI DUP1 PUSH4 0x54FD4D50 GT PUSH2 0x18B JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x4F8 JUMPI DUP1 PUSH4 0x56781388 EQ PUSH2 0x522 JUMPI DUP1 PUSH4 0x5F398A14 EQ PUSH2 0x542 JUMPI DUP1 PUSH4 0x60C4247F EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0x70B0F660 EQ PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3932ABB1 EQ PUSH2 0x3F7 JUMPI DUP1 PUSH4 0x3BCCF4FD EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0x3E4F49E6 EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0x43859632 EQ PUSH2 0x459 JUMPI DUP1 PUSH4 0x544FFC9C EQ PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x150B7A02 GT PUSH2 0x20E JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x32C JUMPI DUP1 PUSH4 0x160CBED7 EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0x2656227D EQ PUSH2 0x390 JUMPI DUP1 PUSH4 0x2D63F693 EQ PUSH2 0x3A3 JUMPI DUP1 PUSH4 0x2FE3E261 EQ PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0x2A251A3 EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0x3420181 EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0x6F3F9E6 EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x30A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x26D JUMPI ADDRESS PUSH2 0x258 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x292 PUSH2 0x28D CALLDATASIZE PUSH1 0x4 PUSH2 0x2DB9 JUMP JUMPDEST PUSH2 0x8A4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x8B5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x29E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x2E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2EF7 JUMP JUMPDEST PUSH2 0x8C0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x305 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0x9B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x31F PUSH2 0xA50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x3003 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x357 PUSH2 0x347 CALLDATASIZE PUSH1 0x4 PUSH2 0x302B JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x29E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x38B CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH2 0xAE2 JUMP JUMPDEST PUSH2 0x2BC PUSH2 0x39E CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH2 0xCE2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x3BE CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0xDCF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH32 0xB3B3F3B703CD84CE352197DCFF232B1B5D3CFB2025CE47CF04742D0651F1AF88 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x403 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0xE06 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x427 CALLDATASIZE PUSH1 0x4 PUSH2 0x3296 JUMP JUMPDEST PUSH2 0xE11 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44C PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0xE87 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x32FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x465 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x292 PUSH2 0x474 CALLDATASIZE PUSH1 0x4 PUSH2 0x3322 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE PUSH1 0x3 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4DD PUSH2 0x4BE CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x29E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x504 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x31 PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x31F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x52E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x53D CALLDATASIZE PUSH1 0x4 PUSH2 0x3352 JUMP JUMPDEST PUSH2 0xE92 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x55D CALLDATASIZE PUSH1 0x4 PUSH2 0x337E JUMP JUMPDEST PUSH2 0xEBB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x57D CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0xF05 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x59D CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0xF9A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x5BD CALLDATASIZE PUSH1 0x4 PUSH2 0x3401 JUMP JUMPDEST PUSH2 0x1026 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x5DD CALLDATASIZE PUSH1 0x4 PUSH2 0x345A JUMP JUMPDEST PUSH2 0x1078 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x64 PUSH2 0x2BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x611 CALLDATASIZE PUSH1 0x4 PUSH2 0x350E JUMP JUMPDEST PUSH2 0x108F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x622 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x10A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x646 CALLDATASIZE PUSH1 0x4 PUSH2 0x3566 JUMP JUMPDEST PUSH2 0x10D0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x666 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0x115C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x677 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x11F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x357 PUSH2 0x69B CALLDATASIZE PUSH1 0x4 PUSH2 0x3583 JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x6C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0x1201 JUMP JUMPDEST PUSH2 0x26B PUSH2 0x6DA CALLDATASIZE PUSH1 0x4 PUSH2 0x3616 JUMP JUMPDEST PUSH2 0x1230 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x6FA CALLDATASIZE PUSH1 0x4 PUSH2 0x3207 JUMP JUMPDEST PUSH2 0x1344 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x70B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x29E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP3 MSTORE PUSH32 0x737570706F72743D627261766F2671756F72756D3D666F722C6162737461696E SWAP1 DUP3 ADD MSTORE PUSH2 0x31F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x783 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH32 0x150214D74D59B7D1E90C73FC22EF3D991DD0A76B046543D4D80AB92D2A50328F DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x7C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0x137E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x7E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3659 JUMP JUMPDEST PUSH2 0x140A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26B PUSH2 0x806 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0x1416 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x357 PUSH2 0x826 CALLDATASIZE PUSH1 0x4 PUSH2 0x3685 JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x843 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BC PUSH2 0x852 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F9D JUMP JUMPDEST PUSH2 0x14A2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x863 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x719 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89F PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AF DUP3 PUSH2 0x15F3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89F PUSH1 0x5 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x964 PUSH2 0x95C PUSH32 0xB3B3F3B703CD84CE352197DCFF232B1B5D3CFB2025CE47CF04742D0651F1AF88 DUP13 DUP13 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH2 0x8FC SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP12 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x941 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x1618 JUMP JUMPDEST DUP7 DUP7 DUP7 PUSH2 0x1666 JUMP JUMPDEST SWAP1 POP PUSH2 0x9AA DUP11 DUP3 DUP12 DUP12 DUP12 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP14 SWAP3 POP PUSH2 0x1684 SWAP2 POP POP JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x9C0 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x36FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH2 0xA02 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA44 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0xA22 SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0xA38 PUSH1 0x2 PUSH2 0x17E6 JUMP JUMPDEST EQ PUSH2 0xA42 JUMPI PUSH2 0xA2D JUMP JUMPDEST POP JUMPDEST PUSH2 0xA4D DUP2 PUSH2 0x1865 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0xA5F SWAP1 PUSH2 0x3734 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA8B SWAP1 PUSH2 0x3734 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAD8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAAD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAD8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xABB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAF1 DUP7 DUP7 DUP7 DUP7 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP PUSH1 0x4 PUSH2 0xAFE DUP3 PUSH2 0xE87 JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xB0F JUMPI PUSH2 0xB0F PUSH2 0x32E4 JUMP JUMPDEST EQ PUSH2 0xB2C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x376F JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x793D0649 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xF27A0C92 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB76 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB9A SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0xB1C5F427 PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB1C5F427 SWAP1 PUSH2 0xBD4 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x0 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x3892 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBF1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC15 SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0xA SLOAD SWAP2 MLOAD PUSH4 0x8F2A0BB PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x8F2A0BB0 SWAP2 PUSH2 0xC60 SWAP2 DUP12 SWAP2 DUP12 SWAP2 DUP12 SWAP2 SWAP1 DUP12 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x38E0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC8E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0x9A2E42FD6722813D69113E7D0079D3D940171428DF7373DF9C7F7617CFDA2892 DUP3 DUP3 TIMESTAMP PUSH2 0xCC0 SWAP2 SWAP1 PUSH2 0x394E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCF1 DUP7 DUP7 DUP7 DUP7 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCFE DUP3 PUSH2 0xE87 JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xD14 JUMPI PUSH2 0xD14 PUSH2 0x32E4 JUMP JUMPDEST EQ DUP1 PUSH2 0xD31 JUMPI POP PUSH1 0x5 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0xD2F JUMPI PUSH2 0xD2F PUSH2 0x32E4 JUMP JUMPDEST EQ JUMPDEST PUSH2 0xD4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x376F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 DUP2 MSTORE PUSH32 0x712AE1383F79AC853F8D882153778E0260EF8F03B504E2866E0593E04D2B291F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xDAB DUP3 DUP9 DUP9 DUP9 DUP9 PUSH2 0x19B1 JUMP JUMPDEST PUSH2 0xDB8 DUP3 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1A54 JUMP JUMPDEST PUSH2 0xDC5 DUP3 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1A61 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD SWAP3 DUP4 ADD SWAP1 SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP2 SWAP1 MSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89F PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x150214D74D59B7D1E90C73FC22EF3D991DD0A76B046543D4D80AB92D2A50328F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0xE5F SWAP1 PUSH2 0x95C SWAP1 PUSH1 0x80 ADD PUSH2 0x941 JUMP JUMPDEST SWAP1 POP PUSH2 0xE7C DUP8 DUP3 DUP9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A9A JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AF DUP3 PUSH2 0x1C1D JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH2 0xEB3 DUP5 DUP3 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A9A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH2 0xE7C DUP8 DUP3 DUP9 DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP11 SWAP3 POP PUSH2 0x1684 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 DUP1 PUSH2 0xF1A JUMPI POP POP PUSH1 0x8 SLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 PUSH2 0xF29 PUSH1 0x1 DUP5 PUSH2 0x3966 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xF39 JUMPI PUSH2 0xF39 PUSH2 0x397D JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP2 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 POP DUP5 LT PUSH2 0xF8F JUMPI PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xEB3 PUSH1 0x9 DUP6 PUSH2 0x1D67 JUMP JUMPDEST PUSH2 0xFA2 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFD2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x36FD JUMP JUMPDEST ADDRESS PUSH2 0xFDB PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x101D JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0xFFB SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x1011 PUSH1 0x2 PUSH2 0x17E6 JUMP JUMPDEST EQ PUSH2 0x101B JUMPI PUSH2 0x1006 JUMP JUMPDEST POP JUMPDEST PUSH2 0xA4D DUP2 PUSH2 0x1E19 JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER SWAP1 POP PUSH2 0x106E DUP7 DUP3 DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x1A9A SWAP3 POP POP POP JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1086 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1E5A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109C DUP5 DUP5 DUP5 PUSH2 0x211D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x10C9 JUMPI PUSH2 0x10BB PUSH1 0x9 PUSH2 0x1550 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 POP SWAP1 JUMP JUMPDEST POP PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x10D8 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1108 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x36FD JUMP JUMPDEST ADDRESS PUSH2 0x1111 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1153 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x1131 SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x1147 PUSH1 0x2 PUSH2 0x17E6 JUMP JUMPDEST EQ PUSH2 0x1151 JUMPI PUSH2 0x113C JUMP JUMPDEST POP JUMPDEST PUSH2 0xA4D DUP2 PUSH2 0x21B3 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xD45C4435 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xD45C4435 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11DD SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ PUSH2 0x11ED JUMPI DUP1 PUSH2 0x109F JUMP JUMPDEST PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89F PUSH1 0x6 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD SWAP3 DUP4 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP2 SWAP1 MSTORE PUSH2 0xDF7 JUMP JUMPDEST PUSH2 0x1238 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1268 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x36FD JUMP JUMPDEST ADDRESS PUSH2 0x1271 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x12B3 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x1291 SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x12A7 PUSH1 0x2 PUSH2 0x17E6 JUMP JUMPDEST EQ PUSH2 0x12B1 JUMPI PUSH2 0x129C JUMP JUMPDEST POP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x12D1 SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x130E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1313 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x133B DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3C26 PUSH1 0x28 SWAP2 CODECOPY PUSH2 0x221C JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x135D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3993 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1386 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x13B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x36FD JUMP JUMPDEST ADDRESS PUSH2 0x13BF PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1401 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x13DF SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x13F5 PUSH1 0x2 PUSH2 0x17E6 JUMP JUMPDEST EQ PUSH2 0x13FF JUMPI PUSH2 0x13EA JUMP JUMPDEST POP JUMPDEST PUSH2 0xA4D DUP2 PUSH2 0x2235 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109F DUP4 DUP4 PUSH2 0x22D6 JUMP JUMPDEST PUSH2 0x141E PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x144E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x36FD JUMP JUMPDEST ADDRESS PUSH2 0x1457 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1499 JUMPI PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0x1477 SWAP3 SWAP2 SWAP1 PUSH2 0x36ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP JUMPDEST DUP1 PUSH2 0x148D PUSH1 0x2 PUSH2 0x17E6 JUMP JUMPDEST EQ PUSH2 0x1497 JUMPI PUSH2 0x1482 JUMP JUMPDEST POP JUMPDEST PUSH2 0xA4D DUP2 PUSH2 0x22F7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AF DUP3 PUSH2 0x2338 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP3 GT ISZERO PUSH2 0x1516 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32342062697473 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1538 DUP5 PUSH2 0x152A NUMBER PUSH2 0x158E JUMP JUMPDEST PUSH2 0x1533 DUP7 PUSH2 0x14AD JUMP JUMPDEST PUSH2 0x23E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP2 DUP3 AND SWAP4 POP AND SWAP1 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 DUP1 ISZERO PUSH2 0x11ED JUMPI PUSH2 0x1578 DUP4 PUSH2 0x156A PUSH1 0x1 DUP5 PUSH2 0x3966 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x109F JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x1516 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2033 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x322062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x6E665CED PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x8AF JUMPI POP PUSH2 0x8AF DUP3 PUSH2 0x258C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8AF PUSH2 0x1625 PUSH2 0x25F7 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1677 DUP8 DUP8 DUP8 DUP8 PUSH2 0x271E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xDC5 DUP2 PUSH2 0x27E2 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 PUSH2 0x169E DUP9 PUSH2 0xE87 JUMP JUMPDEST PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x16AF JUMPI PUSH2 0x16AF PUSH2 0x32E4 JUMP JUMPDEST EQ PUSH2 0x1708 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20766F7465206E6F742063757272656E746C7920616374 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x697665 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1731 SWAP1 DUP9 SWAP1 DUP7 PUSH2 0x211D JUMP JUMPDEST SWAP1 POP PUSH2 0x1740 DUP9 DUP9 DUP9 DUP5 DUP9 PUSH2 0x2930 JUMP JUMPDEST DUP4 MLOAD PUSH2 0x1792 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xB8E138887D0AA13BAB447E82DE9D5C1777041ECD21CA36BA824FF1E6C07DDDA4 DUP10 DUP9 DUP5 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1785 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 0xE7C JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xE2BABFBAC5889A709B63BB7F598B324E08BC5A4FB9EC647FB3CBC9EC07EB8712 DUP10 DUP9 DUP5 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x17D3 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3A06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1801 DUP3 SLOAD PUSH1 0xF DUP2 DUP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV SWAP1 SIGNEXTEND SGT ISZERO SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x181F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1ED95095 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP1 SLOAD PUSH1 0xF SIGNEXTEND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP1 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD SWAP3 SWAP1 SSTORE DUP4 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x64 DUP2 GT ISZERO PUSH2 0x18E8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x43 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74657351756F72756D4672616374696F6E3A2071756F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x72756D4E756D657261746F72206F7665722071756F72756D44656E6F6D696E61 PUSH1 0x64 DUP3 ADD MSTORE PUSH3 0x3A37B9 PUSH1 0xE9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18F2 PUSH2 0x10A6 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1903 JUMPI POP PUSH1 0x9 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x1967 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x9 SWAP1 PUSH1 0x20 DUP2 ADD PUSH2 0x1926 DUP5 PUSH2 0x14AD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 DUP2 AND SWAP1 SWAP2 MSTORE DUP3 SLOAD PUSH1 0x1 DUP2 ADD DUP5 SSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 SWAP1 KECCAK256 DUP4 MLOAD SWAP5 SWAP1 SWAP4 ADD MLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH4 0xFFFFFFFF SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP2 ADD SSTORE JUMPDEST PUSH2 0x1972 PUSH1 0x9 DUP4 PUSH2 0x151A JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x553476BF02EF2726E8CE5CED78D63E26E602E4A2257B1F559418E24B4633997 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST ADDRESS PUSH2 0x19BA PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1A4D JUMPI PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1A4B JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x19F0 JUMPI PUSH2 0x19F0 PUSH2 0x397D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1A3B JUMPI PUSH2 0x1A3B DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1A1C JUMPI PUSH2 0x1A1C PUSH2 0x397D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x2 PUSH2 0x2AAF SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1A44 DUP2 PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP PUSH2 0x19CB JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1A4D DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2AEB JUMP JUMPDEST ADDRESS PUSH2 0x1A6A PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1A4D JUMPI PUSH1 0x2 SLOAD PUSH1 0xF DUP2 DUP2 SIGNEXTEND PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP3 DIV SWAP1 SIGNEXTEND SGT ISZERO PUSH2 0x1A4D JUMPI PUSH1 0x0 PUSH1 0x2 SSTORE PUSH2 0x1A4D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1ABE DUP7 DUP7 DUP7 DUP7 PUSH2 0x1AB9 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x1684 JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDB230B52 CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B1A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B3E SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST SWAP1 POP PUSH3 0x186A0 PUSH1 0x0 PUSH1 0x64 DUP4 GT PUSH2 0x1B54 JUMPI DUP3 PUSH2 0x1B57 JUMP JUMPDEST PUSH1 0x64 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH2 0x1B66 GASPRICE DUP5 PUSH2 0x3A67 JUMP JUMPDEST PUSH2 0x1B70 SWAP2 SWAP1 PUSH2 0x3A67 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B7F DUP3 PUSH1 0x64 PUSH2 0x2B5F JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD ADDRESS CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BE9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C0D SWAP2 SWAP1 PUSH2 0x3A86 JUMP JUMPDEST POP SWAP5 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C29 DUP4 PUSH2 0x2B6B JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 PUSH1 0x7 DUP2 GT ISZERO PUSH2 0x1C3F JUMPI PUSH2 0x1C3F PUSH2 0x32E4 JUMP JUMPDEST EQ PUSH2 0x1C4A JUMPI SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x1C65 JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0x2AB0F529 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x2AB0F529 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CAE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CD2 SWAP2 SWAP1 PUSH2 0x3A86 JUMP JUMPDEST ISZERO PUSH2 0x1CE1 JUMPI POP PUSH1 0x7 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0x2C258A9F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x584B153E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D2A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D4E SWAP2 SWAP1 PUSH2 0x3A86 JUMP JUMPDEST ISZERO PUSH2 0x1D5D JUMPI POP PUSH1 0x5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST POP PUSH1 0x2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 NUMBER DUP3 LT PUSH2 0x1DB8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436865636B706F696E74733A20626C6F636B206E6F7420796574206D696E6564 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DC3 DUP4 PUSH2 0x158E JUMP JUMPDEST DUP5 SLOAD SWAP1 SWAP2 POP PUSH1 0x0 PUSH2 0x1DD6 DUP7 DUP5 DUP4 DUP6 PUSH2 0x2C77 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1E03 JUMPI PUSH2 0x1DED DUP7 PUSH2 0x156A PUSH1 0x1 DUP5 PUSH2 0x3966 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x20 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH2 0x1E06 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xC565B045403DC03C2EEA82B81A0465EDAD9E2E7FC4D97E11421C209DA93D7A93 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E64 PUSH2 0x11F6 JUMP JUMPDEST PUSH2 0x1E73 CALLER PUSH2 0x7E6 PUSH1 0x1 NUMBER PUSH2 0x3966 JUMP JUMPDEST LT ISZERO PUSH2 0x1EDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73657220766F7465732062656C6F772070 PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1C9BDC1BDCD85B081D1A1C995CDA1BDB19 PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF0 DUP7 DUP7 DUP7 DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x1344 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD DUP7 MLOAD EQ PUSH2 0x1F13 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x3AA8 JUMP JUMPDEST DUP4 MLOAD DUP7 MLOAD EQ PUSH2 0x1F34 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP1 PUSH2 0x3AA8 JUMP JUMPDEST PUSH1 0x0 DUP7 MLOAD GT PUSH2 0x1F85 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20656D7074792070726F706F73616C0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD SWAP2 DUP3 ADD SWAP1 SWAP3 MSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 DUP2 SWAP1 MSTORE ISZERO PUSH2 0x2005 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73616C20616C7265616479206578697374 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2017 PUSH2 0x2012 PUSH2 0xE06 JUMP JUMPDEST PUSH2 0x2CD5 JUMP JUMPDEST PUSH2 0x2020 NUMBER PUSH2 0x2CD5 JUMP JUMPDEST PUSH2 0x202A SWAP2 SWAP1 PUSH2 0x3AE9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2039 PUSH2 0x2012 PUSH2 0x8B5 JUMP JUMPDEST PUSH2 0x2043 SWAP1 DUP4 PUSH2 0x3AE9 JUMP JUMPDEST DUP4 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 AND OR DUP5 SSTORE SWAP1 POP PUSH1 0x1 DUP4 ADD DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH32 0x7D84A6263AE0D98D3329BD7B46BB4E8D6F98CD35A7ADB45C274C8B7FD5EBD5E0 DUP5 CALLER DUP12 DUP12 DUP14 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x20BB JUMPI PUSH2 0x20BB PUSH2 0x2E3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20EE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x20D9 JUMPI SWAP1 POP JUMPDEST POP DUP13 DUP9 DUP9 DUP15 PUSH1 0x40 MLOAD PUSH2 0x2108 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3B14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x748D635 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 SWAP2 PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x3A46B1A8 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x218F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x109C SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x8F74EA46EF7894F65EABFB5E6E695DE773A000B47C529AB559178069B226401 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x222B JUMPI POP DUP2 PUSH2 0x109F JUMP JUMPDEST PUSH2 0x109F DUP4 DUP4 PUSH2 0x2D3D JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x2295 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F7253657474696E67733A20766F74696E6720706572696F6420 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x746F6F206C6F77 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x7E3F7F0708A84DE9203036ABAA450DCCC85AD5FF52F78C170F3EDB55CF5E8828 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109F DUP4 DUP4 PUSH2 0x22F2 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x211D JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0xCCB45DA8D5717E6C4544694297C4BA5CF151D455C9BB0ED4FC7A38411BC05461 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x6 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x64 PUSH2 0x2345 DUP4 PUSH2 0xF05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2394E7A3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x8E539E8C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x23AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x23CE SWAP2 SWAP1 PUSH2 0x37B0 JUMP JUMPDEST PUSH2 0x23D8 SWAP2 SWAP1 PUSH2 0x3A67 JUMP JUMPDEST PUSH2 0x8AF SWAP2 SWAP1 PUSH2 0x3C03 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH2 0x252F JUMPI PUSH1 0x0 PUSH2 0x2400 DUP8 PUSH2 0x156A PUSH1 0x1 DUP6 PUSH2 0x3966 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP1 SLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND DUP1 DUP5 MSTORE PUSH1 0x1 PUSH1 0x20 SHL SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x20 DUP5 ADD MSTORE SWAP2 SWAP3 POP SWAP1 DUP8 AND LT ISZERO PUSH2 0x2481 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436865636B706F696E743A20696E76616C6964206B6579000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F0 JUMP JUMPDEST DUP6 PUSH4 0xFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x24D0 JUMPI DUP5 PUSH2 0x24A9 DUP9 PUSH2 0x156A PUSH1 0x1 DUP7 PUSH2 0x3966 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x20 SHL MUL PUSH4 0xFFFFFFFF SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x251F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP9 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP9 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP12 SLOAD PUSH1 0x1 DUP2 ADD DUP14 SSTORE PUSH1 0x0 DUP14 DUP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x20 SHL MUL SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 ADD SSTORE JUMPDEST PUSH1 0x20 ADD MLOAD SWAP3 POP DUP4 SWAP2 POP PUSH2 0x2584 SWAP1 POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 ADD DUP11 SSTORE PUSH1 0x0 DUP11 DUP2 MSTORE SWAP2 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x20 SHL MUL SWAP2 SWAP1 SWAP4 AND OR SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP DUP2 JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0xBF26D897 PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x25BD JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x79DD796F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x25D8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x2711897 PUSH1 0xE5 SHL EQ JUMPDEST DUP1 PUSH2 0x8AF JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x8AF JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x2650 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x267A JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 DUP3 DUP5 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP4 ADD MSTORE CHAINID PUSH1 0x80 DUP4 ADD MSTORE ADDRESS PUSH1 0xA0 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x2755 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x27D9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27A9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x27D2 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x27D9 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x27F6 JUMPI PUSH2 0x27F6 PUSH2 0x32E4 JUMP JUMPDEST EQ ISZERO PUSH2 0x27FF JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2813 JUMPI PUSH2 0x2813 PUSH2 0x32E4 JUMP JUMPDEST EQ ISZERO PUSH2 0x2861 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2875 JUMPI PUSH2 0x2875 PUSH2 0x32E4 JUMP JUMPDEST EQ ISZERO PUSH2 0x28C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x28D7 JUMPI PUSH2 0x28D7 PUSH2 0x32E4 JUMP JUMPDEST EQ ISZERO PUSH2 0xA4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP5 MSTORE PUSH1 0x3 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x29B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74696E6753696D706C653A20766F746520616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x191E4818D85CDD PUSH1 0xCA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0xFF AND DUP5 PUSH1 0xFF AND EQ ISZERO PUSH2 0x2A09 JUMPI DUP3 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x29FE SWAP2 SWAP1 PUSH2 0x394E JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x1A4B SWAP1 POP JUMP JUMPDEST PUSH1 0xFF DUP5 AND PUSH1 0x1 EQ ISZERO PUSH2 0x2A29 JUMPI DUP3 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x29FE SWAP2 SWAP1 PUSH2 0x394E JUMP JUMPDEST PUSH1 0xFF DUP5 AND PUSH1 0x2 EQ ISZERO PUSH2 0x2A49 JUMPI DUP3 DUP2 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x29FE SWAP2 SWAP1 PUSH2 0x394E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F72566F74696E6753696D706C653A20696E76616C6964207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x6C756520666F7220656E756D20566F746554797065 PUSH1 0x58 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DUP2 SWAP1 DIV PUSH1 0xF SIGNEXTEND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP1 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 DUP2 AND SWAP4 SWAP1 SWAP2 ADD AND MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH4 0xE38335E5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xE38335E5 SWAP1 CALLVALUE SWAP1 PUSH2 0x2B26 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x0 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x3892 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2B53 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109F DUP3 DUP5 PUSH2 0x3C03 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x2B8F JUMPI POP PUSH1 0x7 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2BAA JUMPI POP PUSH1 0x2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BB5 DUP5 PUSH2 0xDCF JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2C04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20756E6B6E6F776E2070726F706F73616C206964000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x9F0 JUMP JUMPDEST NUMBER DUP2 LT PUSH2 0x2C15 JUMPI POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C20 DUP6 PUSH2 0x1201 JUMP JUMPDEST SWAP1 POP NUMBER DUP2 LT PUSH2 0x2C34 JUMPI POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2C3D DUP6 PUSH2 0x2D67 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2C5C JUMPI POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD GT JUMPDEST ISZERO PUSH2 0x2C6C JUMPI POP PUSH1 0x4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP PUSH1 0x3 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x2CCD JUMPI PUSH1 0x0 PUSH2 0x2C8E DUP5 DUP5 PUSH2 0x2D9E JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH4 0xFFFFFFFF DUP7 AND SWAP1 DUP3 ADD SLOAD PUSH4 0xFFFFFFFF AND GT ISZERO PUSH2 0x2CB9 JUMPI DUP1 SWAP3 POP PUSH2 0x2CC7 JUMP JUMPDEST PUSH2 0x2CC4 DUP2 PUSH1 0x1 PUSH2 0x394E JUMP JUMPDEST SWAP4 POP JUMPDEST POP PUSH2 0x2C7A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1516 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2036 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x342062697473 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x9F0 JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x2D4D JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F0 SWAP2 SWAP1 PUSH2 0x3003 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH2 0x2D89 SWAP2 SWAP1 PUSH2 0x394E JUMP JUMPDEST PUSH2 0x2D95 PUSH2 0x852 DUP6 PUSH2 0xDCF JUMP JUMPDEST GT ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DAD PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x3C03 JUMP JUMPDEST PUSH2 0x109F SWAP1 DUP5 DUP5 AND PUSH2 0x394E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2DCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x109F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2DF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2E0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2E22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1549 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2E78 JUMPI PUSH2 0x2E78 PUSH2 0x2E3A JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT ISZERO PUSH2 0x2E99 JUMPI PUSH2 0x2E99 PUSH2 0x2E3A JUMP JUMPDEST PUSH2 0x2EAC PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x2E50 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x2EC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2EE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x109F DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x2E80 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x2F13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD SWAP8 POP PUSH2 0x2F23 PUSH1 0x20 DUP11 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2F3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F4B DUP13 DUP4 DUP14 ADD PUSH2 0x2DF9 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2F64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F71 DUP12 DUP3 DUP13 ADD PUSH2 0x2ED7 JUMP JUMPDEST SWAP5 POP POP PUSH2 0x2F80 PUSH1 0x80 DUP11 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2FAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2FDC JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x2FC0 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x2FEE JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x109F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2FB6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3041 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x304C DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x305C DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x307E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x308A DUP8 DUP3 DUP9 ADD PUSH2 0x2ED7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x30AF JUMPI PUSH2 0x30AF PUSH2 0x2E3A JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x30CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x30DF PUSH2 0x30DA DUP4 PUSH2 0x3096 JUMP JUMPDEST PUSH2 0x2E50 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x30FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3122 JUMPI DUP1 CALLDATALOAD PUSH2 0x3115 DUP2 PUSH2 0x3016 JUMP JUMPDEST DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3102 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x313E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x314E PUSH2 0x30DA DUP4 PUSH2 0x3096 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x316D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3122 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x3171 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH2 0x31A9 PUSH2 0x30DA DUP4 PUSH2 0x3096 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x5 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 0x31C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3122 JUMPI DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x31EB JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x31F9 DUP10 DUP7 DUP4 DUP12 ADD ADD PUSH2 0x2ED7 JUMP JUMPDEST DUP5 MSTORE POP SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 0x31CC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x321D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3234 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3240 DUP9 DUP4 DUP10 ADD PUSH2 0x30B9 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3262 DUP9 DUP4 DUP10 ADD PUSH2 0x312D JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3285 DUP8 DUP3 DUP9 ADD PUSH2 0x3188 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x32AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x32BE PUSH1 0x20 DUP8 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP4 POP PUSH2 0x32CC PUSH1 0x40 DUP8 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x8 DUP4 LT PUSH2 0x331C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3335 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3347 DUP2 PUSH2 0x3016 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x3375 PUSH1 0x20 DUP5 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3396 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x33A6 PUSH1 0x20 DUP8 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x33C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x33CE DUP10 DUP4 DUP11 ADD PUSH2 0x2DF9 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x33E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33F4 DUP9 DUP3 DUP10 ADD PUSH2 0x2ED7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH2 0x3427 PUSH1 0x20 DUP7 ADD PUSH2 0x2DE3 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x344E DUP8 DUP3 DUP9 ADD PUSH2 0x2DF9 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3470 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3487 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3493 DUP9 DUP4 DUP10 ADD PUSH2 0x30B9 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x34A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x34B5 DUP9 DUP4 DUP10 ADD PUSH2 0x312D JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x34CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x34D7 DUP9 DUP4 DUP10 ADD PUSH2 0x3188 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x34ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x34FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x308A DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2E80 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x352E DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3550 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x355C DUP7 DUP3 DUP8 ADD PUSH2 0x2ED7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x109F DUP2 PUSH2 0x3016 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x359B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x35A6 DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x35B6 DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x35D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x35DE DUP10 DUP4 DUP11 ADD PUSH2 0x312D JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x35F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3600 DUP10 DUP4 DUP11 ADD PUSH2 0x312D JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x33E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x362C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3637 DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3442 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x366C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3677 DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x369D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x36A8 DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x36B8 DUP2 PUSH2 0x3016 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x36E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x33F4 DUP9 DUP3 DUP10 ADD PUSH2 0x2ED7 JUMP JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A206F6E6C79476F7665726E616E63650000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3748 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3769 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A2070726F706F73616C206E6F7420737563636573736675 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0xFA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3802 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x37DD JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3802 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3821 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP1 DUP2 SWAP7 POP DUP4 PUSH1 0x5 SHL DUP2 ADD SWAP2 POP DUP3 DUP7 ADD PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3885 JUMPI DUP3 DUP5 SUB DUP10 MSTORE PUSH2 0x3873 DUP5 DUP4 MLOAD PUSH2 0x2FB6 JUMP JUMPDEST SWAP9 DUP6 ADD SWAP9 SWAP4 POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x385B JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x38A5 PUSH1 0xA0 DUP4 ADD DUP9 PUSH2 0x37C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x38B7 DUP2 DUP9 PUSH2 0x380D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x38CB DUP2 DUP8 PUSH2 0x383D JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x38F3 PUSH1 0xC0 DUP4 ADD DUP10 PUSH2 0x37C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3905 DUP2 DUP10 PUSH2 0x380D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3919 DUP2 DUP9 PUSH2 0x383D JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x80 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x3961 JUMPI PUSH2 0x3961 PUSH2 0x3938 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3978 JUMPI PUSH2 0x3978 PUSH2 0x3938 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x39A6 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x37C9 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x39B8 DUP2 DUP8 PUSH2 0x380D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x39CC DUP2 DUP7 PUSH2 0x383D JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0xFF DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x106E PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2FB6 JUMP JUMPDEST DUP6 DUP2 MSTORE PUSH1 0xFF DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE DUP4 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x3A2E PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x2FB6 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x3A40 DUP2 DUP6 PUSH2 0x2FB6 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3A60 JUMPI PUSH2 0x3A60 PUSH2 0x3938 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3A81 JUMPI PUSH2 0x3A81 PUSH2 0x3938 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x109F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x476F7665726E6F723A20696E76616C69642070726F706F73616C206C656E6774 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0xFB SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 AND DUP2 DUP6 AND DUP1 DUP4 SUB DUP3 GT ISZERO PUSH2 0x3B0B JUMPI PUSH2 0x3B0B PUSH2 0x3938 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP12 DUP4 MSTORE PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP13 AND DUP2 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x3B3D DUP3 DUP6 ADD DUP13 PUSH2 0x37C9 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x3B51 DUP3 DUP12 PUSH2 0x380D JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x80 DUP6 ADD MSTORE DUP2 DUP10 MLOAD DUP1 DUP5 MSTORE DUP3 DUP5 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP6 ADD ADD DUP4 DUP13 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3BA2 JUMPI PUSH1 0x1F NOT DUP8 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x3B90 DUP4 DUP4 MLOAD PUSH2 0x2FB6 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3B74 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0xA0 DUP9 ADD MSTORE PUSH2 0x3BB6 DUP2 DUP13 PUSH2 0x383D JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x3BD1 PUSH1 0xC0 DUP5 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP6 AND PUSH1 0xE0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x3BF3 DUP2 DUP6 PUSH2 0x2FB6 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3C20 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP INVALID SELFBALANCE PUSH16 0x7665726E6F723A2072656C6179207265 PUSH23 0x657274656420776974686F7574206D657373616765A264 PUSH10 0x70667358221220ACBFF8 JUMPDEST 0xD0 ADDRESS MSTORE8 DUP3 0xCE ADD GASPRICE 0x1F JUMPI NUMBER 0xBF 0xBD GASLIMIT 0xA9 DUP13 DUP4 RETURN 0xC4 0xBF GAS PUSH18 0xD76DD28AC79C7364736F6C634300080C0033 ",
          "sourceMap": "670:4014:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3749:4:4;3726:11;:9;:11::i;:::-;-1:-1:-1;;;;;3726:28:4;;3718:37;;;;;;670:4014:34;;;;;3646:190;;;;;;;;;;-1:-1:-1;3646:190:34;;;;;:::i;:::-;;:::i;:::-;;;470:14:53;;463:22;445:41;;433:2;418:18;3646:190:34;;;;;;;;1697:148;;;;;;;;;;;;;:::i;:::-;;;643:25:53;;;631:2;616:18;1697:148:34;497:177:53;16332:784:4;;;;;;;;;;-1:-1:-1;16332:784:4;;;;;:::i;:::-;;:::i;3127:150:11:-;;;;;;;;;;-1:-1:-1;3127:150:11;;;;;:::i;:::-;;:::i;4623:98:4:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;19868:200::-;;;;;;;;;;-1:-1:-1;19868:200:4;;;;;:::i;:::-;-1:-1:-1;;;19868:200:4;;;;;;;;;;-1:-1:-1;;;;;;5079:33:53;;;5061:52;;5049:2;5034:18;19868:200:4;4917:202:53;3610:739:9;;;;;;;;;;-1:-1:-1;3610:739:9;;;;;:::i;:::-;;:::i;10757:867:4:-;;;;;;:::i;:::-;;:::i;7171:163::-;;;;;;;;;;-1:-1:-1;7171:163:4;;;;;:::i;:::-;;:::i;1341:147::-;;;;;;;;;;;;1400:88;1341:147;;1547:146:34;;;;;;;;;;;;;:::i;15821:427:4:-;;;;;;;;;;-1:-1:-1;15821:427:4;;;;;:::i;:::-;;:::i;2288:174:34:-;;;;;;;;;;-1:-1:-1;2288:174:34;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1039:167:7:-;;;;;;;;;;-1:-1:-1;1039:167:7;;;;;:::i;:::-;1132:4;1155:26;;;:14;:26;;;;;;;;-1:-1:-1;;;;;1155:44:7;;;;:35;;:44;;;;;;;;1039:167;;;;;1278:389;;;;;;;;;;-1:-1:-1;1278:389:7;;;;;:::i;:::-;1395:20;1540:26;;;:14;:26;;;;;1584:25;;1611:21;;;;1634:25;;;;;1584;;1278:389;;;;;10164:25:53;;;10220:2;10205:18;;10198:34;;;;10248:18;;;10241:34;10152:2;10137:18;1278:389:7;9962:319:53;4780:99:4;;;;;;;;;;-1:-1:-1;4862:10:4;;;;;;;;;;;;-1:-1:-1;;;4862:10:4;;;;4780:99;;14831:198;;;;;;;;;;-1:-1:-1;14831:198:4;;;;;:::i;:::-;;:::i;15444:312::-;;;;;;;;;;-1:-1:-1;15444:312:4;;;;;:::i;:::-;;:::i;1664:649:11:-;;;;;;;;;;-1:-1:-1;1664:649:11;;;;;:::i;:::-;;:::i;1738:126:8:-;;;;;;;;;;-1:-1:-1;1738:126:8;;;;;:::i;:::-;;:::i;15099:266:4:-;;;;;;;;;;-1:-1:-1;15099:266:4;;;;;:::i;:::-;;:::i;2466:268:34:-;;;;;;;;;;-1:-1:-1;2466:268:34;;;;;:::i;:::-;;:::i;2419:94:11:-;;;;;;;;;;-1:-1:-1;2503:3:11;2419:94;;14544:227:4;;;;;;;;;;-1:-1:-1;14544:227:4;;;;;:::i;:::-;;:::i;1357:191:11:-;;;;;;;;;;;;;:::i;6247:133:9:-;;;;;;;;;;-1:-1:-1;6247:133:9;;;;;:::i;:::-;;:::i;3271:259::-;;;;;;;;;;-1:-1:-1;3271:259:9;;;;;:::i;:::-;;:::i;2738:157:34:-;;;;;;;;;;;;;:::i;20444:247:4:-;;;;;;;;;;-1:-1:-1;20444:247:4;;;;;:::i;:::-;-1:-1:-1;;;20444:247:4;;;;;;;;7402:161;;;;;;;;;;-1:-1:-1;7402:161:4;;;;;:::i;:::-;;:::i;19182:326::-;;;;;;:::i;:::-;;:::i;5824:308::-;;;;;;;;;;-1:-1:-1;5824:308:4;;;;;:::i;:::-;;:::i;3074:109:9:-;;;;;;;;;;-1:-1:-1;3166:9:9;;-1:-1:-1;;;;;3166:9:9;3074:109;;;-1:-1:-1;;;;;15696:32:53;;;15678:51;;15666:2;15651:18;3074:109:9;15532:203:53;843:136:7;;;;;;;;;;-1:-1:-1;931:41:7;;;;;;;;;;;;;;;;;;843:136;;1240:95:4;;;;;;;;;;;;1282:53;1240:95;;2039:130:8;;;;;;;;;;-1:-1:-1;2039:130:8;;;;;:::i;:::-;;:::i;2096:188:34:-;;;;;;;;;;-1:-1:-1;2096:188:34;;;;;:::i;:::-;;:::i;2354:150:8:-;;;;;;;;;;-1:-1:-1;2354:150:8;;;;;:::i;:::-;;:::i;20144:219:4:-;;;;;;;;;;-1:-1:-1;20144:219:4;;;;;:::i;:::-;-1:-1:-1;;;20144:219:4;;;;;;;;1915:177:34;;;;;;;;;;-1:-1:-1;1915:177:34;;;;;:::i;:::-;;:::i;420:29:10:-;;;;;;;;;;;;;;;3492:150:34;3596:7;3620:17;3166:9:9;;-1:-1:-1;;;;;3166:9:9;;3074:109;3620:17:34;3613:24;;3492:150;:::o;3646:190::-;3774:4;3795:36;3819:11;3795:23;:36::i;:::-;3788:43;3646:190;-1:-1:-1;;3646:190:34:o;1697:148::-;1796:7;1820:20;1359:13:8;;;1271:108;16332:784:4;16580:7;16599:13;16615:423;16642:341;1400:88;16793:10;16829:7;16878:6;;16862:24;;;;;;;:::i;:::-;;;;;;;;16922:6;16912:17;;;;;;16707:244;;;;;;;;;;;17553:25:53;;;17609:2;17594:18;;17587:34;;;;17669:4;17657:17;;;;17652:2;17637:18;;17630:45;17706:2;17691:18;;17684:34;17749:3;17734:19;;17727:35;17540:3;17525:19;;17298:470;16707:244:4;;;;;;;;;;;;;16676:293;;;;;;16642:16;:341::i;:::-;16997:1;17012;17027;16615:13;:423::i;:::-;16599:439;;17056:53;17066:10;17078:5;17085:7;17094:6;;17056:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17102:6:4;;-1:-1:-1;17056:9:4;;-1:-1:-1;;17056:53:4:i;:::-;17049:60;16332:784;-1:-1:-1;;;;;;;;;;16332:784:4:o;3127:150:11:-;3023:11:4;:9;:11::i;:::-;-1:-1:-1;;;;;3007:27:4;719:10:22;-1:-1:-1;;;;;3007:27:4;;2999:64;;;;-1:-1:-1;;;2999:64:4;;;;;;;:::i;:::-;;;;;;;;;3100:4;3077:11;:9;:11::i;:::-;-1:-1:-1;;;;;3077:28:4;;3073:277;;3121:19;;793:14:22;3143:21:4;;;;;;;:::i;:::-;;;;;;;;3121:43;;3288:52;3325:11;3295:26;:15;:24;:26::i;:::-;:41;3288:52;;;;;3107:243;3073:277;3228:42:11::1;3251:18;3228:22;:42::i;:::-;3127:150:::0;:::o;4623:98:4:-;4677:13;4709:5;4702:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4623:98;:::o;3610:739:9:-;3798:7;3817:18;3838:57;3851:7;3860:6;3868:9;3879:15;3838:12;:57::i;:::-;3817:78;-1:-1:-1;3935:23:9;3914:17;3920:10;3914:5;:17::i;:::-;:44;;;;;;;;:::i;:::-;;3906:90;;;;-1:-1:-1;;;3906:90:9;;;;;;;:::i;:::-;4023:9;;:23;;;-1:-1:-1;;;4023:23:9;;;;4007:13;;-1:-1:-1;;;;;4023:9:9;;:21;;:23;;;;;;;;;;;;;;:9;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4083:9;;:76;;-1:-1:-1;;;4083:76:9;;4007:39;;-1:-1:-1;;;;;;4083:9:9;;:28;;:76;;4112:7;;4121:6;;4129:9;;4083;;4143:15;;4083:76;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4056:24;;;;:12;:24;;;;;;:103;;;;4169:9;;:78;;-1:-1:-1;;;4169:78:9;;-1:-1:-1;;;;;4169:9:9;;;;:23;;:78;;4193:7;;4202:6;;4210:9;;4056:24;4224:15;;4241:5;;4169:78;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4263:51;4278:10;4308:5;4290:15;:23;;;;:::i;:::-;4263:51;;;23014:25:53;;;23070:2;23055:18;;23048:34;;;;22987:18;4263:51:9;;;;;;;-1:-1:-1;4332:10:9;3610:739;-1:-1:-1;;;;;3610:739:9:o;10757:867:4:-;10955:7;10974:18;10995:57;11008:7;11017:6;11025:9;11036:15;10995:12;:57::i;:::-;10974:78;;11063:20;11086:17;11092:10;11086:5;:17::i;:::-;11063:40;-1:-1:-1;11144:23:4;11134:6;:33;;;;;;;;:::i;:::-;;:67;;;-1:-1:-1;11181:20:4;11171:6;:30;;;;;;;;:::i;:::-;;11134:67;11113:147;;;;-1:-1:-1;;;11113:147:4;;;;;;;:::i;:::-;11270:22;;;;11304:4;11270:22;;;;;;;;;:31;;:38;;-1:-1:-1;;11270:38:4;;;;;;;11324:28;;643:25:53;;;11324:28:4;;616:18:53;11324:28:4;;;;;;;11363:71;11378:10;11390:7;11399:6;11407:9;11418:15;11363:14;:71::i;:::-;11444:65;11453:10;11465:7;11474:6;11482:9;11493:15;11444:8;:65::i;:::-;11519:70;11533:10;11545:7;11554:6;11562:9;11573:15;11519:13;:70::i;:::-;-1:-1:-1;11607:10:4;10757:867;-1:-1:-1;;;;;10757:867:4:o;7171:163::-;7255:7;7281:22;;;:10;:22;;;;;;;;:44;;;;;;;;;-1:-1:-1;;;;;7281:44:4;;;;;:46;-1:-1:-1;;;;;7274:53:4;;7171:163;-1:-1:-1;;7171:163:4:o;1547:146:34:-;1645:7;1669:19;1188:12:8;;;1101:106;15821:427:4;16078:48;;;1282:53;16078:48;;;23291:25:53;23332:18;;;23325:34;;;23407:4;23395:17;;23375:18;;;23368:45;15989:7:4;;;;16024:159;;16051:77;;23264:18:53;;16078:48:4;23093:326:53;16024:159:4;16008:175;;16200:41;16210:10;16222:5;16229:7;16200:41;;;;;;;;;;;;:9;:41::i;:::-;16193:48;15821:427;-1:-1:-1;;;;;;;15821:427:4:o;2288:174:34:-;2404:13;2434:23;2446:10;2434:11;:23::i;14831:198:4:-;14917:7;;719:10:22;14936:28:4;;14981:41;14991:10;15003:5;15010:7;14981:41;;;;;;;;;;;;:9;:41::i;:::-;14974:48;14831:198;-1:-1:-1;;;;14831:198:4:o;15444:312::-;15632:7;;719:10:22;15651:28:4;;15696:53;15706:10;15718:5;15725:7;15734:6;;15696:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15742:6:4;;-1:-1:-1;15696:9:4;;-1:-1:-1;;15696:53:4:i;1664:649:11:-;1831:23;:43;1739:7;;1888:11;1884:65;;-1:-1:-1;;1922:16:11;;;1664:649;-1:-1:-1;1664:649:11:o;1884:65::-;2017:36;2056:23;2093:10;2102:1;2093:6;:10;:::i;:::-;2056:48;;;;;;;;:::i;:::-;;;;;;;;;;2017:87;;;;;;;;;2056:48;;2017:87;;;;;;;-1:-1:-1;;;2017:87:11;;;-1:-1:-1;;;;;2017:87:11;;;;;;;;;-1:-1:-1;;;2114:85:11;;2175:13;;;-1:-1:-1;;;;;2168:20:11;;1664:649;-1:-1:-1;;;1664:649:11:o;2114:85::-;2259:47;:23;2294:11;2259:34;:47::i;1738:126:8:-;3023:11:4;:9;:11::i;:::-;-1:-1:-1;;;;;3007:27:4;719:10:22;-1:-1:-1;;;;;3007:27:4;;2999:64;;;;-1:-1:-1;;;2999:64:4;;;;;;;:::i;:::-;3100:4;3077:11;:9;:11::i;:::-;-1:-1:-1;;;;;3077:28:4;;3073:277;;3121:19;;793:14:22;3143:21:4;;;;;;;:::i;:::-;;;;;;;;3121:43;;3288:52;3325:11;3295:26;:15;:24;:26::i;:::-;:41;3288:52;;;;;3107:243;3073:277;1826:31:8::1;1842:14;1826:15;:31::i;15099:266:4:-:0;15249:7;;719:10:22;15268:28:4;;15313:45;15323:10;15335:5;15342:7;15351:6;;15313:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15313:9:4;;-1:-1:-1;;;15313:45:4:i;:::-;15306:52;15099:266;-1:-1:-1;;;;;;15099:266:4:o;2466:268:34:-;2653:7;2675:54;2689:7;2698:6;2706:9;2717:11;2675:13;:54::i;:::-;2668:61;2466:268;-1:-1:-1;;;;;2466:268:34:o;14544:227:4:-;14699:7;14725:39;14735:7;14744:11;14757:6;14725:9;:39::i;:::-;14718:46;;14544:227;;;;;;:::o;1357:191:11:-;1439:23;:43;1413:7;;1439:48;:102;;1509:32;:23;:30;:32::i;:::-;-1:-1:-1;;;;;1439:102:11;3613:24:34;;3492:150;:::o;1439:102:11:-;-1:-1:-1;1490:16:11;;;1357:191::o;6247:133:9:-;3023:11:4;:9;:11::i;:::-;-1:-1:-1;;;;;3007:27:4;719:10:22;-1:-1:-1;;;;;3007:27:4;;2999:64;;;;-1:-1:-1;;;2999:64:4;;;;;;;:::i;:::-;3100:4;3077:11;:9;:11::i;:::-;-1:-1:-1;;;;;3077:28:4;;3073:277;;3121:19;;793:14:22;3143:21:4;;;;;;;:::i;:::-;;;;;;;;3121:43;;3288:52;3325:11;3295:26;:15;:24;:26::i;:::-;:41;3288:52;;;;;3107:243;3073:277;6345:28:9::1;6361:11;6345:15;:28::i;3271:259::-:0;3383:9;;3350:7;3406:24;;;:12;:24;;;;;;;3383:48;;-1:-1:-1;;;3383:48:9;;;;;643:25:53;;;;3350:7:9;;;;-1:-1:-1;;;;;3383:9:9;;;;:22;;616:18:53;;3383:48:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3369:62;;3448:3;3455:1;3448:8;:18;;3463:3;3448:18;;;3459:1;3441:25;3271:259;-1:-1:-1;;;3271:259:9:o;2738:157:34:-;2841:7;2865:25;1540:18:8;;;1447:118;7402:161:4;7486:7;7512:22;;;:10;:22;;;;;;;;:42;;;;;;;;:30;;;:42;-1:-1:-1;;;;;7512:42:4;;;;;:44;1170:117:24;19182:326:4;3023:11;:9;:11::i;:::-;-1:-1:-1;;;;;3007:27:4;719:10:22;-1:-1:-1;;;;;3007:27:4;;2999:64;;;;-1:-1:-1;;;2999:64:4;;;;;;;:::i;:::-;3100:4;3077:11;:9;:11::i;:::-;-1:-1:-1;;;;;3077:28:4;;3073:277;;3121:19;;793:14:22;3143:21:4;;;;;;;:::i;:::-;;;;;;;;3121:43;;3288:52;3325:11;3295:26;:15;:24;:26::i;:::-;:41;3288:52;;;;;3107:243;3073:277;19330:12:::1;19344:23:::0;19371:6:::1;-1:-1:-1::0;;;;;19371:11:4::1;19390:5;19397:4;;19371:31;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19329:73;;;;19412:89;19437:7;19446:10;19412:89;;;;;;;;;;;;;;;;;:24;:89::i;:::-;;19319:189;;19182:326:::0;;;;:::o;5824:308::-;6024:7;6079;6088:6;6096:9;6107:15;6068:55;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;6068:55:4;;;;;;;;;6058:66;;6068:55;6058:66;;;;;5824:308;-1:-1:-1;;;;;5824:308:4:o;2039:130:8:-;3023:11:4;:9;:11::i;:::-;-1:-1:-1;;;;;3007:27:4;719:10:22;-1:-1:-1;;;;;3007:27:4;;2999:64;;;;-1:-1:-1;;;2999:64:4;;;;;;;:::i;:::-;3100:4;3077:11;:9;:11::i;:::-;-1:-1:-1;;;;;3077:28:4;;3073:277;;3121:19;;793:14:22;3143:21:4;;;;;;;:::i;:::-;;;;;;;;3121:43;;3288:52;3325:11;3295:26;:15;:24;:26::i;:::-;:41;3288:52;;;;;3107:243;3073:277;2129:33:8::1;2146:15;2129:16;:33::i;2096:188:34:-:0;2219:7;2243:36;2258:7;2267:11;2243:14;:36::i;2354:150:8:-;3023:11:4;:9;:11::i;:::-;-1:-1:-1;;;;;3007:27:4;719:10:22;-1:-1:-1;;;;;3007:27:4;;2999:64;;;;-1:-1:-1;;;2999:64:4;;;;;;;:::i;:::-;3100:4;3077:11;:9;:11::i;:::-;-1:-1:-1;;;;;3077:28:4;;3073:277;;3121:19;;793:14:22;3143:21:4;;;;;;;:::i;:::-;;;;;;;;3121:43;;3288:52;3325:11;3295:26;:15;:24;:26::i;:::-;:41;3288:52;;;;;3107:243;3073:277;2454:43:8::1;2476:20;2454:21;:43::i;1915:177:34:-:0;2038:7;2062:25;2075:11;2062:12;:25::i;2836:192:30:-;2893:7;-1:-1:-1;;;;;2920:26:30;;;2912:78;;;;-1:-1:-1;;;2912:78:30;;24651:2:53;2912:78:30;;;24633:21:53;24690:2;24670:18;;;24663:30;24729:34;24709:18;;;24702:62;-1:-1:-1;;;24780:18:53;;;24773:37;24827:19;;2912:78:30;24449:403:53;2912:78:30;-1:-1:-1;3015:5:30;2836:192::o;3000:197:21:-;3069:7;;3104:86;3112:4;3131:31;3149:12;3131:17;:31::i;:::-;3164:25;3183:5;3164:18;:25::i;:::-;3104:7;:86::i;:::-;-1:-1:-1;;;;;3097:93:21;;;;-1:-1:-1;3097:93:21;;-1:-1:-1;3000:197:21;;;;;;:::o;3779:205::-;3873:24;;3840:7;;3914:8;;:63;;3929:41;3943:4;3962:7;3968:1;3962:3;:7;:::i;:::-;7653:25;7713:20;;;7778:4;7765:18;;;7761:28;;7568:237;3929:41;:48;-1:-1:-1;;;3929:48:21;;-1:-1:-1;;;;;3929:48:21;3914:63;;15264:187:30;15320:6;15355:16;15346:25;;;15338:76;;;;-1:-1:-1;;;15338:76:30;;25059:2:53;15338:76:30;;;25041:21:53;25098:2;25078:18;;;25071:30;25137:34;25117:18;;;25110:62;-1:-1:-1;;;25188:18:53;;;25181:36;25234:19;;15338:76:30;24857:402:53;1886:224:9;1990:4;-1:-1:-1;;;;;;2013:50:9;;-1:-1:-1;;;2013:50:9;;:90;;;2067:36;2091:11;2067:23;:36::i;4348:165:26:-;4425:7;4451:55;4473:20;:18;:20::i;:::-;4495:10;8470:57:25;;-1:-1:-1;;;8470:57:25;;;34176:27:53;34219:11;;;34212:27;;;34255:12;;;34248:28;;;8434:7:25;;34292:12:53;;8470:57:25;;;;;;;;;;;;8460:68;;;;;;8453:75;;8341:194;;;;;6696:270;6819:7;6839:17;6858:18;6880:25;6891:4;6897:1;6900;6903;6880:10;:25::i;:::-;6838:67;;;;6915:18;6927:5;6915:11;:18::i;17962:769:4:-;18148:7;18199:22;;;:10;:22;;;;;;;;18239:17;18245:10;18239:5;:17::i;:::-;:41;;;;;;;;:::i;:::-;;18231:89;;;;-1:-1:-1;;;18231:89:4;;25466:2:53;18231:89:4;;;25448:21:53;25505:2;25485:18;;;25478:30;25544:34;25524:18;;;25517:62;-1:-1:-1;;;25595:18:53;;;25588:33;25638:19;;18231:89:4;25264:399:53;18231:89:4;18367:30;;;;;;;;;;;-1:-1:-1;;;;;18367:30:4;;;;;-1:-1:-1;;18348:60:4;;18358:7;;18401:6;18348:9;:60::i;:::-;18331:77;;18418:56;18429:10;18441:7;18450;18459:6;18467;18418:10;:56::i;:::-;18489:13;;18485:216;;18537:7;-1:-1:-1;;;;;18528:54:4;;18546:10;18558:7;18567:6;18575;18528:54;;;;;;;;;:::i;:::-;;;;;;;;18485:216;;;18637:7;-1:-1:-1;;;;;18618:72:4;;18646:10;18658:7;18667:6;18675;18683;18618:72;;;;;;;;;;:::i;:::-;;;;;;;;18718:6;17962:769;-1:-1:-1;;;;;;;17962:769:4:o;3287:324:32:-;3351:13;3380:12;3386:5;5880:12;;;;;-1:-1:-1;;;5866:10:32;;;;;:26;;;5777:122;3380:12;3376:32;;;3401:7;;-1:-1:-1;;;3401:7:32;;;;;;;;;;;3376:32;-1:-1:-1;3438:12:32;;;;3418:17;3468:23;;;3438:12;3468:11;;;:23;;;;;;;3501:30;;;3565:29;;-1:-1:-1;;3565:29:32;3580:14;;-1:-1:-1;;;;;3565:29:32;;;;;;;;3468:23;3287:324::o;3498:887:11:-;2503:3;3606:18;:41;;3585:155;;;;-1:-1:-1;;;3585:155:11;;26926:2:53;3585:155:11;;;26908:21:53;26965:2;26945:18;;;26938:30;27004:34;26984:18;;;26977:62;27075:34;27055:18;;;27048:62;-1:-1:-1;;;27126:19:53;;;27119:34;27170:19;;3585:155:11;26724:471:53;3585:155:11;3751:26;3780:17;:15;:17::i;:::-;3751:46;-1:-1:-1;3931:23:11;;;;;:75;;-1:-1:-1;3958:23:11;:43;:48;3931:75;3927:268;;;4081:89;;;;;;;;;4022:36;4081:89;;4022:23;;4081:89;;;4130:38;4149:18;4130;:38::i;:::-;-1:-1:-1;;;;;4081:89:11;;;;;;4022:162;;;;;;;-1:-1:-1;4022:162:11;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4022:162:11;;;;;;;;;;;;3927:268;4252:48;:23;4281:18;4252:28;:48::i;:::-;-1:-1:-1;;4316:62:11;;;23014:25:53;;;23070:2;23055:18;;23048:34;;;4316:62:11;;22987:18:53;4316:62:11;;;;;;;3575:810;3498:887;:::o;12360:499:4:-;12622:4;12599:11;:9;:11::i;:::-;-1:-1:-1;;;;;12599:28:4;;12595:258;;12648:9;12643:200;12667:7;:14;12663:1;:18;12643:200;;;12732:4;-1:-1:-1;;;;;12710:27:4;:7;12718:1;12710:10;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;12710:27:4;;12706:123;;;12761:49;12796:9;12806:1;12796:12;;;;;;;;:::i;:::-;;;;;;;12786:23;;;;;;12761:15;:24;;:49;;;;:::i;:::-;12683:3;;;:::i;:::-;;;12643:200;;;;12595:258;12360:499;;;;;:::o;2899:299:34:-;3122:71;3137:10;3149:7;3158:6;3166:9;3177:15;3122:14;:71::i;12928:396:4:-;13201:4;13178:11;:9;:11::i;:::-;-1:-1:-1;;;;;13178:28:4;;13174:144;;13227:15;5880:12:32;;;;;-1:-1:-1;;;5866:10:32;;;;;:26;;13222:86:4;;5236:1:32;13270:15:4;5247:14:32;13270:23:4;5159:109:32;3856:826:34;4014:7;4033:18;4054:71;4070:10;4082:7;4091;4100:6;4108:16;9215:9:4;;;;;;;;;-1:-1:-1;9215:9:4;;;9134:97;4108:16:34;4054:15;:71::i;:::-;4197:20;;4033:92;;-1:-1:-1;4166:13:34;;-1:-1:-1;;;;;4197:20:34;4182:46;719:10:22;4182:60:34;;-1:-1:-1;;;;;;4182:60:34;;;;;;;-1:-1:-1;;;;;15696:32:53;;;4182:60:34;;;15678:51:53;15651:18;;4182:60:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4166:76;-1:-1:-1;4352:6:34;4333:16;4397:3;4389:11;;:25;;4409:5;4389:25;;;4403:3;4389:25;4368:46;-1:-1:-1;4424:22:34;4477:8;4450:24;4463:11;4368:46;4450:24;:::i;:::-;:35;;;;:::i;:::-;4424:62;-1:-1:-1;4496:18:34;4517:23;4424:62;4536:3;4517:18;:23::i;:::-;4567:16;;4496:44;;-1:-1:-1;;;;;;4567:16:34;4560:37;4606:4;719:10:22;4560:79:34;;-1:-1:-1;;;;;;4560:79:34;;;;;;;-1:-1:-1;;;;;27771:15:53;;;4560:79:34;;;27753:34:53;27823:15;;27803:18;;;27796:43;27855:18;;;27848:34;;;27688:18;;4560:79:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4665:10:34;;3856:826;-1:-1:-1;;;;;;;;;;3856:826:34:o;2240:747:9:-;2334:13;2359:20;2382:23;2394:10;2382:11;:23::i;:::-;2359:46;-1:-1:-1;2430:23:9;2420:6;:33;;;;;;;;:::i;:::-;;2416:77;;2476:6;2240:747;-1:-1:-1;;2240:747:9:o;2416:77::-;2603:15;2621:24;;;:12;:24;;;;;;2659:21;2655:326;;-1:-1:-1;2703:6:9;2240:747;-1:-1:-1;;2240:747:9:o;2655:326::-;2730:9;;:34;;-1:-1:-1;;;2730:34:9;;;;;643:25:53;;;-1:-1:-1;;;;;2730:9:9;;;;:25;;616:18:53;;2730:34:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2726:255;;;-1:-1:-1;2787:22:9;;2240:747;-1:-1:-1;;;2240:747:9:o;2726:255::-;2830:9;;:37;;-1:-1:-1;;;2830:37:9;;;;;643:25:53;;;-1:-1:-1;;;;;2830:9:9;;;;:28;;616:18:53;;2830:37:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2826:155;;;-1:-1:-1;2890:20:9;;2240:747;-1:-1:-1;;;2240:747:9:o;2826:155::-;-1:-1:-1;2948:22:9;;2240:747;-1:-1:-1;;;2240:747:9:o;1222:439:21:-;1308:7;1349:12;1335:11;:26;1327:71;;;;-1:-1:-1;;;1327:71:21;;28377:2:53;1327:71:21;;;28359:21:53;;;28396:18;;;28389:30;28455:34;28435:18;;;28428:62;28507:18;;1327:71:21;28175:356:53;1327:71:21;1408:10;1421:30;1439:11;1421:17;:30::i;:::-;1476:24;;1408:43;;-1:-1:-1;1462:11:21;1524:50;1476:4;1408:43;1462:11;1476:24;1524:18;:50::i;:::-;1510:64;-1:-1:-1;1591:8:21;;:63;;1606:41;1620:4;1639:7;1645:1;1639:3;:7;:::i;1606:41::-;:48;-1:-1:-1;;;1606:48:21;;-1:-1:-1;;;;;1606:48:21;1591:63;;;1602:1;1591:63;-1:-1:-1;;;;;1584:70:21;;1222:439;-1:-1:-1;;;;;;1222:439:21:o;2622:171:8:-;2718:12;;2703:44;;;23014:25:53;;;23070:2;23055:18;;23048:34;;;2703:44:8;;22987:18:53;2703:44:8;;;;;;;2757:12;:29;2622:171::o;9290:1408:4:-;9482:7;9566:19;:17;:19::i;:::-;9522:40;719:10:22;9545:16:4;9560:1;9545:12;:16;:::i;9522:40::-;:63;;9501:159;;;;-1:-1:-1;;;9501:159:4;;28738:2:53;9501:159:4;;;28720:21:53;28777:2;28757:18;;;28750:30;28816:34;28796:18;;;28789:62;-1:-1:-1;;;28867:18:53;;;28860:47;28924:19;;9501:159:4;28536:413:53;9501:159:4;9671:18;9692:71;9705:7;9714:6;9722:9;9749:11;9733:29;;;;;;9692:12;:71::i;:::-;9671:92;;9800:6;:13;9782:7;:14;:31;9774:77;;;;-1:-1:-1;;;9774:77:4;;;;;;;:::i;:::-;9887:9;:16;9869:7;:14;:34;9861:80;;;;-1:-1:-1;;;9861:80:4;;;;;;;:::i;:::-;9976:1;9959:7;:14;:18;9951:55;;;;-1:-1:-1;;;9951:55:4;;29558:2:53;9951:55:4;;;29540:21:53;29597:2;29577:18;;;29570:30;29636:26;29616:18;;;29609:54;29680:18;;9951:55:4;29356:348:53;9951:55:4;10017:29;10049:22;;;:10;:22;;;;;;;;;10089:26;;;;;;;;;;-1:-1:-1;;;;;10089:26:4;;;;;1600:20:24;10081:74:4;;;;-1:-1:-1;;;10081:74:4;;29911:2:53;10081:74:4;;;29893:21:53;29950:2;29930:18;;;29923:30;29989:34;29969:18;;;29962:62;-1:-1:-1;;;30040:18:53;;;30033:31;30081:19;;10081:74:4;29709:397:53;10081:74:4;10166:15;10210:24;:13;:11;:13::i;:::-;:22;:24::i;:::-;10184:23;:12;:21;:23::i;:::-;:50;;;;:::i;:::-;10166:68;;10244:15;10273:25;:14;:12;:14::i;:25::-;10262:36;;:8;:36;:::i;:::-;1378:27:24;;-1:-1:-1;;1378:27:24;-1:-1:-1;;;;;1378:27:24;;;;;10244:54:4;-1:-1:-1;10359:16:4;;;1378:27:24;;-1:-1:-1;;1378:27:24;-1:-1:-1;;;;;1378:27:24;;;;;10413:250:4;10442:10;719::22;10492:7:4;10513:6;10546:7;:14;-1:-1:-1;;;;;10533:28:4;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10575:9;10598:8;10620;10642:11;10413:250;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;10681:10:4;;9290:1408;-1:-1:-1;;;;;;;9290:1408:4:o;651:225:10:-;829:40;;-1:-1:-1;;;829:40:10;;-1:-1:-1;;;;;32540:32:53;;;829:40:10;;;32522:51:53;32589:18;;;32582:34;;;803:7:10;;829:5;:18;;;;;;32495::53;;829:40:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;6386:176:9:-;6489:9;;6466:56;;;-1:-1:-1;;;;;6489:9:9;;;32839:34:53;;32909:15;;;32904:2;32889:18;;32882:43;6466:56:9;;32774:18:53;6466:56:9;;;;;;;6532:9;:23;;-1:-1:-1;;;;;;6532:23:9;-1:-1:-1;;;;;6532:23:9;;;;;;;;;;6386:176::o;8315:295:20:-;8461:12;8489:7;8485:119;;;-1:-1:-1;8519:10:20;8512:17;;8485:119;8560:33;8568:10;8580:12;8560:7;:33::i;2913:316:8:-;3074:1;3056:15;:19;3048:71;;;;-1:-1:-1;;;3048:71:8;;33138:2:53;3048:71:8;;;33120:21:53;33177:2;33157:18;;;33150:30;33216:34;33196:18;;;33189:62;-1:-1:-1;;;33267:18:53;;;33260:37;33314:19;;3048:71:8;32936:403:53;3048:71:8;3150:13;;3134:47;;;23014:25:53;;;23070:2;23055:18;;23048:34;;;3134:47:8;;22987:18:53;3134:47:8;;;;;;;3191:13;:31;2913:316::o;14298:176:4:-;14392:7;14418:49;14428:7;14437:11;14450:16;9215:9;;;;;;;;;-1:-1:-1;9215:9:4;;;9134:97;14450:16;14418:9;:49::i;3359:213:8:-;3473:18;;3452:62;;;23014:25:53;;;23070:2;23055:18;;23048:34;;;3452:62:8;;22987:18:53;3452:62:8;;;;;;;3524:18;:41;3359:213::o;2651:200:11:-;2726:7;2503:3;2793:28;2809:11;2793:15;:28::i;:::-;2753:37;;-1:-1:-1;;;2753:37:11;;;;;643:25:53;;;2753:5:11;-1:-1:-1;;;;;2753:24:11;;;;616:18:53;;2753:37:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:68;;;;:::i;:::-;2752:92;;;;:::i;4999:879:21:-;5159:11;;5117:7;;;;5185;;5181:691;;5260:22;5285:28;5299:4;5305:7;5311:1;5305:3;:7;:::i;5285:28::-;5260:53;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5260:53:21;;;-1:-1:-1;;;;;5260:53:21;;;;;;;-1:-1:-1;5388:24:21;;;-1:-1:-1;5388:24:21;5380:60;;;;-1:-1:-1;;;5380:60:21;;33768:2:53;5380:60:21;;;33750:21:53;33807:2;33787:18;;;33780:30;33846:25;33826:18;;;33819:53;33889:18;;5380:60:21;33566:347:53;5380:60:21;5525:3;5504:24;;:4;:17;;;:24;;;5500:202;;;5586:5;5548:28;5562:4;5568:7;5574:1;5568:3;:7;:::i;5548:28::-;:43;;-1:-1:-1;;;;;5548:43:21;;;;-1:-1:-1;;;5548:43:21;;;;;;;;;;;5500:202;;;5640:46;;;;;;;;;;;;;;;-1:-1:-1;;;;;5640:46:21;;;;;;;;;;5630:57;;;;;;;-1:-1:-1;5630:57:21;;;;;;;;;;;;;;-1:-1:-1;;;5630:57:21;;;;;;;;;;5500:202;5723:11;;;;-1:-1:-1;5736:5:21;;-1:-1:-1;5715:27:21;;-1:-1:-1;5715:27:21;5181:691;-1:-1:-1;;5783:46:21;;;;;;;;;;;;;;;-1:-1:-1;;;;;5783:46:21;;;;;;;;;;5773:57;;;;;;;-1:-1:-1;5773:57:21;;;;;;;;;;;;;-1:-1:-1;;;5773:57:21;;;;;;;;;;;;-1:-1:-1;;5822:5:21;4999:879;;;;;;;:::o;3829:738:4:-;3931:4;-1:-1:-1;;;;;;4153:232:4;;-1:-1:-1;;;4153:232:4;;:290;;-1:-1:-1;;;;;;;4401:42:4;;-1:-1:-1;;;4401:42:4;4153:290;:355;;;-1:-1:-1;;;;;;;4459:49:4;;-1:-1:-1;;;4459:49:4;4153:355;:407;;;-1:-1:-1;;;;;;;;;;937:40:27;;;4524:36:4;829:155:27;3152:308:26;3205:7;3236:4;-1:-1:-1;;;;;3245:12:26;3228:29;;:66;;;;;3278:16;3261:13;:33;3228:66;3224:230;;;-1:-1:-1;3317:24:26;;3152:308::o;3224:230::-;-1:-1:-1;3642:73:26;;;3401:10;3642:73;;;;37688:25:53;;;;3413:12:26;37729:18:53;;;37722:34;3427:15:26;37772:18:53;;;37765:34;3686:13:26;37815:18:53;;;37808:34;3709:4:26;37858:19:53;;;;37851:61;;;;3642:73:26;;;;;;;;;;37660:19:53;;;;3642:73:26;;;3632:84;;;;;;3492:150:34:o;5069:1494:25:-;5195:7;;6119:66;6106:79;;6102:161;;;-1:-1:-1;6217:1:25;;-1:-1:-1;6221:30:25;6201:51;;6102:161;6374:24;;;6357:14;6374:24;;;;;;;;;34542:25:53;;;34615:4;34603:17;;34583:18;;;34576:45;;;;34637:18;;;34630:34;;;34680:18;;;34673:34;;;6374:24:25;;34514:19:53;;6374:24:25;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6374:24:25;;-1:-1:-1;;6374:24:25;;;-1:-1:-1;;;;;;;6412:20:25;;6408:101;;6464:1;6468:29;6448:50;;;;;;;6408:101;6527:6;-1:-1:-1;6535:20:25;;-1:-1:-1;5069:1494:25;;;;;;;;:::o;570:511::-;647:20;638:5;:29;;;;;;;;:::i;:::-;;634:441;;;570:511;:::o;634:441::-;743:29;734:5;:38;;;;;;;;:::i;:::-;;730:345;;;788:34;;-1:-1:-1;;;788:34:25;;34920:2:53;788:34:25;;;34902:21:53;34959:2;34939:18;;;34932:30;34998:26;34978:18;;;34971:54;35042:18;;788:34:25;34718:348:53;730:345:25;852:35;843:5;:44;;;;;;;;:::i;:::-;;839:236;;;903:41;;-1:-1:-1;;;903:41:25;;35273:2:53;903:41:25;;;35255:21:53;35312:2;35292:18;;;35285:30;35351:33;35331:18;;;35324:61;35402:18;;903:41:25;35071:355:53;839:236:25;974:30;965:5;:39;;;;;;;;:::i;:::-;;961:114;;;1020:44;;-1:-1:-1;;;1020:44:25;;35633:2:53;1020:44:25;;;35615:21:53;35672:2;35652:18;;;35645:30;35711:34;35691:18;;;35684:62;-1:-1:-1;;;35762:18:53;;;35755:32;35804:19;;1020:44:25;35431:398:53;2518:812:7;2712:33;2748:26;;;:14;:26;;;;;;;;-1:-1:-1;;;;;2794:30:7;;;;:21;;;:30;;;;;;;;;2793:31;2785:83;;;;-1:-1:-1;;;2785:83:7;;36036:2:53;2785:83:7;;;36018:21:53;36075:2;36055:18;;;36048:30;36114:34;36094:18;;;36087:62;-1:-1:-1;;;36165:18:53;;;36158:37;36212:19;;2785:83:7;35834:403:53;2785:83:7;-1:-1:-1;;;;;2878:30:7;;;;;;:21;;;:30;;;;;:37;;-1:-1:-1;;2878:37:7;2911:4;2878:37;;;2930:34;;:7;:34;;;2926:398;;;3009:6;2980:12;:25;;;:35;;;;;;;:::i;:::-;;;;-1:-1:-1;2926:398:7;;-1:-1:-1;2926:398:7;;3036:30;;;3053:12;3036:30;3032:292;;;3107:6;3082:12;:21;;;:31;;;;;;;:::i;3032:292::-;3134:34;;;3151:16;3134:34;3130:194;;;3213:6;3184:12;:25;;;:35;;;;;;;:::i;3130:194::-;3250:63;;-1:-1:-1;;;3250:63:7;;36444:2:53;3250:63:7;;;36426:21:53;36483:2;36463:18;;;36456:30;36522:34;36502:18;;;36495:62;-1:-1:-1;;;36573:18:53;;;36566:51;36634:19;;3250:63:7;36242:417:53;2088:226:32;2187:10;;-1:-1:-1;;;2187:10:32;;;;;;2168:16;2207:22;;;:11;;;;:22;;;;;;:30;;;;2271:26;;-1:-1:-1;;;;;2271:26:32;;;2284:13;;;;2271:26;;;;;2088:226::o;4470:323:9:-;4698:9;;:88;;-1:-1:-1;;;4698:88:9;;-1:-1:-1;;;;;4698:9:9;;;;:22;;4728:9;;4698:88;;4739:7;;4748:6;;4756:9;;4698;;4770:15;;4698:88;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4470:323;;;;;:::o;3850:96:31:-;3908:7;3934:5;3938:1;3934;:5;:::i;6189:914:4:-;6262:13;6319:22;;;:10;:22;;;;;6356:17;;;;;;6352:77;;;-1:-1:-1;6396:22:4;;6189:914;-1:-1:-1;;6189:914:4:o;6352:77::-;6443:17;;;;;;;;;6439:77;;;-1:-1:-1;6483:22:4;;6189:914;-1:-1:-1;;6189:914:4:o;6439:77::-;6526:16;6545:28;6562:10;6545:16;:28::i;:::-;6526:47;-1:-1:-1;6588:13:4;6584:83;;6617:39;;-1:-1:-1;;;6617:39:4;;36866:2:53;6617:39:4;;;36848:21:53;36905:2;36885:18;;;36878:30;36944:31;36924:18;;;36917:59;36993:18;;6617:39:4;36664:353:53;6584:83:4;6693:12;6681:8;:24;6677:83;;-1:-1:-1;6728:21:4;;6189:914;-1:-1:-1;;;6189:914:4:o;6677:83::-;6770:16;6789:28;6806:10;6789:16;:28::i;:::-;6770:47;;6844:12;6832:8;:24;6828:82;;-1:-1:-1;6879:20:4;;6189:914;-1:-1:-1;;;;6189:914:4:o;6828:82::-;6924:26;6939:10;6924:14;:26::i;:::-;:56;;;;-1:-1:-1;2226:4:7;2278:26;;;:14;:26;;;;;2346:25;;2322:21;;;;;:49;6954:26:4;6920:177;;;-1:-1:-1;7003:23:4;;6189:914;-1:-1:-1;;;;6189:914:4:o;6920:177::-;-1:-1:-1;7064:22:4;;6189:914;-1:-1:-1;;;;6189:914:4:o;6209:438:21:-;6363:7;6382:238;6395:4;6389:3;:10;6382:238;;;6415:11;6429:23;6442:3;6447:4;6429:12;:23::i;:::-;7653:25;7713:20;;;7778:4;7765:18;;6415:37;;-1:-1:-1;6470:43:21;;;;7761:28;;6470:37;;;:43;6466:144;;;6540:3;6533:10;;6466:144;;;6588:7;:3;6594:1;6588:7;:::i;:::-;6582:13;;6466:144;6401:219;6382:238;;;-1:-1:-1;6636:4:21;6209:438;-1:-1:-1;;;6209:438:21:o;13216:187:30:-;13272:6;-1:-1:-1;;;;;13298:25:30;;;13290:76;;;;-1:-1:-1;;;13290:76:30;;37224:2:53;13290:76:30;;;37206:21:53;37263:2;37243:18;;;37236:30;37302:34;37282:18;;;37275:62;-1:-1:-1;;;37353:18:53;;;37346:36;37399:19;;13290:76:30;37022:402:53;8616:540:20;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:20;;;;;;;;:::i;1732:276:7:-;1816:4;1868:26;;;:14;:26;;;;;1976:25;;;;1952:21;;;;:49;;1976:25;1952:49;:::i;:::-;1912:36;1919:28;1936:10;1919:16;:28::i;1912:36::-;:89;;;1732:276;-1:-1:-1;;;1732:276:7:o;805:153:29:-;867:7;940:11;950:1;941:5;;;940:11;:::i;:::-;930:21;;931:5;;;930:21;:::i;14:286:53:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:53;;209:43;;199:71;;266:1;263;256:12;679:156;745:20;;805:4;794:16;;784:27;;774:55;;825:1;822;815:12;774:55;679:156;;;:::o;840:348::-;892:8;902:6;956:3;949:4;941:6;937:17;933:27;923:55;;974:1;971;964:12;923:55;-1:-1:-1;997:20:53;;-1:-1:-1;;;;;1029:30:53;;1026:50;;;1072:1;1069;1062:12;1026:50;1109:4;1101:6;1097:17;1085:29;;1161:3;1154:4;1145:6;1137;1133:19;1129:30;1126:39;1123:59;;;1178:1;1175;1168:12;1193:127;1254:10;1249:3;1245:20;1242:1;1235:31;1285:4;1282:1;1275:15;1309:4;1306:1;1299:15;1325:275;1396:2;1390:9;1461:2;1442:13;;-1:-1:-1;;1438:27:53;1426:40;;-1:-1:-1;;;;;1481:34:53;;1517:22;;;1478:62;1475:88;;;1543:18;;:::i;:::-;1579:2;1572:22;1325:275;;-1:-1:-1;1325:275:53:o;1605:406::-;1669:5;-1:-1:-1;;;;;1695:6:53;1692:30;1689:56;;;1725:18;;:::i;:::-;1763:57;1808:2;1787:15;;-1:-1:-1;;1783:29:53;1814:4;1779:40;1763:57;:::i;:::-;1754:66;;1843:6;1836:5;1829:21;1883:3;1874:6;1869:3;1865:16;1862:25;1859:45;;;1900:1;1897;1890:12;1859:45;1949:6;1944:3;1937:4;1930:5;1926:16;1913:43;2003:1;1996:4;1987:6;1980:5;1976:18;1972:29;1965:40;1605:406;;;;;:::o;2016:220::-;2058:5;2111:3;2104:4;2096:6;2092:17;2088:27;2078:55;;2129:1;2126;2119:12;2078:55;2151:79;2226:3;2217:6;2204:20;2197:4;2189:6;2185:17;2151:79;:::i;2241:978::-;2371:6;2379;2387;2395;2403;2411;2419;2427;2480:3;2468:9;2459:7;2455:23;2451:33;2448:53;;;2497:1;2494;2487:12;2448:53;2533:9;2520:23;2510:33;;2562:36;2594:2;2583:9;2579:18;2562:36;:::i;:::-;2552:46;;2649:2;2638:9;2634:18;2621:32;-1:-1:-1;;;;;2713:2:53;2705:6;2702:14;2699:34;;;2729:1;2726;2719:12;2699:34;2768:59;2819:7;2810:6;2799:9;2795:22;2768:59;:::i;:::-;2846:8;;-1:-1:-1;2742:85:53;-1:-1:-1;2934:2:53;2919:18;;2906:32;;-1:-1:-1;2950:16:53;;;2947:36;;;2979:1;2976;2969:12;2947:36;;3002:51;3045:7;3034:8;3023:9;3019:24;3002:51;:::i;:::-;2992:61;;;3072:37;3104:3;3093:9;3089:19;3072:37;:::i;:::-;3062:47;;3156:3;3145:9;3141:19;3128:33;3118:43;;3208:3;3197:9;3193:19;3180:33;3170:43;;2241:978;;;;;;;;;;;:::o;3224:180::-;3283:6;3336:2;3324:9;3315:7;3311:23;3307:32;3304:52;;;3352:1;3349;3342:12;3304:52;-1:-1:-1;3375:23:53;;3224:180;-1:-1:-1;3224:180:53:o;3409:472::-;3451:3;3489:5;3483:12;3516:6;3511:3;3504:19;3541:1;3551:162;3565:6;3562:1;3559:13;3551:162;;;3627:4;3683:13;;;3679:22;;3673:29;3655:11;;;3651:20;;3644:59;3580:12;3551:162;;;3731:6;3728:1;3725:13;3722:87;;;3797:1;3790:4;3781:6;3776:3;3772:16;3768:27;3761:38;3722:87;-1:-1:-1;3863:2:53;3842:15;-1:-1:-1;;3838:29:53;3829:39;;;;3870:4;3825:50;;3409:472;-1:-1:-1;;3409:472:53:o;3886:220::-;4035:2;4024:9;4017:21;3998:4;4055:45;4096:2;4085:9;4081:18;4073:6;4055:45;:::i;4111:131::-;-1:-1:-1;;;;;4186:31:53;;4176:42;;4166:70;;4232:1;4229;4222:12;4247:665;4342:6;4350;4358;4366;4419:3;4407:9;4398:7;4394:23;4390:33;4387:53;;;4436:1;4433;4426:12;4387:53;4475:9;4462:23;4494:31;4519:5;4494:31;:::i;:::-;4544:5;-1:-1:-1;4601:2:53;4586:18;;4573:32;4614:33;4573:32;4614:33;:::i;:::-;4666:7;-1:-1:-1;4720:2:53;4705:18;;4692:32;;-1:-1:-1;4775:2:53;4760:18;;4747:32;-1:-1:-1;;;;;4791:30:53;;4788:50;;;4834:1;4831;4824:12;4788:50;4857:49;4898:7;4889:6;4878:9;4874:22;4857:49;:::i;:::-;4847:59;;;4247:665;;;;;;;:::o;5124:183::-;5184:4;-1:-1:-1;;;;;5209:6:53;5206:30;5203:56;;;5239:18;;:::i;:::-;-1:-1:-1;5284:1:53;5280:14;5296:4;5276:25;;5124:183::o;5312:737::-;5366:5;5419:3;5412:4;5404:6;5400:17;5396:27;5386:55;;5437:1;5434;5427:12;5386:55;5473:6;5460:20;5499:4;5523:60;5539:43;5579:2;5539:43;:::i;:::-;5523:60;:::i;:::-;5617:15;;;5703:1;5699:10;;;;5687:23;;5683:32;;;5648:12;;;;5727:15;;;5724:35;;;5755:1;5752;5745:12;5724:35;5791:2;5783:6;5779:15;5803:217;5819:6;5814:3;5811:15;5803:217;;;5899:3;5886:17;5916:31;5941:5;5916:31;:::i;:::-;5960:18;;5998:12;;;;5836;;5803:217;;;-1:-1:-1;6038:5:53;5312:737;-1:-1:-1;;;;;;5312:737:53:o;6054:662::-;6108:5;6161:3;6154:4;6146:6;6142:17;6138:27;6128:55;;6179:1;6176;6169:12;6128:55;6215:6;6202:20;6241:4;6265:60;6281:43;6321:2;6281:43;:::i;6265:60::-;6359:15;;;6445:1;6441:10;;;;6429:23;;6425:32;;;6390:12;;;;6469:15;;;6466:35;;;6497:1;6494;6487:12;6466:35;6533:2;6525:6;6521:15;6545:142;6561:6;6556:3;6553:15;6545:142;;;6627:17;;6615:30;;6665:12;;;;6578;;6545:142;;6721:886;6773:5;6826:3;6819:4;6811:6;6807:17;6803:27;6793:55;;6844:1;6841;6834:12;6793:55;6880:6;6867:20;6906:4;6930:60;6946:43;6986:2;6946:43;:::i;6930:60::-;7024:15;;;7110:1;7106:10;;;;7094:23;;7090:32;;;7055:12;;;;7134:15;;;7131:35;;;7162:1;7159;7152:12;7131:35;7198:2;7190:6;7186:15;7210:368;7226:6;7221:3;7218:15;7210:368;;;7312:3;7299:17;-1:-1:-1;;;;;7335:11:53;7332:35;7329:125;;;7408:1;7437:2;7433;7426:14;7329:125;7479:56;7531:3;7526:2;7512:11;7504:6;7500:24;7496:33;7479:56;:::i;:::-;7467:69;;-1:-1:-1;7556:12:53;;;;7243;;7210:368;;7612:897;7782:6;7790;7798;7806;7859:3;7847:9;7838:7;7834:23;7830:33;7827:53;;;7876:1;7873;7866:12;7827:53;7916:9;7903:23;-1:-1:-1;;;;;7986:2:53;7978:6;7975:14;7972:34;;;8002:1;7999;7992:12;7972:34;8025:61;8078:7;8069:6;8058:9;8054:22;8025:61;:::i;:::-;8015:71;;8139:2;8128:9;8124:18;8111:32;8095:48;;8168:2;8158:8;8155:16;8152:36;;;8184:1;8181;8174:12;8152:36;8207:63;8262:7;8251:8;8240:9;8236:24;8207:63;:::i;:::-;8197:73;;8323:2;8312:9;8308:18;8295:32;8279:48;;8352:2;8342:8;8339:16;8336:36;;;8368:1;8365;8358:12;8336:36;;8391:61;8444:7;8433:8;8422:9;8418:24;8391:61;:::i;:::-;7612:897;;;;-1:-1:-1;8381:71:53;;8499:2;8484:18;8471:32;;-1:-1:-1;;;7612:897:53:o;8696:458::-;8787:6;8795;8803;8811;8819;8872:3;8860:9;8851:7;8847:23;8843:33;8840:53;;;8889:1;8886;8879:12;8840:53;8925:9;8912:23;8902:33;;8954:36;8986:2;8975:9;8971:18;8954:36;:::i;:::-;8944:46;;9009:36;9041:2;9030:9;9026:18;9009:36;:::i;:::-;8696:458;;;;-1:-1:-1;8999:46:53;;9092:2;9077:18;;9064:32;;-1:-1:-1;9143:3:53;9128:19;9115:33;;8696:458;-1:-1:-1;;8696:458:53:o;9159:127::-;9220:10;9215:3;9211:20;9208:1;9201:31;9251:4;9248:1;9241:15;9275:4;9272:1;9265:15;9291:346;9441:2;9426:18;;9474:1;9463:13;;9453:144;;9519:10;9514:3;9510:20;9507:1;9500:31;9554:4;9551:1;9544:15;9582:4;9579:1;9572:15;9453:144;9606:25;;;9291:346;:::o;9642:315::-;9710:6;9718;9771:2;9759:9;9750:7;9746:23;9742:32;9739:52;;;9787:1;9784;9777:12;9739:52;9823:9;9810:23;9800:33;;9883:2;9872:9;9868:18;9855:32;9896:31;9921:5;9896:31;:::i;:::-;9946:5;9936:15;;;9642:315;;;;;:::o;10286:250::-;10352:6;10360;10413:2;10401:9;10392:7;10388:23;10384:32;10381:52;;;10429:1;10426;10419:12;10381:52;10465:9;10452:23;10442:33;;10494:36;10526:2;10515:9;10511:18;10494:36;:::i;:::-;10484:46;;10286:250;;;;;:::o;10541:769::-;10646:6;10654;10662;10670;10678;10731:3;10719:9;10710:7;10706:23;10702:33;10699:53;;;10748:1;10745;10738:12;10699:53;10784:9;10771:23;10761:33;;10813:36;10845:2;10834:9;10830:18;10813:36;:::i;:::-;10803:46;;10900:2;10889:9;10885:18;10872:32;-1:-1:-1;;;;;10964:2:53;10956:6;10953:14;10950:34;;;10980:1;10977;10970:12;10950:34;11019:59;11070:7;11061:6;11050:9;11046:22;11019:59;:::i;:::-;11097:8;;-1:-1:-1;10993:85:53;-1:-1:-1;11185:2:53;11170:18;;11157:32;;-1:-1:-1;11201:16:53;;;11198:36;;;11230:1;11227;11220:12;11198:36;;11253:51;11296:7;11285:8;11274:9;11270:24;11253:51;:::i;:::-;11243:61;;;10541:769;;;;;;;;:::o;11315:549::-;11402:6;11410;11418;11426;11479:2;11467:9;11458:7;11454:23;11450:32;11447:52;;;11495:1;11492;11485:12;11447:52;11531:9;11518:23;11508:33;;11560:36;11592:2;11581:9;11577:18;11560:36;:::i;:::-;11550:46;;11647:2;11636:9;11632:18;11619:32;-1:-1:-1;;;;;11666:6:53;11663:30;11660:50;;;11706:1;11703;11696:12;11660:50;11745:59;11796:7;11787:6;11776:9;11772:22;11745:59;:::i;:::-;11315:549;;;;-1:-1:-1;11823:8:53;-1:-1:-1;;;;11315:549:53:o;11869:1157::-;12049:6;12057;12065;12073;12126:3;12114:9;12105:7;12101:23;12097:33;12094:53;;;12143:1;12140;12133:12;12094:53;12183:9;12170:23;-1:-1:-1;;;;;12253:2:53;12245:6;12242:14;12239:34;;;12269:1;12266;12259:12;12239:34;12292:61;12345:7;12336:6;12325:9;12321:22;12292:61;:::i;:::-;12282:71;;12406:2;12395:9;12391:18;12378:32;12362:48;;12435:2;12425:8;12422:16;12419:36;;;12451:1;12448;12441:12;12419:36;12474:63;12529:7;12518:8;12507:9;12503:24;12474:63;:::i;:::-;12464:73;;12590:2;12579:9;12575:18;12562:32;12546:48;;12619:2;12609:8;12606:16;12603:36;;;12635:1;12632;12625:12;12603:36;12658:61;12711:7;12700:8;12689:9;12685:24;12658:61;:::i;:::-;12648:71;;12772:2;12761:9;12757:18;12744:32;12728:48;;12801:2;12791:8;12788:16;12785:36;;;12817:1;12814;12807:12;12785:36;-1:-1:-1;12840:24:53;;12895:4;12887:13;;12883:27;-1:-1:-1;12873:55:53;;12924:1;12921;12914:12;12873:55;12947:73;13012:7;13007:2;12994:16;12989:2;12985;12981:11;12947:73;:::i;13031:523::-;13117:6;13125;13133;13186:2;13174:9;13165:7;13161:23;13157:32;13154:52;;;13202:1;13199;13192:12;13154:52;13241:9;13228:23;13260:31;13285:5;13260:31;:::i;:::-;13310:5;-1:-1:-1;13362:2:53;13347:18;;13334:32;;-1:-1:-1;13417:2:53;13402:18;;13389:32;-1:-1:-1;;;;;13433:30:53;;13430:50;;;13476:1;13473;13466:12;13430:50;13499:49;13540:7;13531:6;13520:9;13516:22;13499:49;:::i;:::-;13489:59;;;13031:523;;;;;:::o;13559:274::-;13645:6;13698:2;13686:9;13677:7;13673:23;13669:32;13666:52;;;13714:1;13711;13704:12;13666:52;13753:9;13740:23;13772:31;13797:5;13772:31;:::i;13838:1071::-;13992:6;14000;14008;14016;14024;14077:3;14065:9;14056:7;14052:23;14048:33;14045:53;;;14094:1;14091;14084:12;14045:53;14133:9;14120:23;14152:31;14177:5;14152:31;:::i;:::-;14202:5;-1:-1:-1;14259:2:53;14244:18;;14231:32;14272:33;14231:32;14272:33;:::i;:::-;14324:7;-1:-1:-1;14382:2:53;14367:18;;14354:32;-1:-1:-1;;;;;14435:14:53;;;14432:34;;;14462:1;14459;14452:12;14432:34;14485:61;14538:7;14529:6;14518:9;14514:22;14485:61;:::i;:::-;14475:71;;14599:2;14588:9;14584:18;14571:32;14555:48;;14628:2;14618:8;14615:16;14612:36;;;14644:1;14641;14634:12;14612:36;14667:63;14722:7;14711:8;14700:9;14696:24;14667:63;:::i;:::-;14657:73;;14783:3;14772:9;14768:19;14755:33;14739:49;;14813:2;14803:8;14800:16;14797:36;;;14829:1;14826;14819:12;14914:613;15002:6;15010;15018;15026;15079:2;15067:9;15058:7;15054:23;15050:32;15047:52;;;15095:1;15092;15085:12;15047:52;15134:9;15121:23;15153:31;15178:5;15153:31;:::i;:::-;15203:5;-1:-1:-1;15255:2:53;15240:18;;15227:32;;-1:-1:-1;15310:2:53;15295:18;;15282:32;-1:-1:-1;;;;;15326:30:53;;15323:50;;;15369:1;15366;15359:12;15740:315;15808:6;15816;15869:2;15857:9;15848:7;15844:23;15840:32;15837:52;;;15885:1;15882;15875:12;15837:52;15924:9;15911:23;15943:31;15968:5;15943:31;:::i;:::-;15993:5;16045:2;16030:18;;;;16017:32;;-1:-1:-1;;;15740:315:53:o;16060:734::-;16164:6;16172;16180;16188;16196;16249:3;16237:9;16228:7;16224:23;16220:33;16217:53;;;16266:1;16263;16256:12;16217:53;16305:9;16292:23;16324:31;16349:5;16324:31;:::i;:::-;16374:5;-1:-1:-1;16431:2:53;16416:18;;16403:32;16444:33;16403:32;16444:33;:::i;:::-;16496:7;-1:-1:-1;16550:2:53;16535:18;;16522:32;;-1:-1:-1;16601:2:53;16586:18;;16573:32;;-1:-1:-1;16656:3:53;16641:19;;16628:33;-1:-1:-1;;;;;16673:30:53;;16670:50;;;16716:1;16713;16706:12;16670:50;16739:49;16780:7;16771:6;16760:9;16756:22;16739:49;:::i;17022:271::-;17205:6;17197;17192:3;17179:33;17161:3;17231:16;;17256:13;;;17231:16;17022:271;-1:-1:-1;17022:271:53:o;17773:348::-;17975:2;17957:21;;;18014:2;17994:18;;;17987:30;18053:26;18048:2;18033:18;;18026:54;18112:2;18097:18;;17773:348::o;18126:380::-;18205:1;18201:12;;;;18248;;;18269:61;;18323:4;18315:6;18311:17;18301:27;;18269:61;18376:2;18368:6;18365:14;18345:18;18342:38;18339:161;;;18422:10;18417:3;18413:20;18410:1;18403:31;18457:4;18454:1;18447:15;18485:4;18482:1;18475:15;18339:161;;18126:380;;;:::o;18511:397::-;18713:2;18695:21;;;18752:2;18732:18;;;18725:30;18791:34;18786:2;18771:18;;18764:62;-1:-1:-1;;;18857:2:53;18842:18;;18835:31;18898:3;18883:19;;18511:397::o;18913:184::-;18983:6;19036:2;19024:9;19015:7;19011:23;19007:32;19004:52;;;19052:1;19049;19042:12;19004:52;-1:-1:-1;19075:16:53;;18913:184;-1:-1:-1;18913:184:53:o;19102:461::-;19155:3;19193:5;19187:12;19220:6;19215:3;19208:19;19246:4;19275:2;19270:3;19266:12;19259:19;;19312:2;19305:5;19301:14;19333:1;19343:195;19357:6;19354:1;19351:13;19343:195;;;19422:13;;-1:-1:-1;;;;;19418:39:53;19406:52;;19478:12;;;;19513:15;;;;19454:1;19372:9;19343:195;;;-1:-1:-1;19554:3:53;;19102:461;-1:-1:-1;;;;;19102:461:53:o;19568:435::-;19621:3;19659:5;19653:12;19686:6;19681:3;19674:19;19712:4;19741:2;19736:3;19732:12;19725:19;;19778:2;19771:5;19767:14;19799:1;19809:169;19823:6;19820:1;19817:13;19809:169;;;19884:13;;19872:26;;19918:12;;;;19953:15;;;;19845:1;19838:9;19809:169;;20008:615;20059:3;20097:5;20091:12;20124:6;20119:3;20112:19;20150:4;20191:2;20186:3;20182:12;20216:11;20243;20236:18;;20293:6;20290:1;20286:14;20279:5;20275:26;20263:38;;20335:2;20328:5;20324:14;20356:1;20366:231;20380:6;20377:1;20374:13;20366:231;;;20451:5;20445:4;20441:16;20436:3;20429:29;20479:38;20512:4;20503:6;20497:13;20479:38;:::i;:::-;20575:12;;;;20471:46;-1:-1:-1;20540:15:53;;;;20402:1;20395:9;20366:231;;;-1:-1:-1;20613:4:53;;20008:615;-1:-1:-1;;;;;;;20008:615:53:o;20628:838::-;21045:3;21034:9;21027:22;21008:4;21072:57;21124:3;21113:9;21109:19;21101:6;21072:57;:::i;:::-;21177:9;21169:6;21165:22;21160:2;21149:9;21145:18;21138:50;21211:44;21248:6;21240;21211:44;:::i;:::-;21197:58;;21303:9;21295:6;21291:22;21286:2;21275:9;21271:18;21264:50;21331:42;21366:6;21358;21331:42;:::i;:::-;21404:2;21389:18;;21382:34;;;;-1:-1:-1;;21447:3:53;21432:19;21425:35;21323:50;20628:838;-1:-1:-1;;;20628:838:53:o;21660:910::-;22105:3;22094:9;22087:22;22068:4;22132:57;22184:3;22173:9;22169:19;22161:6;22132:57;:::i;:::-;22237:9;22229:6;22225:22;22220:2;22209:9;22205:18;22198:50;22271:44;22308:6;22300;22271:44;:::i;:::-;22257:58;;22363:9;22355:6;22351:22;22346:2;22335:9;22331:18;22324:50;22391:42;22426:6;22418;22391:42;:::i;:::-;22464:2;22449:18;;22442:34;;;;-1:-1:-1;;22507:3:53;22492:19;;22485:35;;;;22551:3;22536:19;;;22529:35;22383:50;21660:910;-1:-1:-1;;;21660:910:53:o;22575:127::-;22636:10;22631:3;22627:20;22624:1;22617:31;22667:4;22664:1;22657:15;22691:4;22688:1;22681:15;22707:128;22747:3;22778:1;22774:6;22771:1;22768:13;22765:39;;;22784:18;;:::i;:::-;-1:-1:-1;22820:9:53;;22707:128::o;23424:125::-;23464:4;23492:1;23489;23486:8;23483:34;;;23497:18;;:::i;:::-;-1:-1:-1;23534:9:53;;23424:125::o;23554:127::-;23615:10;23610:3;23606:20;23603:1;23596:31;23646:4;23643:1;23636:15;23670:4;23667:1;23660:15;23686:758;24067:3;24056:9;24049:22;24030:4;24094:57;24146:3;24135:9;24131:19;24123:6;24094:57;:::i;:::-;24199:9;24191:6;24187:22;24182:2;24171:9;24167:18;24160:50;24233:44;24270:6;24262;24233:44;:::i;:::-;24219:58;;24325:9;24317:6;24313:22;24308:2;24297:9;24293:18;24286:50;24353:42;24388:6;24380;24353:42;:::i;:::-;24345:50;;;24431:6;24426:2;24415:9;24411:18;24404:34;23686:758;;;;;;;:::o;25668:442::-;25897:6;25886:9;25879:25;25952:4;25944:6;25940:17;25935:2;25924:9;25920:18;25913:45;25994:6;25989:2;25978:9;25974:18;25967:34;26037:3;26032:2;26021:9;26017:18;26010:31;25860:4;26058:46;26099:3;26088:9;26084:19;26076:6;26058:46;:::i;26115:604::-;26390:6;26379:9;26372:25;26445:4;26437:6;26433:17;26428:2;26417:9;26413:18;26406:45;26487:6;26482:2;26471:9;26467:18;26460:34;26530:3;26525:2;26514:9;26510:18;26503:31;26353:4;26557:46;26598:3;26587:9;26583:19;26575:6;26557:46;:::i;:::-;26652:9;26644:6;26640:22;26634:3;26623:9;26619:19;26612:51;26680:33;26706:6;26698;26680:33;:::i;:::-;26672:41;26115:604;-1:-1:-1;;;;;;;;26115:604:53:o;27200:135::-;27239:3;-1:-1:-1;;27260:17:53;;27257:43;;;27280:18;;:::i;:::-;-1:-1:-1;27327:1:53;27316:13;;27200:135::o;27340:168::-;27380:7;27446:1;27442;27438:6;27434:14;27431:1;27428:21;27423:1;27416:9;27409:17;27405:45;27402:71;;;27453:18;;:::i;:::-;-1:-1:-1;27493:9:53;;27340:168::o;27893:277::-;27960:6;28013:2;28001:9;27992:7;27988:23;27984:32;27981:52;;;28029:1;28026;28019:12;27981:52;28061:9;28055:16;28114:5;28107:13;28100:21;28093:5;28090:32;28080:60;;28136:1;28133;28126:12;28954:397;29156:2;29138:21;;;29195:2;29175:18;;;29168:30;29234:34;29229:2;29214:18;;29207:62;-1:-1:-1;;;29300:2:53;29285:18;;29278:31;29341:3;29326:19;;28954:397::o;30111:236::-;30150:3;-1:-1:-1;;;;;30223:2:53;30220:1;30216:10;30253:2;30250:1;30246:10;30284:3;30280:2;30276:12;30271:3;30268:21;30265:47;;;30292:18;;:::i;:::-;30328:13;;30111:236;-1:-1:-1;;;;30111:236:53:o;30459:1884::-;31031:4;31060:3;31090:6;31079:9;31072:25;31116:2;31183:1;31179;31174:3;31170:11;31166:19;31158:6;31154:32;31149:2;31138:9;31134:18;31127:60;31223:2;31218;31207:9;31203:18;31196:30;31249:56;31301:2;31290:9;31286:18;31278:6;31249:56;:::i;:::-;31235:70;;31353:9;31345:6;31341:22;31336:2;31325:9;31321:18;31314:50;31387:44;31424:6;31416;31387:44;:::i;:::-;31373:58;;31480:9;31472:6;31468:22;31462:3;31451:9;31447:19;31440:51;31511:6;31546;31540:13;31577:6;31569;31562:22;31612:2;31604:6;31600:15;31593:22;;31671:2;31661:6;31658:1;31654:14;31646:6;31642:27;31638:36;31709:2;31701:6;31697:15;31730:1;31740:252;31754:6;31751:1;31748:13;31740:252;;;31844:2;31840:7;31831:6;31823;31819:19;31815:33;31810:3;31803:46;31872:40;31905:6;31896;31890:13;31872:40;:::i;:::-;31970:12;;;;31862:50;-1:-1:-1;31935:15:53;;;;31776:1;31769:9;31740:252;;;31744:3;;32041:9;32033:6;32029:22;32023:3;32012:9;32008:19;32001:51;32075:42;32110:6;32102;32075:42;:::i;:::-;32061:56;;;;;;32126:46;32167:3;32156:9;32152:19;32144:6;-1:-1:-1;;;;;30417:30:53;30405:43;;30352:102;32126:46;-1:-1:-1;;;;;30417:30:53;;32222:3;32207:19;;30405:43;32276:9;32268:6;32264:22;32258:3;32247:9;32243:19;32236:51;32304:33;32330:6;32322;32304:33;:::i;:::-;32296:41;30459:1884;-1:-1:-1;;;;;;;;;;;;30459:1884:53:o;33344:217::-;33384:1;33410;33400:132;;33454:10;33449:3;33445:20;33442:1;33435:31;33489:4;33486:1;33479:15;33517:4;33514:1;33507:15;33400:132;-1:-1:-1;33546:9:53;;33344:217::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "3098200",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "BALLOT_TYPEHASH()": "328",
            "COUNTING_MODE()": "infinite",
            "EXTENDED_BALLOT_TYPEHASH()": "329",
            "castVote(uint256,uint8)": "infinite",
            "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": "infinite",
            "castVoteWithReason(uint256,uint8,string)": "infinite",
            "castVoteWithReasonAndParams(uint256,uint8,string,bytes)": "infinite",
            "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)": "infinite",
            "execute(address[],uint256[],bytes[],bytes32)": "infinite",
            "getVotes(address,uint256)": "infinite",
            "getVotesWithParams(address,uint256,bytes)": "infinite",
            "hasVoted(uint256,address)": "2760",
            "hashProposal(address[],uint256[],bytes[],bytes32)": "infinite",
            "name()": "infinite",
            "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "infinite",
            "onERC1155Received(address,address,uint256,uint256,bytes)": "infinite",
            "onERC721Received(address,address,uint256,bytes)": "infinite",
            "proposalDeadline(uint256)": "2695",
            "proposalEta(uint256)": "infinite",
            "proposalSnapshot(uint256)": "2654",
            "proposalThreshold()": "2419",
            "proposalVotes(uint256)": "6841",
            "propose(address[],uint256[],bytes[],string)": "infinite",
            "queue(address[],uint256[],bytes[],bytes32)": "infinite",
            "quorum(uint256)": "infinite",
            "quorumDenominator()": "282",
            "quorumNumerator()": "6945",
            "quorumNumerator(uint256)": "infinite",
            "relay(address,uint256,bytes)": "infinite",
            "setProposalThreshold(uint256)": "infinite",
            "setVotingDelay(uint256)": "infinite",
            "setVotingPeriod(uint256)": "infinite",
            "state(uint256)": "infinite",
            "supportsInterface(bytes4)": "infinite",
            "timelock()": "2409",
            "token()": "infinite",
            "updateQuorumNumerator(uint256)": "infinite",
            "updateTimelock(address)": "infinite",
            "version()": "infinite",
            "votingDelay()": "2376",
            "votingPeriod()": "2399"
          },
          "internal": {
            "_cancel(address[] memory,uint256[] memory,bytes memory[] memory,bytes32)": "infinite",
            "_castVote(uint256,address,uint8,string memory)": "infinite",
            "_execute(uint256,address[] memory,uint256[] memory,bytes memory[] memory,bytes32)": "infinite",
            "_executor()": "2156"
          }
        },
        "methodIdentifiers": {
          "BALLOT_TYPEHASH()": "deaaa7cc",
          "COUNTING_MODE()": "dd4e2ba5",
          "EXTENDED_BALLOT_TYPEHASH()": "2fe3e261",
          "castVote(uint256,uint8)": "56781388",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": "3bccf4fd",
          "castVoteWithReason(uint256,uint8,string)": "7b3c71d3",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)": "5f398a14",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)": "03420181",
          "execute(address[],uint256[],bytes[],bytes32)": "2656227d",
          "getVotes(address,uint256)": "eb9019d4",
          "getVotesWithParams(address,uint256,bytes)": "9a802a6d",
          "hasVoted(uint256,address)": "43859632",
          "hashProposal(address[],uint256[],bytes[],bytes32)": "c59057e4",
          "name()": "06fdde03",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "bc197c81",
          "onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
          "onERC721Received(address,address,uint256,bytes)": "150b7a02",
          "proposalDeadline(uint256)": "c01f9e37",
          "proposalEta(uint256)": "ab58fb8e",
          "proposalSnapshot(uint256)": "2d63f693",
          "proposalThreshold()": "b58131b0",
          "proposalVotes(uint256)": "544ffc9c",
          "propose(address[],uint256[],bytes[],string)": "7d5e81e2",
          "queue(address[],uint256[],bytes[],bytes32)": "160cbed7",
          "quorum(uint256)": "f8ce560a",
          "quorumDenominator()": "97c3d334",
          "quorumNumerator()": "a7713a70",
          "quorumNumerator(uint256)": "60c4247f",
          "relay(address,uint256,bytes)": "c28bc2fa",
          "setProposalThreshold(uint256)": "ece40cc1",
          "setVotingDelay(uint256)": "70b0f660",
          "setVotingPeriod(uint256)": "ea0217cf",
          "state(uint256)": "3e4f49e6",
          "supportsInterface(bytes4)": "01ffc9a7",
          "timelock()": "d33219b4",
          "token()": "fc0c546a",
          "updateQuorumNumerator(uint256)": "06f3f9e6",
          "updateTimelock(address)": "a890c910",
          "version()": "54fd4d50",
          "votingDelay()": "3932abb1",
          "votingPeriod()": "02a251a3"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVotes\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract TimelockController\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quorumPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_scoreProviderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Empty\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldQuorumNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorumNumerator\",\"type\":\"uint256\"}],\"name\":\"QuorumNumeratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTimelock\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"TimelockChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"VoteCastWithParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"VotingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COUNTING_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTENDED_BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"castVoteWithReason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"castVoteWithReasonAndParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteWithReasonAndParamsBySig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"getVotesWithParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"hashProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalEta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"quorumNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"setProposalThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"setVotingDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"setVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IGovernor.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IVotes\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newQuorumNumerator\",\"type\":\"uint256\"}],\"name\":\"updateQuorumNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TimelockController\",\"name\":\"newTimelock\",\"type\":\"address\"}],\"name\":\"updateTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"Empty()\":[{\"details\":\"An operation (e.g. {front}) couldn't be completed due to the queue being empty.\"}]},\"kind\":\"dev\",\"methods\":{\"COUNTING_MODE()\":{\"details\":\"See {IGovernor-COUNTING_MODE}.\"},\"castVote(uint256,uint8)\":{\"details\":\"See {IGovernor-castVote}.\"},\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\":{\"details\":\"See {IGovernor-castVoteBySig}.\"},\"castVoteWithReason(uint256,uint8,string)\":{\"details\":\"See {IGovernor-castVoteWithReason}.\"},\"castVoteWithReasonAndParams(uint256,uint8,string,bytes)\":{\"details\":\"See {IGovernor-castVoteWithReasonAndParams}.\"},\"castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)\":{\"details\":\"See {IGovernor-castVoteWithReasonAndParamsBySig}.\"},\"execute(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-execute}.\"},\"getVotesWithParams(address,uint256,bytes)\":{\"details\":\"See {IGovernor-getVotesWithParams}.\"},\"hasVoted(uint256,address)\":{\"details\":\"See {IGovernor-hasVoted}.\"},\"hashProposal(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-hashProposal}. The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors across multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts.\"},\"name()\":{\"details\":\"See {IGovernor-name}.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155Receiver-onERC1155BatchReceived}.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155Receiver-onERC1155Received}.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}.\"},\"proposalDeadline(uint256)\":{\"details\":\"See {IGovernor-proposalDeadline}.\"},\"proposalEta(uint256)\":{\"details\":\"Public accessor to check the eta of a queued proposal\"},\"proposalSnapshot(uint256)\":{\"details\":\"See {IGovernor-proposalSnapshot}.\"},\"proposalVotes(uint256)\":{\"details\":\"Accessor to the internal vote counts.\"},\"queue(address[],uint256[],bytes[],bytes32)\":{\"details\":\"Function to queue a proposal to the timelock.\"},\"quorumDenominator()\":{\"details\":\"Returns the quorum denominator. Defaults to 100, but may be overridden.\"},\"quorumNumerator()\":{\"details\":\"Returns the current quorum numerator. See {quorumDenominator}.\"},\"quorumNumerator(uint256)\":{\"details\":\"Returns the quorum numerator at a specific block number. See {quorumDenominator}.\"},\"relay(address,uint256,bytes)\":{\"details\":\"Relays a transaction or function call to an arbitrary target. In cases where the governance executor is some contract other than the governor itself, like when using a timelock, this function can be invoked in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake. Note that if the executor is simply the governor itself, use of `relay` is redundant.\"},\"setProposalThreshold(uint256)\":{\"details\":\"Update the proposal threshold. This operation can only be performed through a governance proposal. Emits a {ProposalThresholdSet} event.\"},\"setVotingDelay(uint256)\":{\"details\":\"Update the voting delay. This operation can only be performed through a governance proposal. Emits a {VotingDelaySet} event.\"},\"setVotingPeriod(uint256)\":{\"details\":\"Update the voting period. This operation can only be performed through a governance proposal. Emits a {VotingPeriodSet} event.\"},\"timelock()\":{\"details\":\"Public accessor to check the address of the timelock\"},\"updateQuorumNumerator(uint256)\":{\"details\":\"Changes the quorum numerator. Emits a {QuorumNumeratorUpdated} event. Requirements: - Must be called through a governance proposal. - New numerator must be smaller or equal to the denominator.\"},\"updateTimelock(address)\":{\"details\":\"Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates must be proposed, scheduled, and executed through governance proposals. CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\"},\"version()\":{\"details\":\"See {IGovernor-version}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance_standard/GovernorContract.sol\":\"GovernorContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/Governor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\nimport \\\"../utils/math/SafeCast.sol\\\";\\nimport \\\"../utils/structs/DoubleEndedQueue.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Timers.sol\\\";\\nimport \\\"./IGovernor.sol\\\";\\n\\n/**\\n * @dev Core of the governance system, designed to be extended though various modules.\\n *\\n * This contract is abstract and requires several function to be implemented in various modules:\\n *\\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\\n * - A voting module must implement {_getVotes}\\n * - Additionanly, the {votingPeriod} must also be implemented\\n *\\n * _Available since v4.3._\\n */\\nabstract contract Governor is Context, ERC165, EIP712, IGovernor, IERC721Receiver, IERC1155Receiver {\\n    using DoubleEndedQueue for DoubleEndedQueue.Bytes32Deque;\\n    using SafeCast for uint256;\\n    using Timers for Timers.BlockNumber;\\n\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n    bytes32 public constant EXTENDED_BALLOT_TYPEHASH =\\n        keccak256(\\\"ExtendedBallot(uint256 proposalId,uint8 support,string reason,bytes params)\\\");\\n\\n    struct ProposalCore {\\n        Timers.BlockNumber voteStart;\\n        Timers.BlockNumber voteEnd;\\n        bool executed;\\n        bool canceled;\\n    }\\n\\n    string private _name;\\n\\n    mapping(uint256 => ProposalCore) private _proposals;\\n\\n    // This queue keeps track of the governor operating on itself. Calls to functions protected by the\\n    // {onlyGovernance} modifier needs to be whitelisted in this queue. Whitelisting is set in {_beforeExecute},\\n    // consumed by the {onlyGovernance} modifier and eventually reset in {_afterExecute}. This ensures that the\\n    // execution of {onlyGovernance} protected calls can only be achieved through successful proposals.\\n    DoubleEndedQueue.Bytes32Deque private _governanceCall;\\n\\n    /**\\n     * @dev Restricts a function so it can only be executed through governance proposals. For example, governance\\n     * parameter setters in {GovernorSettings} are protected using this modifier.\\n     *\\n     * The governance executing address may be different from the Governor's own address, for example it could be a\\n     * timelock. This can be customized by modules by overriding {_executor}. The executor is only able to invoke these\\n     * functions during the execution of the governor's {execute} function, and not under any other circumstances. Thus,\\n     * for example, additional timelock proposers are not able to change governance parameters without going through the\\n     * governance protocol (since v4.6).\\n     */\\n    modifier onlyGovernance() {\\n        require(_msgSender() == _executor(), \\\"Governor: onlyGovernance\\\");\\n        if (_executor() != address(this)) {\\n            bytes32 msgDataHash = keccak256(_msgData());\\n            // loop until popping the expected operation - throw if deque is empty (operation not authorized)\\n            while (_governanceCall.popFront() != msgDataHash) {}\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the value for {name} and {version}\\n     */\\n    constructor(string memory name_) EIP712(name_, version()) {\\n        _name = name_;\\n    }\\n\\n    /**\\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\\n     */\\n    receive() external payable virtual {\\n        require(_executor() == address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        // In addition to the current interfaceId, also support previous version of the interfaceId that did not\\n        // include the castVoteWithReasonAndParams() function as standard\\n        return\\n            interfaceId ==\\n            (type(IGovernor).interfaceId ^\\n                this.castVoteWithReasonAndParams.selector ^\\n                this.castVoteWithReasonAndParamsBySig.selector ^\\n                this.getVotesWithParams.selector) ||\\n            interfaceId == type(IGovernor).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-version}.\\n     */\\n    function version() public view virtual override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hashProposal}.\\n     *\\n     * The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array\\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\\n     * advance, before the proposal is submitted.\\n     *\\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\\n     * across multiple networks. This also means that in order to execute the same operation twice (on the same\\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual override returns (uint256) {\\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-state}.\\n     */\\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        uint256 snapshot = proposalSnapshot(proposalId);\\n\\n        if (snapshot == 0) {\\n            revert(\\\"Governor: unknown proposal id\\\");\\n        }\\n\\n        if (snapshot >= block.number) {\\n            return ProposalState.Pending;\\n        }\\n\\n        uint256 deadline = proposalDeadline(proposalId);\\n\\n        if (deadline >= block.number) {\\n            return ProposalState.Active;\\n        }\\n\\n        if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\\n            return ProposalState.Succeeded;\\n        } else {\\n            return ProposalState.Defeated;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalSnapshot}.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteStart.getDeadline();\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalDeadline}.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteEnd.getDeadline();\\n    }\\n\\n    /**\\n     * @dev Part of the Governor Bravo's interface: _\\\"The number of votes required in order for a voter to become a proposer\\\"_.\\n     */\\n    function proposalThreshold() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Amount of votes already cast passes the threshold limit.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Is the proposal successful or not.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Get the voting weight of `account` at a specific `blockNumber`, for a vote as described by `params`.\\n     */\\n    function _getVotes(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory params\\n    ) internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Register a vote for `proposalId` by `account` with a given `support`, voting `weight` and voting `params`.\\n     *\\n     * Note: Support is generic and can represent various things depending on the voting system used.\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight,\\n        bytes memory params\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Default additional encoded parameters used by castVote methods that don't include them\\n     *\\n     * Note: Should be overridden by specific implementations to use an appropriate value, the\\n     * meaning of the additional params, in the context of that implementation\\n     */\\n    function _defaultParams() internal view virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-propose}.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual override returns (uint256) {\\n        require(\\n            getVotes(_msgSender(), block.number - 1) >= proposalThreshold(),\\n            \\\"Governor: proposer votes below proposal threshold\\\"\\n        );\\n\\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\\n\\n        require(targets.length == values.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length == calldatas.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length > 0, \\\"Governor: empty proposal\\\");\\n\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(proposal.voteStart.isUnset(), \\\"Governor: proposal already exists\\\");\\n\\n        uint64 snapshot = block.number.toUint64() + votingDelay().toUint64();\\n        uint64 deadline = snapshot + votingPeriod().toUint64();\\n\\n        proposal.voteStart.setDeadline(snapshot);\\n        proposal.voteEnd.setDeadline(deadline);\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            _msgSender(),\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            snapshot,\\n            deadline,\\n            description\\n        );\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-execute}.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n        require(\\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\\n            \\\"Governor: proposal not successful\\\"\\n        );\\n        _proposals[proposalId].executed = true;\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);\\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\\n        _afterExecute(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Internal execution mechanism. Can be overridden to implement different execution mechanism\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        string memory errorMessage = \\\"Governor: call reverted without message\\\";\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\\n            Address.verifyCallResult(success, returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook before execution is triggered.\\n     */\\n    function _beforeExecute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory, /* values */\\n        bytes[] memory calldatas,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        if (_executor() != address(this)) {\\n            for (uint256 i = 0; i < targets.length; ++i) {\\n                if (targets[i] == address(this)) {\\n                    _governanceCall.pushBack(keccak256(calldatas[i]));\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook after execution is triggered.\\n     */\\n    function _afterExecute(\\n        uint256, /* proposalId */\\n        address[] memory, /* targets */\\n        uint256[] memory, /* values */\\n        bytes[] memory, /* calldatas */\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        if (_executor() != address(this)) {\\n            if (!_governanceCall.empty()) {\\n                _governanceCall.clear();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\\n     * canceled to allow distinguishing it from executed proposals.\\n     *\\n     * Emits a {IGovernor-ProposalCanceled} event.\\n     */\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n        ProposalState status = state(proposalId);\\n\\n        require(\\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\\n            \\\"Governor: proposal not active\\\"\\n        );\\n        _proposals[proposalId].canceled = true;\\n\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-getVotes}.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        return _getVotes(account, blockNumber, _defaultParams());\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-getVotesWithParams}.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory params\\n    ) public view virtual override returns (uint256) {\\n        return _getVotes(account, blockNumber, params);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVote}.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReason}.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReasonAndParams}.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteBySig}.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\\n            v,\\n            r,\\n            s\\n        );\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReasonAndParamsBySig}.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        EXTENDED_BALLOT_TYPEHASH,\\n                        proposalId,\\n                        support,\\n                        keccak256(bytes(reason)),\\n                        keccak256(params)\\n                    )\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n    /**\\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function. Uses the _defaultParams().\\n     *\\n     * Emits a {IGovernor-VoteCast} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        return _castVote(proposalId, account, support, reason, _defaultParams());\\n    }\\n\\n    /**\\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\\n     *\\n     * Emits a {IGovernor-VoteCast} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason,\\n        bytes memory params\\n    ) internal virtual returns (uint256) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(state(proposalId) == ProposalState.Active, \\\"Governor: vote not currently active\\\");\\n\\n        uint256 weight = _getVotes(account, proposal.voteStart.getDeadline(), params);\\n        _countVote(proposalId, account, support, weight, params);\\n\\n        if (params.length == 0) {\\n            emit VoteCast(account, proposalId, support, weight, reason);\\n        } else {\\n            emit VoteCastWithParams(account, proposalId, support, weight, reason, params);\\n        }\\n\\n        return weight;\\n    }\\n\\n    /**\\n     * @dev Relays a transaction or function call to an arbitrary target. In cases where the governance executor\\n     * is some contract other than the governor itself, like when using a timelock, this function can be invoked\\n     * in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\\n     * Note that if the executor is simply the governor itself, use of `relay` is redundant.\\n     */\\n    function relay(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) external payable virtual onlyGovernance {\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        Address.verifyCallResult(success, returndata, \\\"Governor: relay reverted without message\\\");\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\\n     * through another contract such as a timelock.\\n     */\\n    function _executor() internal view virtual returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155Received}.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x57da86c5f5c46ab8f2cf67ada4258567a9270f89499690f40ed8160788733a48\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernor is IERC165 {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast without params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @dev Emitted when a vote is cast with params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     * `params` are additional encoded parameters. Their intepepretation also depends on the voting module used.\\n     */\\n    event VoteCastWithParams(\\n        address indexed voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight,\\n        string reason,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\\n     * name that describes the behavior. For example:\\n     *\\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\\n     * beginning of the following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\n     * during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\n     * leave time for users to buy voting power, or delegate it, before the voting of a proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * Note: The `blockNumber` parameter corresponds to the snapshot used for counting vote. This allows to scale the\\n     * quorum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber` given additional encoded parameters.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory params\\n    ) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\n     * {IGovernor-votingPeriod} blocks after the voting starts.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0xa52d593ff06a2353f78fa149da31f2ca94f03d1eff99bde41977fa2fe985a92f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/TimelockController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockController is AccessControl, IERC721Receiver, IERC1155Receiver {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    bytes32 public constant CANCELLER_ROLE = keccak256(\\\"CANCELLER_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with the following parameters:\\n     *\\n     * - `minDelay`: initial minimum delay for operations\\n     * - `proposers`: accounts to be granted proposer and canceller roles\\n     * - `executors`: accounts to be granted executor role\\n     * - `admin`: optional account to be granted admin role; disable with zero address\\n     *\\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\\n     * without being subject to delay, but this role should be subsequently renounced in favor of\\n     * administration through timelocked proposals. Previous versions of this contract would assign\\n     * this admin to the deployer automatically and should be renounced as well.\\n     */\\n    constructor(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors,\\n        address admin\\n    ) {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // optional admin\\n        if (admin != address(0)) {\\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\\n        }\\n\\n        // register proposers and cancellers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n            _setupRole(CANCELLER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, AccessControl) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool registered) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'canceller' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        _execute(target, value, payload);\\n        emit CallExecuted(id, 0, target, value, payload);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            address target = targets[i];\\n            uint256 value = values[i];\\n            bytes calldata payload = payloads[i];\\n            _execute(target, value, payload);\\n            emit CallExecuted(id, i, target, value, payload);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     */\\n    function _execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal virtual {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155Received}.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x455518e20a057f0e9af048cbc3ffef44fa205ac6d57d33fd2a759d687c507373\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorCountingSimple is Governor {\\n    /**\\n     * @dev Supported vote types. Matches Governor Bravo ordering.\\n     */\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    mapping(uint256 => ProposalVote) private _proposalVotes;\\n\\n    /**\\n     * @dev See {IGovernor-COUNTING_MODE}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\\n        return \\\"support=bravo&quorum=for,abstain\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hasVoted}.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\\n        return _proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    /**\\n     * @dev Accessor to the internal vote counts.\\n     */\\n    function proposalVotes(uint256 proposalId)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256 againstVotes,\\n            uint256 forVotes,\\n            uint256 abstainVotes\\n        )\\n    {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n        return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);\\n    }\\n\\n    /**\\n     * @dev See {Governor-_quorumReached}.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return proposalVote.forVotes > proposalVote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight,\\n        bytes memory // params\\n    ) internal virtual override {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        require(!proposalVote.hasVoted[account], \\\"GovernorVotingSimple: vote already cast\\\");\\n        proposalVote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalVote.againstVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalVote.forVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalVote.abstainVotes += weight;\\n        } else {\\n            revert(\\\"GovernorVotingSimple: invalid value for enum VoteType\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f9c01248b04279913cc08936e9d15494ec3700c21768a175f91e72ba52c7789\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorSettings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorSettings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for settings updatable through governance.\\n *\\n * _Available since v4.4._\\n */\\nabstract contract GovernorSettings is Governor {\\n    uint256 private _votingDelay;\\n    uint256 private _votingPeriod;\\n    uint256 private _proposalThreshold;\\n\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\\n\\n    /**\\n     * @dev Initialize the governance parameters.\\n     */\\n    constructor(\\n        uint256 initialVotingDelay,\\n        uint256 initialVotingPeriod,\\n        uint256 initialProposalThreshold\\n    ) {\\n        _setVotingDelay(initialVotingDelay);\\n        _setVotingPeriod(initialVotingPeriod);\\n        _setProposalThreshold(initialProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingDelay}.\\n     */\\n    function votingDelay() public view virtual override returns (uint256) {\\n        return _votingDelay;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingPeriod}.\\n     */\\n    function votingPeriod() public view virtual override returns (uint256) {\\n        return _votingPeriod;\\n    }\\n\\n    /**\\n     * @dev See {Governor-proposalThreshold}.\\n     */\\n    function proposalThreshold() public view virtual override returns (uint256) {\\n        return _proposalThreshold;\\n    }\\n\\n    /**\\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\\n        _setVotingDelay(newVotingDelay);\\n    }\\n\\n    /**\\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\\n        _setVotingPeriod(newVotingPeriod);\\n    }\\n\\n    /**\\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\\n        _setProposalThreshold(newProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting delay.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\\n        _votingDelay = newVotingDelay;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting period.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\\n        // voting period must be at least one block long\\n        require(newVotingPeriod > 0, \\\"GovernorSettings: voting period too low\\\");\\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\\n        _votingPeriod = newVotingPeriod;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the proposal threshold.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\\n        _proposalThreshold = newProposalThreshold;\\n    }\\n}\\n\",\"keccak256\":\"0xab3781f09dfb447d0c2f5bbb2aafc9ff86333f16c61580ab85d7c8a87491eab9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorTimelockControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGovernorTimelock.sol\\\";\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../TimelockController.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\\n * {Governor} needs the proposer (and ideally the executor) roles for the {Governor} to work properly.\\n *\\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\\n * inaccessible.\\n *\\n * WARNING: Setting up the TimelockController to have additional proposers besides the governor is very risky, as it\\n * grants them powers that they must be trusted or known not to use: 1) {onlyGovernance} functions like {relay} are\\n * available to them through the timelock, and 2) approved governance proposals can be blocked by them, effectively\\n * executing a Denial of Service attack. This risk will be mitigated in a future release.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorTimelockControl is IGovernorTimelock, Governor {\\n    TimelockController private _timelock;\\n    mapping(uint256 => bytes32) private _timelockIds;\\n\\n    /**\\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\\n     */\\n    event TimelockChange(address oldTimelock, address newTimelock);\\n\\n    /**\\n     * @dev Set the timelock.\\n     */\\n    constructor(TimelockController timelockAddress) {\\n        _updateTimelock(timelockAddress);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Overridden version of the {Governor-state} function with added support for the `Queued` status.\\n     */\\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\\n        ProposalState status = super.state(proposalId);\\n\\n        if (status != ProposalState.Succeeded) {\\n            return status;\\n        }\\n\\n        // core tracks execution, so we just have to check if successful proposal have been queued.\\n        bytes32 queueid = _timelockIds[proposalId];\\n        if (queueid == bytes32(0)) {\\n            return status;\\n        } else if (_timelock.isOperationDone(queueid)) {\\n            return ProposalState.Executed;\\n        } else if (_timelock.isOperationPending(queueid)) {\\n            return ProposalState.Queued;\\n        } else {\\n            return ProposalState.Canceled;\\n        }\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the address of the timelock\\n     */\\n    function timelock() public view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the eta of a queued proposal\\n     */\\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\\n    }\\n\\n    /**\\n     * @dev Function to queue a proposal to the timelock.\\n     */\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"Governor: proposal not successful\\\");\\n\\n        uint256 delay = _timelock.getMinDelay();\\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\\n\\n        emit ProposalQueued(proposalId, block.timestamp + delay);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Overridden execute function that run the already queued proposal through the timelock.\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override {\\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Overridden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\\n     * been queued.\\n     */\\n    // This function can reenter through the external call to the timelock, but we assume the timelock is trusted and\\n    // well behaved (according to TimelockController) and this will not happen.\\n    // slither-disable-next-line reentrancy-no-eth\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override returns (uint256) {\\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\\n\\n        if (_timelockIds[proposalId] != 0) {\\n            _timelock.cancel(_timelockIds[proposalId]);\\n            delete _timelockIds[proposalId];\\n        }\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. In this case, the timelock.\\n     */\\n    function _executor() internal view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\\n     * must be proposed, scheduled, and executed through governance proposals.\\n     *\\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\\n     */\\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\\n        _updateTimelock(newTimelock);\\n    }\\n\\n    function _updateTimelock(TimelockController newTimelock) private {\\n        emit TimelockChange(address(_timelock), address(newTimelock));\\n        _timelock = newTimelock;\\n    }\\n}\\n\",\"keccak256\":\"0xde79bde0691601228cdf27fc2fdc85cb01eea836d41780e6e73f778e0a886a5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../utils/IVotes.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes} token.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotes is Governor {\\n    IVotes public immutable token;\\n\\n    constructor(IVotes tokenAddress) {\\n        token = tokenAddress;\\n    }\\n\\n    /**\\n     * Read the voting weight from the token's built in snapshot mechanism (see {Governor-_getVotes}).\\n     */\\n    function _getVotes(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory /*params*/\\n    ) internal view virtual override returns (uint256) {\\n        return token.getPastVotes(account, blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xf818ee82b0faf7938ced9fcc851600b17202c8f6b1b33e01035702cadda684bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./GovernorVotes.sol\\\";\\nimport \\\"../../utils/Checkpoints.sol\\\";\\nimport \\\"../../utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\\n * fraction of the total supply.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotesQuorumFraction is GovernorVotes {\\n    using Checkpoints for Checkpoints.History;\\n\\n    uint256 private _quorumNumerator; // DEPRECATED\\n    Checkpoints.History private _quorumNumeratorHistory;\\n\\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\\n\\n    /**\\n     * @dev Initialize quorum as a fraction of the token's total supply.\\n     *\\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\\n     * customized by overriding {quorumDenominator}.\\n     */\\n    constructor(uint256 quorumNumeratorValue) {\\n        _updateQuorumNumerator(quorumNumeratorValue);\\n    }\\n\\n    /**\\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\\n     */\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        return _quorumNumeratorHistory._checkpoints.length == 0 ? _quorumNumerator : _quorumNumeratorHistory.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the quorum numerator at a specific block number. See {quorumDenominator}.\\n     */\\n    function quorumNumerator(uint256 blockNumber) public view virtual returns (uint256) {\\n        // If history is empty, fallback to old storage\\n        uint256 length = _quorumNumeratorHistory._checkpoints.length;\\n        if (length == 0) {\\n            return _quorumNumerator;\\n        }\\n\\n        // Optimistic search, check the latest checkpoint\\n        Checkpoints.Checkpoint memory latest = _quorumNumeratorHistory._checkpoints[length - 1];\\n        if (latest._blockNumber <= blockNumber) {\\n            return latest._value;\\n        }\\n\\n        // Otherwise, do the binary search\\n        return _quorumNumeratorHistory.getAtBlock(blockNumber);\\n    }\\n\\n    /**\\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\\n     */\\n    function quorumDenominator() public view virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    /**\\n     * @dev Returns the quorum for a block number, in terms of number of votes: `supply * numerator / denominator`.\\n     */\\n    function quorum(uint256 blockNumber) public view virtual override returns (uint256) {\\n        return (token.getPastTotalSupply(blockNumber) * quorumNumerator(blockNumber)) / quorumDenominator();\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - Must be called through a governance proposal.\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\\n        require(\\n            newQuorumNumerator <= quorumDenominator(),\\n            \\\"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\\\"\\n        );\\n\\n        uint256 oldQuorumNumerator = quorumNumerator();\\n\\n        // Make sure we keep track of the original numerator in contracts upgraded from a version without checkpoints.\\n        if (oldQuorumNumerator != 0 && _quorumNumeratorHistory._checkpoints.length == 0) {\\n            _quorumNumeratorHistory._checkpoints.push(\\n                Checkpoints.Checkpoint({_blockNumber: 0, _value: SafeCast.toUint224(oldQuorumNumerator)})\\n            );\\n        }\\n\\n        // Set new quorum for future proposals\\n        _quorumNumeratorHistory.push(newQuorumNumerator);\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n}\\n\",\"keccak256\":\"0x78a9387835f2dd3409988348661df2724630c7bb31bb3da54146c568460c42af\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IGovernor.sol\\\";\\n\\n/**\\n * @dev Extension of the {IGovernor} for timelock supporting modules.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorTimelock is IGovernor {\\n    event ProposalQueued(uint256 proposalId, uint256 eta);\\n\\n    function timelock() public view virtual returns (address);\\n\\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\\n\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n}\\n\",\"keccak256\":\"0xe6234ac4ba0508a3371a46543cdf4bf3a1a404d2d3c3470006741a0da294f974\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (utils/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library defines the `History` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Checkpoints {\\n    struct History {\\n        Checkpoint[] _checkpoints;\\n    }\\n\\n    struct Checkpoint {\\n        uint32 _blockNumber;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Because the number returned corresponds to that at the end of the\\n     * block, the requested block number must be in the past, excluding the current block.\\n     */\\n    function getAtBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCast.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Similar to {upperLookup} but optimized for the case when the searched\\n     * checkpoint is probably \\\"recent\\\", defined as being among the last sqrt(N) checkpoints where N is the number of\\n     * checkpoints.\\n     */\\n    function getAtProbablyRecentBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCast.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(History storage self, uint256 value) internal returns (uint256, uint256) {\\n        return _insert(self._checkpoints, SafeCast.toUint32(block.number), SafeCast.toUint224(value));\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\\n     * be set to `op(latest, delta)`.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        History storage self,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) internal returns (uint256, uint256) {\\n        return push(self, op(latest(self), delta));\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(History storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(History storage self)\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            uint32 _blockNumber,\\n            uint224 _value\\n        )\\n    {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._blockNumber, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(History storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint224 value\\n    ) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoints keys must be increasing.\\n            require(last._blockNumber <= key, \\\"Checkpoint: invalid key\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._blockNumber == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage self, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        Trace224 storage self,\\n        uint32 key,\\n        uint224 value\\n    ) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self)\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            uint32 _key,\\n            uint224 _value\\n        )\\n    {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint224 value\\n    ) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoints keys must be increasing.\\n            require(last._key <= key, \\\"Checkpoint: invalid key\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint224[] storage self, uint256 pos)\\n        private\\n        pure\\n        returns (Checkpoint224 storage result)\\n    {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        Trace160 storage self,\\n        uint96 key,\\n        uint160 value\\n    ) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self)\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            uint96 _key,\\n            uint160 _value\\n        )\\n    {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint160 value\\n    ) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoints keys must be increasing.\\n            require(last._key <= key, \\\"Checkpoint: invalid key\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint160[] storage self, uint256 pos)\\n        private\\n        pure\\n        returns (Checkpoint160 storage result)\\n    {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf586981d605e0c0f07a44e158a3da023bd526409d3709e969d323b2d91398078\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Timers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Tooling for timepoints, timers and delays\\n */\\nlibrary Timers {\\n    struct Timestamp {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(Timestamp storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(Timestamp memory timer) internal view returns (bool) {\\n        return timer._deadline > block.timestamp;\\n    }\\n\\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.timestamp;\\n    }\\n\\n    struct BlockNumber {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(BlockNumber storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\\n        return timer._deadline > block.number;\\n    }\\n\\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x29791a62950a7983e02a673639c1a781d1e448691800456c2ce4b99715391b14\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/DoubleEndedQueue.sol)\\npragma solidity ^0.8.4;\\n\\nimport \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\\n * used in storage, and not in memory.\\n * ```\\n * DoubleEndedQueue.Bytes32Deque queue;\\n * ```\\n *\\n * _Available since v4.6._\\n */\\nlibrary DoubleEndedQueue {\\n    /**\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n     */\\n    error Empty();\\n\\n    /**\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n     */\\n    error OutOfBounds();\\n\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Bytes32Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\\n        if (idx >= deque._end) revert OutOfBounds();\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\\n\",\"keccak256\":\"0x4859ffd6dd69382a1462930c00b6e394007da80e78e510f56930271034737bf2\",\"license\":\"MIT\"},\"contracts/IScoreProvider.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface IScoreProvider {\\n    function viewScore(address account) external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0xdee9d029f7b4c93a4a4ea4b30c40fa78997c74cfd78b76bb2e91d36c3477a06b\"},\"contracts/governance_standard/GovernorContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"../IScoreProvider.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/Governor.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorSettings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract GovernorContract is\\n  Governor,\\n  GovernorSettings,\\n  GovernorCountingSimple,\\n  GovernorVotes,\\n  GovernorVotesQuorumFraction,\\n  GovernorTimelockControl\\n{\\n  address internal scoreProviderAddress;\\n  using SafeMath for uint256;\\n  address _ghoTokenAddress = 0xcbE9771eD31e761b744D3cB9eF78A1f32DD99211;\\n\\n  constructor(\\n    IVotes _token,\\n    TimelockController _timelock,\\n    uint256 _quorumPercentage,\\n    uint256 _votingPeriod,\\n    uint256 _votingDelay,\\n    address _scoreProviderAddress\\n  )\\n    Governor(\\\"GovernorContract\\\")\\n    GovernorSettings(\\n      _votingDelay, /* 1 block */ // voting delay\\n      _votingPeriod, // 45818, /* 1 week */ // voting period\\n      0 // proposal threshold\\n    )\\n    GovernorVotes(_token)\\n    GovernorVotesQuorumFraction(_quorumPercentage)\\n    GovernorTimelockControl(_timelock)\\n  {\\n    scoreProviderAddress = _scoreProviderAddress;\\n  }\\n\\n  function votingDelay()\\n    public\\n    view\\n    override(IGovernor, GovernorSettings)\\n    returns (uint256)\\n  {\\n    return super.votingDelay();\\n  }\\n\\n  function votingPeriod()\\n    public\\n    view\\n    override(IGovernor, GovernorSettings)\\n    returns (uint256)\\n  {\\n    return super.votingPeriod();\\n  }\\n\\n  // The following functions are overrides required by Solidity.\\n\\n  function quorum(uint256 blockNumber)\\n    public\\n    view\\n    override(IGovernor, GovernorVotesQuorumFraction)\\n    returns (uint256)\\n  {\\n    return super.quorum(blockNumber);\\n  }\\n\\n  function getVotes(address account, uint256 blockNumber)\\n    public\\n    view\\n    override(IGovernor, Governor)\\n    returns (uint256)\\n  {\\n    return super.getVotes(account, blockNumber);\\n  }\\n\\n  function state(uint256 proposalId)\\n    public\\n    view\\n    override(Governor, GovernorTimelockControl)\\n    returns (ProposalState)\\n  {\\n    return super.state(proposalId);\\n  }\\n\\n  function propose(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    string memory description\\n  ) public override(Governor, IGovernor) returns (uint256) {\\n    return super.propose(targets, values, calldatas, description);\\n  }\\n\\n  function proposalThreshold()\\n    public\\n    view\\n    override(Governor, GovernorSettings)\\n    returns (uint256)\\n  {\\n    return super.proposalThreshold();\\n  }\\n\\n  function _execute(\\n    uint256 proposalId,\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    bytes32 descriptionHash\\n  ) internal override(Governor, GovernorTimelockControl) {\\n    super._execute(proposalId, targets, values, calldatas, descriptionHash);\\n  }\\n\\n  function _cancel(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    bytes32 descriptionHash\\n  ) internal override(Governor, GovernorTimelockControl) returns (uint256) {\\n    return super._cancel(targets, values, calldatas, descriptionHash);\\n  }\\n\\n  function _executor()\\n    internal\\n    view\\n    override(Governor, GovernorTimelockControl)\\n    returns (address)\\n  {\\n    return super._executor();\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(Governor, GovernorTimelockControl)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  // override\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal override returns (uint256) {\\n        uint256 voteResult = super._castVote(proposalId, account, support, reason, _defaultParams());\\n        // get mstSender score\\n        uint256 score = IScoreProvider(scoreProviderAddress).viewScore(_msgSender());\\n\\n        // send eth  back to msg.sender at the value of the score times gas fee\\n        uint256 GAS_VOTE = 100000;\\n        uint256 scoreValue = score > 100 ? 100 : score;\\n        uint256 numeratorValue = (scoreValue * tx.gasprice * GAS_VOTE);\\n        uint256 _token_amt = numeratorValue.div(100);\\n         \\n        IERC20(_ghoTokenAddress).transferFrom(address(this), _msgSender(),  _token_amt);\\n        \\n        return voteResult;\\n    }\\n}\\n\",\"keccak256\":\"0x7cb5016b965d71476a9bc46bc52faf0f2cd9c9458f2bb20dedf76cf7f008233d\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 607,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 612,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "_proposals",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(ProposalCore)605_storage)"
          },
          {
            "astId": 615,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "_governanceCall",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Bytes32Deque)10090_storage"
          },
          {
            "astId": 3300,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "_votingDelay",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3302,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "_votingPeriod",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3304,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "_proposalThreshold",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3092,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "_proposalVotes",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(ProposalVote)3087_storage)"
          },
          {
            "astId": 3903,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "_quorumNumerator",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3906,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "_quorumNumeratorHistory",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(History)5030_storage"
          },
          {
            "astId": 3483,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "_timelock",
            "offset": 0,
            "slot": "10",
            "type": "t_contract(TimelockController)3066"
          },
          {
            "astId": 3487,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "_timelockIds",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_bytes32)"
          },
          {
            "astId": 10447,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "scoreProviderAddress",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          },
          {
            "astId": 10453,
            "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
            "label": "_ghoTokenAddress",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Checkpoint)5035_storage)dyn_storage": {
            "base": "t_struct(Checkpoint)5035_storage",
            "encoding": "dynamic_array",
            "label": "struct Checkpoints.Checkpoint[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(TimelockController)3066": {
            "encoding": "inplace",
            "label": "contract TimelockController",
            "numberOfBytes": "20"
          },
          "t_int128": {
            "encoding": "inplace",
            "label": "int128",
            "numberOfBytes": "16"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_int128,t_bytes32)": {
            "encoding": "mapping",
            "key": "t_int128",
            "label": "mapping(int128 => bytes32)",
            "numberOfBytes": "32",
            "value": "t_bytes32"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => bytes32)",
            "numberOfBytes": "32",
            "value": "t_bytes32"
          },
          "t_mapping(t_uint256,t_struct(ProposalCore)605_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct Governor.ProposalCore)",
            "numberOfBytes": "32",
            "value": "t_struct(ProposalCore)605_storage"
          },
          "t_mapping(t_uint256,t_struct(ProposalVote)3087_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
            "numberOfBytes": "32",
            "value": "t_struct(ProposalVote)3087_storage"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(BlockNumber)6699_storage": {
            "encoding": "inplace",
            "label": "struct Timers.BlockNumber",
            "members": [
              {
                "astId": 6698,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "_deadline",
                "offset": 0,
                "slot": "0",
                "type": "t_uint64"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Bytes32Deque)10090_storage": {
            "encoding": "inplace",
            "label": "struct DoubleEndedQueue.Bytes32Deque",
            "members": [
              {
                "astId": 10083,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "_begin",
                "offset": 0,
                "slot": "0",
                "type": "t_int128"
              },
              {
                "astId": 10085,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "_end",
                "offset": 16,
                "slot": "0",
                "type": "t_int128"
              },
              {
                "astId": 10089,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "_data",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_int128,t_bytes32)"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Checkpoint)5035_storage": {
            "encoding": "inplace",
            "label": "struct Checkpoints.Checkpoint",
            "members": [
              {
                "astId": 5032,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "_blockNumber",
                "offset": 0,
                "slot": "0",
                "type": "t_uint32"
              },
              {
                "astId": 5034,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "_value",
                "offset": 4,
                "slot": "0",
                "type": "t_uint224"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(History)5030_storage": {
            "encoding": "inplace",
            "label": "struct Checkpoints.History",
            "members": [
              {
                "astId": 5029,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "_checkpoints",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_struct(Checkpoint)5035_storage)dyn_storage"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(ProposalCore)605_storage": {
            "encoding": "inplace",
            "label": "struct Governor.ProposalCore",
            "members": [
              {
                "astId": 597,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "voteStart",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(BlockNumber)6699_storage"
              },
              {
                "astId": 600,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "voteEnd",
                "offset": 0,
                "slot": "1",
                "type": "t_struct(BlockNumber)6699_storage"
              },
              {
                "astId": 602,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "executed",
                "offset": 0,
                "slot": "2",
                "type": "t_bool"
              },
              {
                "astId": 604,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "canceled",
                "offset": 1,
                "slot": "2",
                "type": "t_bool"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(ProposalVote)3087_storage": {
            "encoding": "inplace",
            "label": "struct GovernorCountingSimple.ProposalVote",
            "members": [
              {
                "astId": 3078,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "againstVotes",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 3080,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "forVotes",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 3082,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "abstainVotes",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 3086,
                "contract": "contracts/governance_standard/GovernorContract.sol:GovernorContract",
                "label": "hasVoted",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_bool)"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint224": {
            "encoding": "inplace",
            "label": "uint224",
            "numberOfBytes": "28"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "encoding": "inplace",
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "encoding": "inplace",
            "label": "uint64",
            "numberOfBytes": "8"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/extensions/GovernorCountingSimple.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for simple, 3 options, vote counting.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorCountingSimple is Governor {\\n    /**\\n     * @dev Supported vote types. Matches Governor Bravo ordering.\\n     */\\n    enum VoteType {\\n        Against,\\n        For,\\n        Abstain\\n    }\\n\\n    struct ProposalVote {\\n        uint256 againstVotes;\\n        uint256 forVotes;\\n        uint256 abstainVotes;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    mapping(uint256 => ProposalVote) private _proposalVotes;\\n\\n    /**\\n     * @dev See {IGovernor-COUNTING_MODE}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual override returns (string memory) {\\n        return \\\"support=bravo&quorum=for,abstain\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hasVoted}.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual override returns (bool) {\\n        return _proposalVotes[proposalId].hasVoted[account];\\n    }\\n\\n    /**\\n     * @dev Accessor to the internal vote counts.\\n     */\\n    function proposalVotes(uint256 proposalId)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256 againstVotes,\\n            uint256 forVotes,\\n            uint256 abstainVotes\\n        )\\n    {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n        return (proposalVote.againstVotes, proposalVote.forVotes, proposalVote.abstainVotes);\\n    }\\n\\n    /**\\n     * @dev See {Governor-_quorumReached}.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return quorum(proposalSnapshot(proposalId)) <= proposalVote.forVotes + proposalVote.abstainVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_voteSucceeded}. In this module, the forVotes must be strictly over the againstVotes.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual override returns (bool) {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        return proposalVote.forVotes > proposalVote.againstVotes;\\n    }\\n\\n    /**\\n     * @dev See {Governor-_countVote}. In this module, the support follows the `VoteType` enum (from Governor Bravo).\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight,\\n        bytes memory // params\\n    ) internal virtual override {\\n        ProposalVote storage proposalVote = _proposalVotes[proposalId];\\n\\n        require(!proposalVote.hasVoted[account], \\\"GovernorVotingSimple: vote already cast\\\");\\n        proposalVote.hasVoted[account] = true;\\n\\n        if (support == uint8(VoteType.Against)) {\\n            proposalVote.againstVotes += weight;\\n        } else if (support == uint8(VoteType.For)) {\\n            proposalVote.forVotes += weight;\\n        } else if (support == uint8(VoteType.Abstain)) {\\n            proposalVote.abstainVotes += weight;\\n        } else {\\n            revert(\\\"GovernorVotingSimple: invalid value for enum VoteType\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/governance/extensions/GovernorSettings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/GovernorSettings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Governor.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for settings updatable through governance.\\n *\\n * _Available since v4.4._\\n */\\nabstract contract GovernorSettings is Governor {\\n    uint256 private _votingDelay;\\n    uint256 private _votingPeriod;\\n    uint256 private _proposalThreshold;\\n\\n    event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay);\\n    event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod);\\n    event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold);\\n\\n    /**\\n     * @dev Initialize the governance parameters.\\n     */\\n    constructor(\\n        uint256 initialVotingDelay,\\n        uint256 initialVotingPeriod,\\n        uint256 initialProposalThreshold\\n    ) {\\n        _setVotingDelay(initialVotingDelay);\\n        _setVotingPeriod(initialVotingPeriod);\\n        _setProposalThreshold(initialProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingDelay}.\\n     */\\n    function votingDelay() public view virtual override returns (uint256) {\\n        return _votingDelay;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-votingPeriod}.\\n     */\\n    function votingPeriod() public view virtual override returns (uint256) {\\n        return _votingPeriod;\\n    }\\n\\n    /**\\n     * @dev See {Governor-proposalThreshold}.\\n     */\\n    function proposalThreshold() public view virtual override returns (uint256) {\\n        return _proposalThreshold;\\n    }\\n\\n    /**\\n     * @dev Update the voting delay. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function setVotingDelay(uint256 newVotingDelay) public virtual onlyGovernance {\\n        _setVotingDelay(newVotingDelay);\\n    }\\n\\n    /**\\n     * @dev Update the voting period. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function setVotingPeriod(uint256 newVotingPeriod) public virtual onlyGovernance {\\n        _setVotingPeriod(newVotingPeriod);\\n    }\\n\\n    /**\\n     * @dev Update the proposal threshold. This operation can only be performed through a governance proposal.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function setProposalThreshold(uint256 newProposalThreshold) public virtual onlyGovernance {\\n        _setProposalThreshold(newProposalThreshold);\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting delay.\\n     *\\n     * Emits a {VotingDelaySet} event.\\n     */\\n    function _setVotingDelay(uint256 newVotingDelay) internal virtual {\\n        emit VotingDelaySet(_votingDelay, newVotingDelay);\\n        _votingDelay = newVotingDelay;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the voting period.\\n     *\\n     * Emits a {VotingPeriodSet} event.\\n     */\\n    function _setVotingPeriod(uint256 newVotingPeriod) internal virtual {\\n        // voting period must be at least one block long\\n        require(newVotingPeriod > 0, \\\"GovernorSettings: voting period too low\\\");\\n        emit VotingPeriodSet(_votingPeriod, newVotingPeriod);\\n        _votingPeriod = newVotingPeriod;\\n    }\\n\\n    /**\\n     * @dev Internal setter for the proposal threshold.\\n     *\\n     * Emits a {ProposalThresholdSet} event.\\n     */\\n    function _setProposalThreshold(uint256 newProposalThreshold) internal virtual {\\n        emit ProposalThresholdSet(_proposalThreshold, newProposalThreshold);\\n        _proposalThreshold = newProposalThreshold;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorTimelockControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGovernorTimelock.sol\\\";\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../TimelockController.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} that binds the execution process to an instance of {TimelockController}. This adds a\\n * delay, enforced by the {TimelockController} to all successful proposal (in addition to the voting duration). The\\n * {Governor} needs the proposer (and ideally the executor) roles for the {Governor} to work properly.\\n *\\n * Using this model means the proposal will be operated by the {TimelockController} and not by the {Governor}. Thus,\\n * the assets and permissions must be attached to the {TimelockController}. Any asset sent to the {Governor} will be\\n * inaccessible.\\n *\\n * WARNING: Setting up the TimelockController to have additional proposers besides the governor is very risky, as it\\n * grants them powers that they must be trusted or known not to use: 1) {onlyGovernance} functions like {relay} are\\n * available to them through the timelock, and 2) approved governance proposals can be blocked by them, effectively\\n * executing a Denial of Service attack. This risk will be mitigated in a future release.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorTimelockControl is IGovernorTimelock, Governor {\\n    TimelockController private _timelock;\\n    mapping(uint256 => bytes32) private _timelockIds;\\n\\n    /**\\n     * @dev Emitted when the timelock controller used for proposal execution is modified.\\n     */\\n    event TimelockChange(address oldTimelock, address newTimelock);\\n\\n    /**\\n     * @dev Set the timelock.\\n     */\\n    constructor(TimelockController timelockAddress) {\\n        _updateTimelock(timelockAddress);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, Governor) returns (bool) {\\n        return interfaceId == type(IGovernorTimelock).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Overridden version of the {Governor-state} function with added support for the `Queued` status.\\n     */\\n    function state(uint256 proposalId) public view virtual override(IGovernor, Governor) returns (ProposalState) {\\n        ProposalState status = super.state(proposalId);\\n\\n        if (status != ProposalState.Succeeded) {\\n            return status;\\n        }\\n\\n        // core tracks execution, so we just have to check if successful proposal have been queued.\\n        bytes32 queueid = _timelockIds[proposalId];\\n        if (queueid == bytes32(0)) {\\n            return status;\\n        } else if (_timelock.isOperationDone(queueid)) {\\n            return ProposalState.Executed;\\n        } else if (_timelock.isOperationPending(queueid)) {\\n            return ProposalState.Queued;\\n        } else {\\n            return ProposalState.Canceled;\\n        }\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the address of the timelock\\n     */\\n    function timelock() public view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public accessor to check the eta of a queued proposal\\n     */\\n    function proposalEta(uint256 proposalId) public view virtual override returns (uint256) {\\n        uint256 eta = _timelock.getTimestamp(_timelockIds[proposalId]);\\n        return eta == 1 ? 0 : eta; // _DONE_TIMESTAMP (1) should be replaced with a 0 value\\n    }\\n\\n    /**\\n     * @dev Function to queue a proposal to the timelock.\\n     */\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        require(state(proposalId) == ProposalState.Succeeded, \\\"Governor: proposal not successful\\\");\\n\\n        uint256 delay = _timelock.getMinDelay();\\n        _timelockIds[proposalId] = _timelock.hashOperationBatch(targets, values, calldatas, 0, descriptionHash);\\n        _timelock.scheduleBatch(targets, values, calldatas, 0, descriptionHash, delay);\\n\\n        emit ProposalQueued(proposalId, block.timestamp + delay);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Overridden execute function that run the already queued proposal through the timelock.\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override {\\n        _timelock.executeBatch{value: msg.value}(targets, values, calldatas, 0, descriptionHash);\\n    }\\n\\n    /**\\n     * @dev Overridden version of the {Governor-_cancel} function to cancel the timelocked proposal if it as already\\n     * been queued.\\n     */\\n    // This function can reenter through the external call to the timelock, but we assume the timelock is trusted and\\n    // well behaved (according to TimelockController) and this will not happen.\\n    // slither-disable-next-line reentrancy-no-eth\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual override returns (uint256) {\\n        uint256 proposalId = super._cancel(targets, values, calldatas, descriptionHash);\\n\\n        if (_timelockIds[proposalId] != 0) {\\n            _timelock.cancel(_timelockIds[proposalId]);\\n            delete _timelockIds[proposalId];\\n        }\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. In this case, the timelock.\\n     */\\n    function _executor() internal view virtual override returns (address) {\\n        return address(_timelock);\\n    }\\n\\n    /**\\n     * @dev Public endpoint to update the underlying timelock instance. Restricted to the timelock itself, so updates\\n     * must be proposed, scheduled, and executed through governance proposals.\\n     *\\n     * CAUTION: It is not recommended to change the timelock while there are other queued governance proposals.\\n     */\\n    function updateTimelock(TimelockController newTimelock) external virtual onlyGovernance {\\n        _updateTimelock(newTimelock);\\n    }\\n\\n    function _updateTimelock(TimelockController newTimelock) private {\\n        emit TimelockChange(address(_timelock), address(newTimelock));\\n        _timelock = newTimelock;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (governance/extensions/GovernorVotes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Governor.sol\\\";\\nimport \\\"../utils/IVotes.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token, or since v4.5 an {ERC721Votes} token.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotes is Governor {\\n    IVotes public immutable token;\\n\\n    constructor(IVotes tokenAddress) {\\n        token = tokenAddress;\\n    }\\n\\n    /**\\n     * Read the voting weight from the token's built in snapshot mechanism (see {Governor-_getVotes}).\\n     */\\n    function _getVotes(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory /*params*/\\n    ) internal view virtual override returns (uint256) {\\n        return token.getPastVotes(account, blockNumber);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/extensions/GovernorVotesQuorumFraction.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./GovernorVotes.sol\\\";\\nimport \\\"../../utils/Checkpoints.sol\\\";\\nimport \\\"../../utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token and a quorum expressed as a\\n * fraction of the total supply.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract GovernorVotesQuorumFraction is GovernorVotes {\\n    using Checkpoints for Checkpoints.History;\\n\\n    uint256 private _quorumNumerator; // DEPRECATED\\n    Checkpoints.History private _quorumNumeratorHistory;\\n\\n    event QuorumNumeratorUpdated(uint256 oldQuorumNumerator, uint256 newQuorumNumerator);\\n\\n    /**\\n     * @dev Initialize quorum as a fraction of the token's total supply.\\n     *\\n     * The fraction is specified as `numerator / denominator`. By default the denominator is 100, so quorum is\\n     * specified as a percent: a numerator of 10 corresponds to quorum being 10% of total supply. The denominator can be\\n     * customized by overriding {quorumDenominator}.\\n     */\\n    constructor(uint256 quorumNumeratorValue) {\\n        _updateQuorumNumerator(quorumNumeratorValue);\\n    }\\n\\n    /**\\n     * @dev Returns the current quorum numerator. See {quorumDenominator}.\\n     */\\n    function quorumNumerator() public view virtual returns (uint256) {\\n        return _quorumNumeratorHistory._checkpoints.length == 0 ? _quorumNumerator : _quorumNumeratorHistory.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the quorum numerator at a specific block number. See {quorumDenominator}.\\n     */\\n    function quorumNumerator(uint256 blockNumber) public view virtual returns (uint256) {\\n        // If history is empty, fallback to old storage\\n        uint256 length = _quorumNumeratorHistory._checkpoints.length;\\n        if (length == 0) {\\n            return _quorumNumerator;\\n        }\\n\\n        // Optimistic search, check the latest checkpoint\\n        Checkpoints.Checkpoint memory latest = _quorumNumeratorHistory._checkpoints[length - 1];\\n        if (latest._blockNumber <= blockNumber) {\\n            return latest._value;\\n        }\\n\\n        // Otherwise, do the binary search\\n        return _quorumNumeratorHistory.getAtBlock(blockNumber);\\n    }\\n\\n    /**\\n     * @dev Returns the quorum denominator. Defaults to 100, but may be overridden.\\n     */\\n    function quorumDenominator() public view virtual returns (uint256) {\\n        return 100;\\n    }\\n\\n    /**\\n     * @dev Returns the quorum for a block number, in terms of number of votes: `supply * numerator / denominator`.\\n     */\\n    function quorum(uint256 blockNumber) public view virtual override returns (uint256) {\\n        return (token.getPastTotalSupply(blockNumber) * quorumNumerator(blockNumber)) / quorumDenominator();\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - Must be called through a governance proposal.\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function updateQuorumNumerator(uint256 newQuorumNumerator) external virtual onlyGovernance {\\n        _updateQuorumNumerator(newQuorumNumerator);\\n    }\\n\\n    /**\\n     * @dev Changes the quorum numerator.\\n     *\\n     * Emits a {QuorumNumeratorUpdated} event.\\n     *\\n     * Requirements:\\n     *\\n     * - New numerator must be smaller or equal to the denominator.\\n     */\\n    function _updateQuorumNumerator(uint256 newQuorumNumerator) internal virtual {\\n        require(\\n            newQuorumNumerator <= quorumDenominator(),\\n            \\\"GovernorVotesQuorumFraction: quorumNumerator over quorumDenominator\\\"\\n        );\\n\\n        uint256 oldQuorumNumerator = quorumNumerator();\\n\\n        // Make sure we keep track of the original numerator in contracts upgraded from a version without checkpoints.\\n        if (oldQuorumNumerator != 0 && _quorumNumeratorHistory._checkpoints.length == 0) {\\n            _quorumNumeratorHistory._checkpoints.push(\\n                Checkpoints.Checkpoint({_blockNumber: 0, _value: SafeCast.toUint224(oldQuorumNumerator)})\\n            );\\n        }\\n\\n        // Set new quorum for future proposals\\n        _quorumNumeratorHistory.push(newQuorumNumerator);\\n\\n        emit QuorumNumeratorUpdated(oldQuorumNumerator, newQuorumNumerator);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/extensions/IGovernorTimelock.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IGovernor.sol\\\";\\n\\n/**\\n * @dev Extension of the {IGovernor} for timelock supporting modules.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernorTimelock is IGovernor {\\n    event ProposalQueued(uint256 proposalId, uint256 eta);\\n\\n    function timelock() public view virtual returns (address);\\n\\n    function proposalEta(uint256 proposalId) public view virtual returns (uint256);\\n\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public virtual returns (uint256 proposalId);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/governance/Governor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/Governor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\nimport \\\"../utils/math/SafeCast.sol\\\";\\nimport \\\"../utils/structs/DoubleEndedQueue.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Timers.sol\\\";\\nimport \\\"./IGovernor.sol\\\";\\n\\n/**\\n * @dev Core of the governance system, designed to be extended though various modules.\\n *\\n * This contract is abstract and requires several function to be implemented in various modules:\\n *\\n * - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote}\\n * - A voting module must implement {_getVotes}\\n * - Additionanly, the {votingPeriod} must also be implemented\\n *\\n * _Available since v4.3._\\n */\\nabstract contract Governor is Context, ERC165, EIP712, IGovernor, IERC721Receiver, IERC1155Receiver {\\n    using DoubleEndedQueue for DoubleEndedQueue.Bytes32Deque;\\n    using SafeCast for uint256;\\n    using Timers for Timers.BlockNumber;\\n\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\n    bytes32 public constant EXTENDED_BALLOT_TYPEHASH =\\n        keccak256(\\\"ExtendedBallot(uint256 proposalId,uint8 support,string reason,bytes params)\\\");\\n\\n    struct ProposalCore {\\n        Timers.BlockNumber voteStart;\\n        Timers.BlockNumber voteEnd;\\n        bool executed;\\n        bool canceled;\\n    }\\n\\n    string private _name;\\n\\n    mapping(uint256 => ProposalCore) private _proposals;\\n\\n    // This queue keeps track of the governor operating on itself. Calls to functions protected by the\\n    // {onlyGovernance} modifier needs to be whitelisted in this queue. Whitelisting is set in {_beforeExecute},\\n    // consumed by the {onlyGovernance} modifier and eventually reset in {_afterExecute}. This ensures that the\\n    // execution of {onlyGovernance} protected calls can only be achieved through successful proposals.\\n    DoubleEndedQueue.Bytes32Deque private _governanceCall;\\n\\n    /**\\n     * @dev Restricts a function so it can only be executed through governance proposals. For example, governance\\n     * parameter setters in {GovernorSettings} are protected using this modifier.\\n     *\\n     * The governance executing address may be different from the Governor's own address, for example it could be a\\n     * timelock. This can be customized by modules by overriding {_executor}. The executor is only able to invoke these\\n     * functions during the execution of the governor's {execute} function, and not under any other circumstances. Thus,\\n     * for example, additional timelock proposers are not able to change governance parameters without going through the\\n     * governance protocol (since v4.6).\\n     */\\n    modifier onlyGovernance() {\\n        require(_msgSender() == _executor(), \\\"Governor: onlyGovernance\\\");\\n        if (_executor() != address(this)) {\\n            bytes32 msgDataHash = keccak256(_msgData());\\n            // loop until popping the expected operation - throw if deque is empty (operation not authorized)\\n            while (_governanceCall.popFront() != msgDataHash) {}\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the value for {name} and {version}\\n     */\\n    constructor(string memory name_) EIP712(name_, version()) {\\n        _name = name_;\\n    }\\n\\n    /**\\n     * @dev Function to receive ETH that will be handled by the governor (disabled if executor is a third party contract)\\n     */\\n    receive() external payable virtual {\\n        require(_executor() == address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        // In addition to the current interfaceId, also support previous version of the interfaceId that did not\\n        // include the castVoteWithReasonAndParams() function as standard\\n        return\\n            interfaceId ==\\n            (type(IGovernor).interfaceId ^\\n                this.castVoteWithReasonAndParams.selector ^\\n                this.castVoteWithReasonAndParamsBySig.selector ^\\n                this.getVotesWithParams.selector) ||\\n            interfaceId == type(IGovernor).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-version}.\\n     */\\n    function version() public view virtual override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-hashProposal}.\\n     *\\n     * The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array\\n     * and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id\\n     * can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in\\n     * advance, before the proposal is submitted.\\n     *\\n     * Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the\\n     * same proposal (with same operation and same description) will have the same id if submitted on multiple governors\\n     * across multiple networks. This also means that in order to execute the same operation twice (on the same\\n     * governor) the proposer will have to change the description in order to avoid proposal id conflicts.\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual override returns (uint256) {\\n        return uint256(keccak256(abi.encode(targets, values, calldatas, descriptionHash)));\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-state}.\\n     */\\n    function state(uint256 proposalId) public view virtual override returns (ProposalState) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        uint256 snapshot = proposalSnapshot(proposalId);\\n\\n        if (snapshot == 0) {\\n            revert(\\\"Governor: unknown proposal id\\\");\\n        }\\n\\n        if (snapshot >= block.number) {\\n            return ProposalState.Pending;\\n        }\\n\\n        uint256 deadline = proposalDeadline(proposalId);\\n\\n        if (deadline >= block.number) {\\n            return ProposalState.Active;\\n        }\\n\\n        if (_quorumReached(proposalId) && _voteSucceeded(proposalId)) {\\n            return ProposalState.Succeeded;\\n        } else {\\n            return ProposalState.Defeated;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalSnapshot}.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteStart.getDeadline();\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-proposalDeadline}.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual override returns (uint256) {\\n        return _proposals[proposalId].voteEnd.getDeadline();\\n    }\\n\\n    /**\\n     * @dev Part of the Governor Bravo's interface: _\\\"The number of votes required in order for a voter to become a proposer\\\"_.\\n     */\\n    function proposalThreshold() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Amount of votes already cast passes the threshold limit.\\n     */\\n    function _quorumReached(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Is the proposal successful or not.\\n     */\\n    function _voteSucceeded(uint256 proposalId) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Get the voting weight of `account` at a specific `blockNumber`, for a vote as described by `params`.\\n     */\\n    function _getVotes(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory params\\n    ) internal view virtual returns (uint256);\\n\\n    /**\\n     * @dev Register a vote for `proposalId` by `account` with a given `support`, voting `weight` and voting `params`.\\n     *\\n     * Note: Support is generic and can represent various things depending on the voting system used.\\n     */\\n    function _countVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        uint256 weight,\\n        bytes memory params\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Default additional encoded parameters used by castVote methods that don't include them\\n     *\\n     * Note: Should be overridden by specific implementations to use an appropriate value, the\\n     * meaning of the additional params, in the context of that implementation\\n     */\\n    function _defaultParams() internal view virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-propose}.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual override returns (uint256) {\\n        require(\\n            getVotes(_msgSender(), block.number - 1) >= proposalThreshold(),\\n            \\\"Governor: proposer votes below proposal threshold\\\"\\n        );\\n\\n        uint256 proposalId = hashProposal(targets, values, calldatas, keccak256(bytes(description)));\\n\\n        require(targets.length == values.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length == calldatas.length, \\\"Governor: invalid proposal length\\\");\\n        require(targets.length > 0, \\\"Governor: empty proposal\\\");\\n\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(proposal.voteStart.isUnset(), \\\"Governor: proposal already exists\\\");\\n\\n        uint64 snapshot = block.number.toUint64() + votingDelay().toUint64();\\n        uint64 deadline = snapshot + votingPeriod().toUint64();\\n\\n        proposal.voteStart.setDeadline(snapshot);\\n        proposal.voteEnd.setDeadline(deadline);\\n\\n        emit ProposalCreated(\\n            proposalId,\\n            _msgSender(),\\n            targets,\\n            values,\\n            new string[](targets.length),\\n            calldatas,\\n            snapshot,\\n            deadline,\\n            description\\n        );\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-execute}.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual override returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n\\n        ProposalState status = state(proposalId);\\n        require(\\n            status == ProposalState.Succeeded || status == ProposalState.Queued,\\n            \\\"Governor: proposal not successful\\\"\\n        );\\n        _proposals[proposalId].executed = true;\\n\\n        emit ProposalExecuted(proposalId);\\n\\n        _beforeExecute(proposalId, targets, values, calldatas, descriptionHash);\\n        _execute(proposalId, targets, values, calldatas, descriptionHash);\\n        _afterExecute(proposalId, targets, values, calldatas, descriptionHash);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev Internal execution mechanism. Can be overridden to implement different execution mechanism\\n     */\\n    function _execute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        string memory errorMessage = \\\"Governor: call reverted without message\\\";\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            (bool success, bytes memory returndata) = targets[i].call{value: values[i]}(calldatas[i]);\\n            Address.verifyCallResult(success, returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook before execution is triggered.\\n     */\\n    function _beforeExecute(\\n        uint256, /* proposalId */\\n        address[] memory targets,\\n        uint256[] memory, /* values */\\n        bytes[] memory calldatas,\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        if (_executor() != address(this)) {\\n            for (uint256 i = 0; i < targets.length; ++i) {\\n                if (targets[i] == address(this)) {\\n                    _governanceCall.pushBack(keccak256(calldatas[i]));\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook after execution is triggered.\\n     */\\n    function _afterExecute(\\n        uint256, /* proposalId */\\n        address[] memory, /* targets */\\n        uint256[] memory, /* values */\\n        bytes[] memory, /* calldatas */\\n        bytes32 /*descriptionHash*/\\n    ) internal virtual {\\n        if (_executor() != address(this)) {\\n            if (!_governanceCall.empty()) {\\n                _governanceCall.clear();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal cancel mechanism: locks up the proposal timer, preventing it from being re-submitted. Marks it as\\n     * canceled to allow distinguishing it from executed proposals.\\n     *\\n     * Emits a {IGovernor-ProposalCanceled} event.\\n     */\\n    function _cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) internal virtual returns (uint256) {\\n        uint256 proposalId = hashProposal(targets, values, calldatas, descriptionHash);\\n        ProposalState status = state(proposalId);\\n\\n        require(\\n            status != ProposalState.Canceled && status != ProposalState.Expired && status != ProposalState.Executed,\\n            \\\"Governor: proposal not active\\\"\\n        );\\n        _proposals[proposalId].canceled = true;\\n\\n        emit ProposalCanceled(proposalId);\\n\\n        return proposalId;\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-getVotes}.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        return _getVotes(account, blockNumber, _defaultParams());\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-getVotesWithParams}.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory params\\n    ) public view virtual override returns (uint256) {\\n        return _getVotes(account, blockNumber, params);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVote}.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReason}.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReasonAndParams}.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual override returns (uint256) {\\n        address voter = _msgSender();\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteBySig}.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support))),\\n            v,\\n            r,\\n            s\\n        );\\n        return _castVote(proposalId, voter, support, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IGovernor-castVoteWithReasonAndParamsBySig}.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override returns (uint256) {\\n        address voter = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        EXTENDED_BALLOT_TYPEHASH,\\n                        proposalId,\\n                        support,\\n                        keccak256(bytes(reason)),\\n                        keccak256(params)\\n                    )\\n                )\\n            ),\\n            v,\\n            r,\\n            s\\n        );\\n\\n        return _castVote(proposalId, voter, support, reason, params);\\n    }\\n\\n    /**\\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function. Uses the _defaultParams().\\n     *\\n     * Emits a {IGovernor-VoteCast} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal virtual returns (uint256) {\\n        return _castVote(proposalId, account, support, reason, _defaultParams());\\n    }\\n\\n    /**\\n     * @dev Internal vote casting mechanism: Check that the vote is pending, that it has not been cast yet, retrieve\\n     * voting weight using {IGovernor-getVotes} and call the {_countVote} internal function.\\n     *\\n     * Emits a {IGovernor-VoteCast} event.\\n     */\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason,\\n        bytes memory params\\n    ) internal virtual returns (uint256) {\\n        ProposalCore storage proposal = _proposals[proposalId];\\n        require(state(proposalId) == ProposalState.Active, \\\"Governor: vote not currently active\\\");\\n\\n        uint256 weight = _getVotes(account, proposal.voteStart.getDeadline(), params);\\n        _countVote(proposalId, account, support, weight, params);\\n\\n        if (params.length == 0) {\\n            emit VoteCast(account, proposalId, support, weight, reason);\\n        } else {\\n            emit VoteCastWithParams(account, proposalId, support, weight, reason, params);\\n        }\\n\\n        return weight;\\n    }\\n\\n    /**\\n     * @dev Relays a transaction or function call to an arbitrary target. In cases where the governance executor\\n     * is some contract other than the governor itself, like when using a timelock, this function can be invoked\\n     * in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake.\\n     * Note that if the executor is simply the governor itself, use of `relay` is redundant.\\n     */\\n    function relay(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) external payable virtual onlyGovernance {\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        Address.verifyCallResult(success, returndata, \\\"Governor: relay reverted without message\\\");\\n    }\\n\\n    /**\\n     * @dev Address through which the governor executes action. Will be overloaded by module that execute actions\\n     * through another contract such as a timelock.\\n     */\\n    function _executor() internal view virtual returns (address) {\\n        return address(this);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155Received}.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/governance/IGovernor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernor is IERC165 {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast without params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @dev Emitted when a vote is cast with params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     * `params` are additional encoded parameters. Their intepepretation also depends on the voting module used.\\n     */\\n    event VoteCastWithParams(\\n        address indexed voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight,\\n        string reason,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\\n     * name that describes the behavior. For example:\\n     *\\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\\n     * beginning of the following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\n     * during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\n     * leave time for users to buy voting power, or delegate it, before the voting of a proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * Note: The `blockNumber` parameter corresponds to the snapshot used for counting vote. This allows to scale the\\n     * quorum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber` given additional encoded parameters.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 blockNumber,\\n        bytes memory params\\n    ) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\n     * {IGovernor-votingPeriod} blocks after the voting starts.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters using the user's cryptographic signature.\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/governance/TimelockController.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockController is AccessControl, IERC721Receiver, IERC1155Receiver {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    bytes32 public constant CANCELLER_ROLE = keccak256(\\\"CANCELLER_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with the following parameters:\\n     *\\n     * - `minDelay`: initial minimum delay for operations\\n     * - `proposers`: accounts to be granted proposer and canceller roles\\n     * - `executors`: accounts to be granted executor role\\n     * - `admin`: optional account to be granted admin role; disable with zero address\\n     *\\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\\n     * without being subject to delay, but this role should be subsequently renounced in favor of\\n     * administration through timelocked proposals. Previous versions of this contract would assign\\n     * this admin to the deployer automatically and should be renounced as well.\\n     */\\n    constructor(\\n        uint256 minDelay,\\n        address[] memory proposers,\\n        address[] memory executors,\\n        address admin\\n    ) {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // optional admin\\n        if (admin != address(0)) {\\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\\n        }\\n\\n        // register proposers and cancellers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n            _setupRole(CANCELLER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, AccessControl) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool registered) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not.\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready or not.\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256 duration) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32 hash) {\\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits a {CallScheduled} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to becomes valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'canceller' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        _execute(target, value, payload);\\n        emit CallExecuted(id, 0, target, value, payload);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            address target = targets[i];\\n            uint256 value = values[i];\\n            bytes calldata payload = payloads[i];\\n            _execute(target, value, payload);\\n            emit CallExecuted(id, i, target, value, payload);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     */\\n    function _execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) internal virtual {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155Received}.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/governance/utils/IVotes.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Checkpoints.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (utils/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library defines the `History` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Checkpoints {\\n    struct History {\\n        Checkpoint[] _checkpoints;\\n    }\\n\\n    struct Checkpoint {\\n        uint32 _blockNumber;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Because the number returned corresponds to that at the end of the\\n     * block, the requested block number must be in the past, excluding the current block.\\n     */\\n    function getAtBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCast.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\\n     * before it is returned, or zero otherwise. Similar to {upperLookup} but optimized for the case when the searched\\n     * checkpoint is probably \\\"recent\\\", defined as being among the last sqrt(N) checkpoints where N is the number of\\n     * checkpoints.\\n     */\\n    function getAtProbablyRecentBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\\n        require(blockNumber < block.number, \\\"Checkpoints: block not yet mined\\\");\\n        uint32 key = SafeCast.toUint32(blockNumber);\\n\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(History storage self, uint256 value) internal returns (uint256, uint256) {\\n        return _insert(self._checkpoints, SafeCast.toUint32(block.number), SafeCast.toUint224(value));\\n    }\\n\\n    /**\\n     * @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\\n     * be set to `op(latest, delta)`.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        History storage self,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) internal returns (uint256, uint256) {\\n        return push(self, op(latest(self), delta));\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(History storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(History storage self)\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            uint32 _blockNumber,\\n            uint224 _value\\n        )\\n    {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._blockNumber, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(History storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint224 value\\n    ) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoints keys must be increasing.\\n            require(last._blockNumber <= key, \\\"Checkpoint: invalid key\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._blockNumber == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint({_blockNumber: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._blockNumber < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage self, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        Trace224 storage self,\\n        uint32 key,\\n        uint224 value\\n    ) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self)\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            uint32 _key,\\n            uint224 _value\\n        )\\n    {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint224 value\\n    ) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoints keys must be increasing.\\n            require(last._key <= key, \\\"Checkpoint: invalid key\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint224[] storage self, uint256 pos)\\n        private\\n        pure\\n        returns (Checkpoint224 storage result)\\n    {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     */\\n    function push(\\n        Trace160 storage self,\\n        uint96 key,\\n        uint160 value\\n    ) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the oldest checkpoint with key greater or equal than the search key, or zero if there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint with key lower or equal than the search key.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self)\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            uint96 _key,\\n            uint160 _value\\n        )\\n    {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint160 value\\n    ) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoints keys must be increasing.\\n            require(last._key <= key, \\\"Checkpoint: invalid key\\\");\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the oldest checkpoint whose key is greater or equal than the search key, or `high` if there is none.\\n     * `low` and `high` define a section where to do the search, with inclusive `low` and exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint160[] storage self, uint256 pos)\\n        private\\n        pure\\n        returns (Checkpoint160 storage result)\\n    {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/DoubleEndedQueue.sol)\\npragma solidity ^0.8.4;\\n\\nimport \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\n * the existing queue contents are left in storage.\\n *\\n * The struct is called `Bytes32Deque`. Other types can be cast to and from `bytes32`. This data structure can only be\\n * used in storage, and not in memory.\\n * ```\\n * DoubleEndedQueue.Bytes32Deque queue;\\n * ```\\n *\\n * _Available since v4.6._\\n */\\nlibrary DoubleEndedQueue {\\n    /**\\n     * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\n     */\\n    error Empty();\\n\\n    /**\\n     * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\n     */\\n    error OutOfBounds();\\n\\n    /**\\n     * @dev Indices are signed integers because the queue can grow in any direction. They are 128 bits so begin and end\\n     * are packed in a single storage slot for efficient access. Since the items are added one at a time we can safely\\n     * assume that these 128-bit indices will not overflow, and use unchecked arithmetic.\\n     *\\n     * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\n     * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\n     * lead to unexpected behavior.\\n     *\\n     * Indices are in the range [begin, end) which means the first item is at data[begin] and the last item is at\\n     * data[end - 1].\\n     */\\n    struct Bytes32Deque {\\n        int128 _begin;\\n        int128 _end;\\n        mapping(int128 => bytes32) _data;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the end of the queue.\\n     */\\n    function pushBack(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 backIndex = deque._end;\\n        deque._data[backIndex] = value;\\n        unchecked {\\n            deque._end = backIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes the item at the end of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popBack(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        value = deque._data[backIndex];\\n        delete deque._data[backIndex];\\n        deque._end = backIndex;\\n    }\\n\\n    /**\\n     * @dev Inserts an item at the beginning of the queue.\\n     */\\n    function pushFront(Bytes32Deque storage deque, bytes32 value) internal {\\n        int128 frontIndex;\\n        unchecked {\\n            frontIndex = deque._begin - 1;\\n        }\\n        deque._data[frontIndex] = value;\\n        deque._begin = frontIndex;\\n    }\\n\\n    /**\\n     * @dev Removes the item at the beginning of the queue and returns it.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function popFront(Bytes32Deque storage deque) internal returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        value = deque._data[frontIndex];\\n        delete deque._data[frontIndex];\\n        unchecked {\\n            deque._begin = frontIndex + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the item at the beginning of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function front(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 frontIndex = deque._begin;\\n        return deque._data[frontIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the item at the end of the queue.\\n     *\\n     * Reverts with `Empty` if the queue is empty.\\n     */\\n    function back(Bytes32Deque storage deque) internal view returns (bytes32 value) {\\n        if (empty(deque)) revert Empty();\\n        int128 backIndex;\\n        unchecked {\\n            backIndex = deque._end - 1;\\n        }\\n        return deque._data[backIndex];\\n    }\\n\\n    /**\\n     * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\n     * `length(deque) - 1`.\\n     *\\n     * Reverts with `OutOfBounds` if the index is out of bounds.\\n     */\\n    function at(Bytes32Deque storage deque, uint256 index) internal view returns (bytes32 value) {\\n        // int256(deque._begin) is a safe upcast\\n        int128 idx = SafeCast.toInt128(int256(deque._begin) + SafeCast.toInt256(index));\\n        if (idx >= deque._end) revert OutOfBounds();\\n        return deque._data[idx];\\n    }\\n\\n    /**\\n     * @dev Resets the queue back to being empty.\\n     *\\n     * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\n     * out on potential gas refunds.\\n     */\\n    function clear(Bytes32Deque storage deque) internal {\\n        deque._begin = 0;\\n        deque._end = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of items in the queue.\\n     */\\n    function length(Bytes32Deque storage deque) internal view returns (uint256) {\\n        // The interface preserves the invariant that begin <= end so we assume this will not overflow.\\n        // We also assume there are at most int256.max items in the queue.\\n        unchecked {\\n            return uint256(int256(deque._end) - int256(deque._begin));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the queue is empty.\\n     */\\n    function empty(Bytes32Deque storage deque) internal view returns (bool) {\\n        return deque._end <= deque._begin;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Timers.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Timers.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Tooling for timepoints, timers and delays\\n */\\nlibrary Timers {\\n    struct Timestamp {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(Timestamp storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(Timestamp memory timer) internal view returns (bool) {\\n        return timer._deadline > block.timestamp;\\n    }\\n\\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.timestamp;\\n    }\\n\\n    struct BlockNumber {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(BlockNumber storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\\n        return timer._deadline > block.number;\\n    }\\n\\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.number;\\n    }\\n}\\n\"\n    },\n    \"contracts/governance_standard/GovernorContract.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"../IScoreProvider.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/Governor.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/extensions/GovernorSettings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract GovernorContract is\\n  Governor,\\n  GovernorSettings,\\n  GovernorCountingSimple,\\n  GovernorVotes,\\n  GovernorVotesQuorumFraction,\\n  GovernorTimelockControl\\n{\\n  address internal scoreProviderAddress;\\n  using SafeMath for uint256;\\n  address _ghoTokenAddress = 0xcbE9771eD31e761b744D3cB9eF78A1f32DD99211;\\n\\n  constructor(\\n    IVotes _token,\\n    TimelockController _timelock,\\n    uint256 _quorumPercentage,\\n    uint256 _votingPeriod,\\n    uint256 _votingDelay,\\n    address _scoreProviderAddress\\n  )\\n    Governor(\\\"GovernorContract\\\")\\n    GovernorSettings(\\n      _votingDelay, /* 1 block */ // voting delay\\n      _votingPeriod, // 45818, /* 1 week */ // voting period\\n      0 // proposal threshold\\n    )\\n    GovernorVotes(_token)\\n    GovernorVotesQuorumFraction(_quorumPercentage)\\n    GovernorTimelockControl(_timelock)\\n  {\\n    scoreProviderAddress = _scoreProviderAddress;\\n  }\\n\\n  function votingDelay()\\n    public\\n    view\\n    override(IGovernor, GovernorSettings)\\n    returns (uint256)\\n  {\\n    return super.votingDelay();\\n  }\\n\\n  function votingPeriod()\\n    public\\n    view\\n    override(IGovernor, GovernorSettings)\\n    returns (uint256)\\n  {\\n    return super.votingPeriod();\\n  }\\n\\n  // The following functions are overrides required by Solidity.\\n\\n  function quorum(uint256 blockNumber)\\n    public\\n    view\\n    override(IGovernor, GovernorVotesQuorumFraction)\\n    returns (uint256)\\n  {\\n    return super.quorum(blockNumber);\\n  }\\n\\n  function getVotes(address account, uint256 blockNumber)\\n    public\\n    view\\n    override(IGovernor, Governor)\\n    returns (uint256)\\n  {\\n    return super.getVotes(account, blockNumber);\\n  }\\n\\n  function state(uint256 proposalId)\\n    public\\n    view\\n    override(Governor, GovernorTimelockControl)\\n    returns (ProposalState)\\n  {\\n    return super.state(proposalId);\\n  }\\n\\n  function propose(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    string memory description\\n  ) public override(Governor, IGovernor) returns (uint256) {\\n    return super.propose(targets, values, calldatas, description);\\n  }\\n\\n  function proposalThreshold()\\n    public\\n    view\\n    override(Governor, GovernorSettings)\\n    returns (uint256)\\n  {\\n    return super.proposalThreshold();\\n  }\\n\\n  function _execute(\\n    uint256 proposalId,\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    bytes32 descriptionHash\\n  ) internal override(Governor, GovernorTimelockControl) {\\n    super._execute(proposalId, targets, values, calldatas, descriptionHash);\\n  }\\n\\n  function _cancel(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    bytes[] memory calldatas,\\n    bytes32 descriptionHash\\n  ) internal override(Governor, GovernorTimelockControl) returns (uint256) {\\n    return super._cancel(targets, values, calldatas, descriptionHash);\\n  }\\n\\n  function _executor()\\n    internal\\n    view\\n    override(Governor, GovernorTimelockControl)\\n    returns (address)\\n  {\\n    return super._executor();\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(Governor, GovernorTimelockControl)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  // override\\n    function _castVote(\\n        uint256 proposalId,\\n        address account,\\n        uint8 support,\\n        string memory reason\\n    ) internal override returns (uint256) {\\n        uint256 voteResult = super._castVote(proposalId, account, support, reason, _defaultParams());\\n        // get mstSender score\\n        uint256 score = IScoreProvider(scoreProviderAddress).viewScore(_msgSender());\\n\\n        // send eth  back to msg.sender at the value of the score times gas fee\\n        uint256 GAS_VOTE = 100000;\\n        uint256 scoreValue = score > 100 ? 100 : score;\\n        uint256 numeratorValue = (scoreValue * tx.gasprice * GAS_VOTE);\\n        uint256 _token_amt = numeratorValue.div(100);\\n         \\n        IERC20(_ghoTokenAddress).transferFrom(address(this), _msgSender(),  _token_amt);\\n        \\n        return voteResult;\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IAccount.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\"\n    },\n    \"contracts/interfaces/IAggregatedAccount.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IAccount.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\n\\n/**\\n * Aggregated account, that support IAggregator.\\n * - the validateUserOp will be called only after the aggregator validated this account (with all other accounts of this aggregator).\\n * - the validateUserOp MUST valiate the aggregator parameter, and MAY ignore the userOp.signature field.\\n */\\ninterface IAggregatedAccount is IAccount {\\n\\n    /**\\n     * return the address of the signature aggregator the account supports.\\n     */\\n    function getAggregator() external view returns (address);\\n}\\n\"\n    },\n    \"contracts/interfaces/IAggregator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. then it return data to be used when creating the handleOps:\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatesSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatesSignature);\\n}\\n\"\n    },\n    \"contracts/interfaces/ICreate2Deployer.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/**\\n * create2-based deployer (eip-2470)\\n */\\ninterface ICreate2Deployer {\\n    function deploy(bytes memory initCode, bytes32 salt) external returns (address);\\n}\\n\\n\"\n    },\n    \"contracts/interfaces/IEntryPoint.sol\": {\n      \"content\": \"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\"\n    },\n    \"contracts/interfaces/IERC1155TokenReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\n*/\\ninterface IERC1155TokenReceiver {\\n    /**\\n        @notice Handle the receipt of a single ERC1155 token type.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \\n        This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\n        This function MUST revert if it rejects the transfer.\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\\n        @param _from      The address which previously owned the token\\n        @param _id        The ID of the token being transferred\\n        @param _value     The amount of tokens being transferred\\n        @param _data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @notice Handle the receipt of multiple ERC1155 token types.\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.        \\n        This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\n        This function MUST revert if it rejects the transfer(s).\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\\n        @param _from      The address which previously owned the token\\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\\n        @param _data      Additional data with no specified format\\n        @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n    */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC721TokenReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721TokenReceiver {\\n    /// @notice Handle the receipt of an NFT\\n    /// @dev The ERC721 smart contract calls this function on the recipient\\n    ///  after a `transfer`. This function MAY throw to revert and reject the\\n    ///  transfer. Return of other than the magic value MUST result in the\\n    ///  transaction being reverted.\\n    ///  Note: the contract address is always the message sender.\\n    /// @param _operator The address which called `safeTransferFrom` function\\n    /// @param _from The address which previously owned the token\\n    /// @param _tokenId The NFT identifier which is being transferred\\n    /// @param _data Additional data with no specified format\\n    /// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    ///  unless throwing\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC777TokensRecipient.sol\": {\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.12;\\n\\ninterface IERC777TokensRecipient {\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IGuardianControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n/**\\n * @dev Interface of the GuardianControl\\n */\\ninterface IGuardianControl {\\n    struct GuardianLayout {\\n        // guardian now\\n        address guardian;\\n        // guardian next\\n        address pendingGuardian;\\n        // `guardian next` effective time\\n        uint64 activateTime;\\n        // guardian delay\\n        uint32 guardianDelay;\\n        uint256[50] __gap;\\n    }\\n\\n\\n    /**\\n     * @dev Emitted when `guardian` is set. ( Just added, not yet reached the activate time )\\n     */\\n    event GuardianSet(address guardian, uint64 activateTime);\\n\\n    /**\\n     * @dev Emitted when `guardian` is confirmed. ( Initialize or reached the activate time )\\n     */\\n    event GuardianConfirmed(address guardian, address previousGuardian);\\n\\n    /**\\n     * @dev Emitted when `guardian` is canceled. ( Cancel before reached the activate time )\\n     */\\n    event GuardianCanceled(address guardian);\\n    \\n}\\n\"\n    },\n    \"contracts/interfaces/IGuardianMultiSigWallet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface IGuardianMultiSigWallet {\\n\\n    function initialize(address[] calldata _guardians, uint256 _threshold) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/ILogicUpgradeControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n/**\\n * @dev Interface of the GuardianControl\\n */\\ninterface ILogicUpgradeControl {\\n    struct UpgradeLayout {\\n        uint32 upgradeDelay; // upgradeDelay\\n        uint64 activateTime; // activateTime\\n        address pendingImplementation; // pendingImplementation\\n        uint256[50] __gap;\\n    }\\n\\n    /**\\n     * @dev Emitted before upgrade logic\\n     */\\n    event PreUpgrade(address newLogic, uint64 activateTime);\\n\\n    /**\\n     * @dev Emitted when `implementation` is upgraded.\\n     */\\n    event Upgraded(address newImplementation);\\n}\\n\"\n    },\n    \"contracts/interfaces/IPaymaster.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\\n * a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\\n */\\ninterface IPaymaster {\\n\\n    enum PostOpMode {\\n        opSucceeded, // user op succeeded\\n        opReverted, // user op reverted. still has to pay for gas.\\n        postOpReverted //user op succeeded, but caused postOp to revert. Now it's a 2nd call, after user's op was deliberately reverted.\\n    }\\n\\n    /**\\n     * payment validation: check if paymaster agrees to pay.\\n     * Must verify sender is the entryPoint.\\n     * Revert to reject this request.\\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted)\\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\\n     * @param userOp the user operation\\n     * @param userOpHash hash of the user's request data.\\n     * @param maxCost the maximum cost of this transaction (based on maximum gas and gas price from userOp)\\n     * @return context value to send to a postOp\\n     *      zero length to signify postOp is not required.\\n     * @return validationData signature and time-range of this operation, encoded the same as the return value of validateUserOperation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\\n    external returns (bytes memory context, uint256 validationData);\\n\\n    /**\\n     * post-operation handler.\\n     * Must verify sender is the entryPoint\\n     * @param mode enum with the following options:\\n     *      opSucceeded - user operation succeeded.\\n     *      opReverted  - user op reverted. still has to pay for gas.\\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\\n     * @param context - the context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - actual gas used so far (without this postOp call).\\n     */\\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IStakeManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/UserOperation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n    /**\\n     * User Operation struct\\n     * @param sender the sender account of this request\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor\\n     * @param callData the method call to execute on this account.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter\\n     * @param paymasterAndData if set, this field hold the paymaster address and \\\"paymaster-specific-data\\\". the paymaster will pay for the transaction instead of the sender\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        //lighter signature scheme. must match UserOp.ts#packUserOp\\n        bytes calldata sig = userOp.signature;\\n        // copy directly the userOp from calldata up to (but not including) the signature.\\n        // this encoding depends on the ABI encoding of calldata, but is much lighter to copy\\n        // than referencing each field separately.\\n        assembly {\\n            let ofs := userOp\\n            let len := sub(sub(sig.offset, ofs), 32)\\n            ret := mload(0x40)\\n            mstore(0x40, add(ret, add(len, 32)))\\n            mstore(ret, len)\\n            calldatacopy(add(ret, 32), ofs, len)\\n        }\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\n    },\n    \"contracts/IScoreProvider.sol\": {\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IScoreProvider {\\n    function viewScore(address account) external view returns (uint256);\\n}\\n\\n\"\n    },\n    \"contracts/paymaster/interfaces/IPriceOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IPriceOracle {\\n\\n    function exchangePrice(address _token) external view returns (uint256 price, uint8 decimals);\\n\\n}\\n\"\n    },\n    \"contracts/paymaster/interfaces/ITokenPaymaster.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"../../interfaces/IPaymaster.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\ninterface ITokenPaymaster is IPaymaster, IERC165 {\\n\\n    /**\\n     * @dev Emitted when token is added.\\n     */\\n    event TokenAdded(address token);\\n\\n    /**\\n     * @dev Emitted when token is removed.\\n     */\\n    event TokenRemoved(address token);\\n\\n    /**\\n     * @dev Returns the supported entrypoint.\\n     */\\n    function entryPoint() external view returns (address);\\n    \\n\\n    /**\\n     * @dev Returns true if this contract supports the given token address.\\n     */\\n    function isSupportedToken(address _token) external view returns (bool);\\n\\n\\n    /**\\n     * @dev Returns the exchange price of the token in wei.\\n     */\\n    function exchangePrice(address _token) external view returns (uint256,uint8);\\n\\n\\n}\\n\"\n    },\n    \"contracts/paymaster/PriceOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract PriceOracle is IPriceOracle {\\n    /**\\n     * @notice for security reason, the price feed is immutable\\n     */\\n    AggregatorV3Interface public immutable priceFeed;\\n\\n    mapping (address => bool) private supportedToken;\\n\\n    constructor(AggregatorV3Interface _priceFeed) {\\n        priceFeed = _priceFeed;\\n        supportedToken[address(0)] = true;\\n    }\\n\\n    function exchangePrice(\\n        address token\\n    ) external view override returns (uint256 price, uint8 decimals) {\\n        (token);\\n        (\\n            /* uint80 roundID */,\\n            int256 _price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n        //  price -> uint256\\n        require(_price >= 0, \\\"price is negative\\\");\\n        price = uint256(_price);\\n        decimals = priceFeed.decimals();\\n    }\\n}\\n\"\n    },\n    \"contracts/paymaster/TokenPaymaster.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ITokenPaymaster.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ncontract TokenPaymaster is ITokenPaymaster, Ownable {\\n    using UserOperationLib for UserOperation;\\n    using SafeERC20 for IERC20;\\n\\n    IEntryPoint public immutable _IEntryPoint;\\n    address public immutable walletFactory;\\n\\n    mapping(address => IPriceOracle) private supportedToken;\\n\\n    // calculated cost of the postOp\\n    uint256 private constant COST_OF_POST = 40000;\\n\\n    // Trusted token approve gas cost\\n    uint256 private constant SAFE_APPROVE_GAS_COST = 50000;\\n\\n\\n    constructor(IEntryPoint _entryPoint, address _owner, address _walletFactory) {\\n        require(address(_entryPoint) != address(0), \\\"invalid etnrypoint addr\\\");\\n        _IEntryPoint = _entryPoint;\\n\\n        if (_owner != address(0)) {\\n            _transferOwnership(_owner);\\n        }\\n        require(address(_walletFactory) != address(0), \\\"invalid etnrypoint addr\\\");\\n        walletFactory = _walletFactory;\\n    }\\n\\n    /**\\n     * @dev Returns the supported entrypoint.\\n     */\\n    function entryPoint() external view override returns (address) {\\n        return address(_IEntryPoint);\\n    }\\n\\n    /**\\n     * @dev Returns true if this contract supports the given token address.\\n     */\\n    function isSupportedToken(\\n        address _token\\n    ) external view override returns (bool) {\\n        return _isSupportedToken(_token);\\n    }\\n\\n    function _isSupportedToken(address _token) private view returns (bool) {\\n        return address(supportedToken[_token]) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns the exchange price of the token in wei.\\n     */\\n    function exchangePrice(\\n        address _token\\n    ) external view override returns (uint256 price, uint8 decimals) {\\n\\n        /*\\n\\n            Note the current alpha version of paymaster is using storage other than \\n            `account storage`, bundler needs to whitelist the current paymaster.\\n            (this means that the bundler has to take some risk itself)\\n\\n        */\\n\\n        (price, decimals) = supportedToken[_token].exchangePrice(_token);\\n        price = (price * 99) / 100; // 1% conver chainlink `Deviation threshold`\\n    }\\n\\n    /**\\n     * @dev add a token to the supported token list.\\n     */\\n    function setToken(\\n        address[] calldata _token,\\n        address[] calldata _priceOracle\\n    ) external onlyOwner {\\n        require(_token.length == _priceOracle.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _token.length; i++) {\\n            address token = _token[i];\\n            address priceOracle = _priceOracle[i];\\n            require(token != address(0), \\\"token cannot be zero address\\\");\\n            address currentPriceOracle = address(supportedToken[token]);\\n            if (priceOracle == address(0)) {\\n                if (currentPriceOracle != address(0)) {\\n                    // remove token\\n                    delete supportedToken[token];\\n                    emit TokenRemoved(token);\\n                }\\n            } else {\\n                if (currentPriceOracle != address(0)) {\\n                    emit TokenRemoved(currentPriceOracle);\\n                }\\n                supportedToken[token] = IPriceOracle(priceOracle);\\n                emit TokenAdded(token);\\n            }\\n        }\\n    }\\n\\n    function validatePaymasterUserOp(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 maxCost\\n    ) external view override returns (bytes memory context, uint256 deadline) {\\n        _requireFromEntryPoint();\\n        return _validatePaymasterUserOp(userOp, userOpHash, maxCost);\\n    }\\n\\n    function postOp(\\n        PostOpMode mode,\\n        bytes calldata context,\\n        uint256 actualGasCost\\n    ) external override {\\n        _requireFromEntryPoint();\\n        _postOp(mode, context, actualGasCost);\\n    }\\n\\n    function _decodeApprove(\\n        bytes memory func\\n    ) private pure returns (address spender, uint256 value) {\\n        // 0x095ea7b3 approve(address,uint256)\\n        // 0x095ea7b3   address  uint256\\n        // ____4_____|____32___|___32__\\n\\n        require(bytes4(func) == bytes4(0x095ea7b3), \\\"invalid approve func\\\");\\n        assembly {\\n            spender := mload(add(func, 36)) // 32 + 4\\n            value := mload(add(func, 68)) // 32 + 4 +32\\n        }\\n    }\\n\\n    function _validateConstructor(\\n        UserOperation calldata userOp,\\n        address token,\\n        uint256 tokenRequiredPreFund\\n    ) internal view {\\n        address factory = address(bytes20(userOp.initCode));\\n        require(factory == walletFactory, \\\"unknown wallet factory\\\");\\n        require(\\n            bytes4(userOp.callData) == bytes4(0x2763604f /* 0x2763604f execFromEntryPoint(address[],uint256[],bytes[]) */ ),\\n            \\\"invalid callData\\\"\\n        );\\n        (\\n            address[] memory dest,\\n            uint256[] memory value,\\n            bytes[] memory func\\n        ) = abi.decode(userOp.callData[4:], (address[], uint256[], bytes[]));\\n        require(dest.length == value.length && dest.length == func.length, \\\"invalid callData\\\");\\n\\n        address _destAddress = address(0);\\n        for (uint256 i = 0; i < dest.length; i++) {\\n            address destAddr = dest[i];\\n            require(_isSupportedToken(destAddr), \\\"unsupported token\\\");\\n            if (destAddr == token) {\\n                (address spender, uint256 amount) = _decodeApprove(func[i]);\\n                require(spender == address(this), \\\"invalid spender\\\");\\n                require(amount >= tokenRequiredPreFund, \\\"not enough approve\\\");\\n            }\\n            require(destAddr > _destAddress, \\\"duplicate\\\");\\n            _destAddress = destAddr;\\n        }\\n        // callGasLimit\\n        uint256 callGasLimit = dest.length * SAFE_APPROVE_GAS_COST;\\n        require(\\n            userOp.callGasLimit >= callGasLimit,\\n            \\\"Paymaster: gas too low for postOp\\\"\\n        );\\n    }\\n\\n    function _validatePaymasterUserOp(\\n        UserOperation calldata userOp,\\n        bytes32 /*userOpHash*/,\\n        uint256 requiredPreFund\\n    ) private view returns (bytes memory context, uint256 deadline) {\\n        require(\\n            userOp.verificationGasLimit > 45000,\\n            \\\"Paymaster: gas too low for postOp\\\"\\n        );\\n\\n        address sender = userOp.getSender();\\n\\n        // paymasterAndData: [paymaster, token, maxCost]\\n        (address token, uint256 maxCost) = abi.decode(\\n            userOp.paymasterAndData[20:],\\n            (address, uint256)\\n        );\\n        IERC20 ERC20Token = IERC20(token);\\n\\n        (uint256 _price, uint8 _decimals) = this.exchangePrice(token);\\n        uint8 tokenDecimals = IERC20Metadata(token).decimals();\\n\\n        // #risk: overflow\\n        // exchangeRate = ( _price * 10^tokenDecimals ) / 10^_decimals / 10^18\\n        uint256 exchangeRate = (_price * 10 ** tokenDecimals) / 10 ** _decimals; // ./10^18\\n        // tokenRequiredPreFund = requiredPreFund * exchangeRate / 10^18\\n\\n        uint256 costOfPost = userOp.gasPrice() * COST_OF_POST;\\n\\n        uint256 tokenRequiredPreFund = ((requiredPreFund + costOfPost) *\\n            exchangeRate) / 10 ** 18;\\n\\n        require(tokenRequiredPreFund <= maxCost, \\\"Paymaster: maxCost too low\\\");\\n\\n        if (userOp.initCode.length != 0) {\\n            _validateConstructor(userOp, token, tokenRequiredPreFund);\\n        } else {\\n            require(\\n                ERC20Token.allowance(sender, address(this)) >=\\n                    tokenRequiredPreFund,\\n                \\\"Paymaster: not enough allowance\\\"\\n            );\\n        }\\n\\n        require(\\n            ERC20Token.balanceOf(sender) >= tokenRequiredPreFund,\\n            \\\"Paymaster: not enough balance\\\"\\n        );\\n\\n        return (abi.encode(sender, token, costOfPost, exchangeRate), 0);\\n    }\\n\\n    /**\\n     * post-operation handler.\\n     * (verified to be called only through the entryPoint)\\n     * @dev if subclass returns a non-empty context from validatePaymasterUserOp, it must also implement this method.\\n     * @param mode enum with the following options:\\n     *      opSucceeded - user operation succeeded.\\n     *      opReverted  - user op reverted. still has to pay for gas.\\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\\n     * @param context - the context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - actual gas used so far (without this postOp call).\\n     */\\n    function _postOp(\\n        PostOpMode mode,\\n        bytes calldata context,\\n        uint256 actualGasCost\\n    ) private {\\n        (mode);\\n        (\\n            address sender,\\n            address payable token,\\n            uint256 costOfPost,\\n            uint256 exchangeRate\\n        ) = abi.decode(context, (address, address, uint256, uint256));\\n        uint256 tokenRequiredFund = ((actualGasCost + costOfPost) *\\n            exchangeRate) / 10 ** 18;\\n        IERC20(token).safeTransferFrom(sender, address(this), tokenRequiredFund);\\n    }\\n\\n    /**\\n     * add a deposit for this paymaster, used for paying for transaction fees\\n     */\\n    function deposit() public payable {\\n        _IEntryPoint.depositTo{value: msg.value}(address(this));\\n    }\\n\\n    /**\\n     * withdraw value from the deposit\\n     * @param withdrawAddress target to send to\\n     * @param amount to withdraw\\n     */\\n    function withdrawTo(\\n        address payable withdrawAddress,\\n        uint256 amount\\n    ) public onlyOwner {\\n        _IEntryPoint.withdrawTo(withdrawAddress, amount);\\n    }\\n\\n    /**\\n     * add stake for this paymaster.\\n     * This method can also carry eth value to add to the current stake.\\n     * @param unstakeDelaySec - the unstake delay for this paymaster. Can only be increased.\\n     */\\n    function addStake(uint32 unstakeDelaySec) external payable onlyOwner {\\n        _IEntryPoint.addStake{value: msg.value}(unstakeDelaySec);\\n    }\\n\\n    /**\\n     * return current paymaster's deposit on the entryPoint.\\n     */\\n    function getDeposit() public view returns (uint256) {\\n        return _IEntryPoint.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * unlock the stake, in order to withdraw it.\\n     * The paymaster can't serve requests once unlocked, until it calls addStake again\\n     */\\n    function unlockStake() external onlyOwner {\\n        _IEntryPoint.unlockStake();\\n    }\\n\\n    /**\\n     * withdraw the entire paymaster's stake.\\n     * stake must be unlocked first (and then wait for the unstakeDelay to be over)\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external onlyOwner {\\n        _IEntryPoint.withdrawStake(withdrawAddress);\\n    }\\n\\n    /// validate the call is made from a valid entrypoint\\n    function _requireFromEntryPoint() private view {\\n        require(msg.sender == address(_IEntryPoint));\\n    }\\n\\n    function _withdrawToken(address token, address to, uint256 amount) private {\\n        IERC20(token).transfer(to, amount);\\n    }\\n\\n    // withdraw token from this contract\\n    function withdrawToken(address token, address to, uint256 amount) external onlyOwner {\\n        _withdrawToken(token, to, amount);\\n    }\\n\\n    // withdraw token from this contract\\n    function withdrawToken(address[] calldata token, address to, uint256[] calldata amount) external onlyOwner {\\n        require(token.length == amount.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < token.length; i++) {\\n            _withdrawToken(token[i], to, amount[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public pure override(IERC165) returns (bool) {\\n        return interfaceId == type(ITokenPaymaster).interfaceId;\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "7381e15fb332231eba315a6b1d05756f",
      "transactionHash": "0xbf9d5c62e21f4e3e250a1cfd7fe5cab1df2554b3cff1e97ebb8f3996aee4276c",
      "args": [
        "0x64845507e9304ea3427440837d5a000D9Aa08fc0",
        "0x53772b323Ae754007d320125f60e7Da15963c5ef",
        4,
        5,
        1,
        "0x3baEf58f49e836d5127a161Ce827ecBa3577B73d"
      ]
    },
    "decoded": {
      "from": "0x76C3038Ef92B1E917d47F67767dA784a027582D4",
      "gasPrice": "1",
      "gasLimit": "3626422",
      "to": null,
      "value": "0",
      "nonce": 4,
      "data": "0x610160604052600d80546001600160a01b03191673cbe9771ed31e761b744d3cb9ef78a1f32dd992111790553480156200003857600080fd5b50604051620046bd380380620046bd8339810160408190526200005b91620008fd565b848487848660006040518060400160405280601081526020016f11dbdd995c9b9bdc90dbdb9d1c9858dd60821b815250806200009c620001ba60201b60201c565b815160208084019190912082518383012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c00190528051940193909320919290916080523060c052610120525050825162000142925060009150602084019062000848565b5062000150905083620001d5565b6200015b8262000216565b6200016681620002bd565b5050506001600160a01b0316610140526200018181620002fe565b506200018d8162000476565b50600c80546001600160a01b0319166001600160a01b039290921691909117905550620009d19350505050565b6040805180820190915260018152603160f81b602082015290565b60045460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600455565b600081116200027c5760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084015b60405180910390fd5b60055460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600555565b60065460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600655565b6064811115620003835760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a40162000273565b60006200038f620004df565b90508015801590620003a15750600954155b156200041c5760096000016040518060400160405280600063ffffffff168152602001620003da846200051760201b620014ad1760201c565b6001600160e01b0390811690915282546001810184556000938452602093849020835194909301519091166401000000000263ffffffff909316929092179101555b620004378260096200058660201b6200151a1790919060201c565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b600a54604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600954600090156200051057620005026009620005d960201b620015501760201c565b6001600160e01b0316905090565b5060085490565b60006001600160e01b03821115620005825760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b606482015260840162000273565b5090565b600080620005c384600001620005a7436200062760201b6200158e1760201c565b620005bd866200051760201b620014ad1760201c565b6200068e565b6001600160e01b03918216969116945092505050565b805460009080156200061d576200060583620005f76001846200096e565b600091825260209091200190565b5464010000000090046001600160e01b031662000620565b60005b9392505050565b600063ffffffff821115620005825760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b606482015260840162000273565b825460009081908015620007ea576000620006b087620005f76001856200096e565b60408051808201909152905463ffffffff8082168084526401000000009092046001600160e01b031660208401529192509087161015620007345760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b6579000000000000000000604482015260640162000273565b8563ffffffff16816000015163ffffffff1614156200078957846200076088620005f76001866200096e565b80546001600160e01b03929092166401000000000263ffffffff909216919091179055620007d9565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216640100000000029216919091179101555b602001519250839150620008409050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a8152918220955192519093166401000000000291909316179201919091559050815b935093915050565b828054620008569062000994565b90600052602060002090601f0160209004810192826200087a5760008555620008c5565b82601f106200089557805160ff1916838001178555620008c5565b82800160010185558215620008c5579182015b82811115620008c5578251825591602001919060010190620008a8565b50620005829291505b80821115620005825760008155600101620008ce565b6001600160a01b0381168114620008fa57600080fd5b50565b60008060008060008060c087890312156200091757600080fd5b86516200092481620008e4565b60208801519096506200093781620008e4565b8095505060408701519350606087015192506080870151915060a08701516200096081620008e4565b809150509295509295509295565b6000828210156200098f57634e487b7160e01b600052601160045260246000fd5b500390565b600181811c90821680620009a957607f821691505b60208210811415620009cb57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161014051613c8362000a3a6000396000818161086901528181612146015261235b01526000612681015260006126d0015260006126ab015260006126040152600061262e015260006126580152613c836000f3fe60806040526004361061024a5760003560e01c80637b3c71d311610139578063c28bc2fa116100b6578063ea0217cf1161007a578063ea0217cf146107ab578063eb9019d4146107cb578063ece40cc1146107eb578063f23a6e611461080b578063f8ce560a14610837578063fc0c546a1461085757600080fd5b8063c28bc2fa146106cc578063c59057e4146106df578063d33219b4146106ff578063dd4e2ba514610731578063deaaa7cc1461077757600080fd5b8063a890c910116100fd578063a890c9101461062b578063ab58fb8e1461064b578063b58131b01461066b578063bc197c8114610680578063c01f9e37146106ac57600080fd5b80637b3c71d3146105a25780637d5e81e2146105c257806397c3d334146105e25780639a802a6d146105f6578063a7713a701461061657600080fd5b80633932abb1116101c757806354fd4d501161018b57806354fd4d50146104f857806356781388146105225780635f398a141461054257806360c4247f1461056257806370b0f6601461058257600080fd5b80633932abb1146103f75780633bccf4fd1461040c5780633e4f49e61461042c5780634385963214610459578063544ffc9c146104a357600080fd5b8063150b7a021161020e578063150b7a021461032c578063160cbed7146103705780632656227d146103905780632d63f693146103a35780632fe3e261146103c357600080fd5b806301ffc9a71461027257806302a251a3146102a757806303420181146102ca57806306f3f9e6146102ea57806306fdde031461030a57600080fd5b3661026d573061025861088b565b6001600160a01b03161461026b57600080fd5b005b600080fd5b34801561027e57600080fd5b5061029261028d366004612db9565b6108a4565b60405190151581526020015b60405180910390f35b3480156102b357600080fd5b506102bc6108b5565b60405190815260200161029e565b3480156102d657600080fd5b506102bc6102e5366004612ef7565b6108c0565b3480156102f657600080fd5b5061026b610305366004612f9d565b6109b8565b34801561031657600080fd5b5061031f610a50565b60405161029e9190613003565b34801561033857600080fd5b5061035761034736600461302b565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161029e565b34801561037c57600080fd5b506102bc61038b366004613207565b610ae2565b6102bc61039e366004613207565b610ce2565b3480156103af57600080fd5b506102bc6103be366004612f9d565b610dcf565b3480156103cf57600080fd5b506102bc7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af8881565b34801561040357600080fd5b506102bc610e06565b34801561041857600080fd5b506102bc610427366004613296565b610e11565b34801561043857600080fd5b5061044c610447366004612f9d565b610e87565b60405161029e91906132fa565b34801561046557600080fd5b50610292610474366004613322565b60008281526007602090815260408083206001600160a01b038516845260030190915290205460ff1692915050565b3480156104af57600080fd5b506104dd6104be366004612f9d565b6000908152600760205260409020805460018201546002909201549092565b6040805193845260208401929092529082015260600161029e565b34801561050457600080fd5b506040805180820190915260018152603160f81b602082015261031f565b34801561052e57600080fd5b506102bc61053d366004613352565b610e92565b34801561054e57600080fd5b506102bc61055d36600461337e565b610ebb565b34801561056e57600080fd5b506102bc61057d366004612f9d565b610f05565b34801561058e57600080fd5b5061026b61059d366004612f9d565b610f9a565b3480156105ae57600080fd5b506102bc6105bd366004613401565b611026565b3480156105ce57600080fd5b506102bc6105dd36600461345a565b611078565b3480156105ee57600080fd5b5060646102bc565b34801561060257600080fd5b506102bc61061136600461350e565b61108f565b34801561062257600080fd5b506102bc6110a6565b34801561063757600080fd5b5061026b610646366004613566565b6110d0565b34801561065757600080fd5b506102bc610666366004612f9d565b61115c565b34801561067757600080fd5b506102bc6111f6565b34801561068c57600080fd5b5061035761069b366004613583565b63bc197c8160e01b95945050505050565b3480156106b857600080fd5b506102bc6106c7366004612f9d565b611201565b61026b6106da366004613616565b611230565b3480156106eb57600080fd5b506102bc6106fa366004613207565b611344565b34801561070b57600080fd5b50600a546001600160a01b03165b6040516001600160a01b03909116815260200161029e565b34801561073d57600080fd5b506040805180820190915260208082527f737570706f72743d627261766f2671756f72756d3d666f722c6162737461696e9082015261031f565b34801561078357600080fd5b506102bc7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b3480156107b757600080fd5b5061026b6107c6366004612f9d565b61137e565b3480156107d757600080fd5b506102bc6107e6366004613659565b61140a565b3480156107f757600080fd5b5061026b610806366004612f9d565b611416565b34801561081757600080fd5b50610357610826366004613685565b63f23a6e6160e01b95945050505050565b34801561084357600080fd5b506102bc610852366004612f9d565b6114a2565b34801561086357600080fd5b506107197f000000000000000000000000000000000000000000000000000000000000000081565b600061089f600a546001600160a01b031690565b905090565b60006108af826115f3565b92915050565b600061089f60055490565b60008061096461095c7fb3b3f3b703cd84ce352197dcff232b1b5d3cfb2025ce47cf04742d0651f1af888c8c8c8c6040516108fc9291906136ed565b60405180910390208b80519060200120604051602001610941959493929190948552602085019390935260ff9190911660408401526060830152608082015260a00190565b60405160208183030381529060405280519060200120611618565b868686611666565b90506109aa8a828b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611684915050565b9a9950505050505050505050565b6109c061088b565b6001600160a01b0316336001600160a01b0316146109f95760405162461bcd60e51b81526004016109f0906136fd565b60405180910390fd5b30610a0261088b565b6001600160a01b031614610a445760008036604051610a229291906136ed565b604051809103902090505b80610a3860026117e6565b14610a4257610a2d565b505b610a4d81611865565b50565b606060008054610a5f90613734565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8b90613734565b8015610ad85780601f10610aad57610100808354040283529160200191610ad8565b820191906000526020600020905b815481529060010190602001808311610abb57829003601f168201915b5050505050905090565b600080610af186868686611344565b90506004610afe82610e87565b6007811115610b0f57610b0f6132e4565b14610b2c5760405162461bcd60e51b81526004016109f09061376f565b600a546040805163793d064960e11b815290516000926001600160a01b03169163f27a0c929160048083019260209291908290030181865afa158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a91906137b0565b600a5460405163b1c5f42760e01b81529192506001600160a01b03169063b1c5f42790610bd4908a908a908a906000908b90600401613892565b602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1591906137b0565b6000838152600b602052604080822092909255600a5491516308f2a0bb60e41b81526001600160a01b0390921691638f2a0bb091610c60918b918b918b91908b9089906004016138e0565b600060405180830381600087803b158015610c7a57600080fd5b505af1158015610c8e573d6000803e3d6000fd5b505050507f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892828242610cc0919061394e565b6040805192835260208301919091520160405180910390a15095945050505050565b600080610cf186868686611344565b90506000610cfe82610e87565b90506004816007811115610d1457610d146132e4565b1480610d3157506005816007811115610d2f57610d2f6132e4565b145b610d4d5760405162461bcd60e51b81526004016109f09061376f565b600082815260016020818152604092839020600201805460ff191690921790915590518381527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f910160405180910390a1610dab82888888886119b1565b610db88288888888611a54565b610dc58288888888611a61565b5095945050505050565b60008181526001602090815260408083208151928301909152546001600160401b0316908190525b6001600160401b031692915050565b600061089f60045490565b604080517f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f602082015290810186905260ff851660608201526000908190610e5f9061095c90608001610941565b9050610e7c87828860405180602001604052806000815250611a9a565b979650505050505050565b60006108af82611c1d565b600080339050610eb384828560405180602001604052806000815250611a9a565b949350505050565b600080339050610e7c87828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250611684915050565b60095460009080610f1a575050600854919050565b60006009610f29600184613966565b81548110610f3957610f3961397d565b60009182526020918290206040805180820190915291015463ffffffff8116808352600160201b9091046001600160e01b03169282019290925291508410610f8f57602001516001600160e01b03169392505050565b610eb3600985611d67565b610fa261088b565b6001600160a01b0316336001600160a01b031614610fd25760405162461bcd60e51b81526004016109f0906136fd565b30610fdb61088b565b6001600160a01b03161461101d5760008036604051610ffb9291906136ed565b604051809103902090505b8061101160026117e6565b1461101b57611006565b505b610a4d81611e19565b60008033905061106e86828787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611a9a92505050565b9695505050505050565b600061108685858585611e5a565b95945050505050565b600061109c84848461211d565b90505b9392505050565b600954600090156110c9576110bb6009611550565b6001600160e01b0316905090565b5060085490565b6110d861088b565b6001600160a01b0316336001600160a01b0316146111085760405162461bcd60e51b81526004016109f0906136fd565b3061111161088b565b6001600160a01b03161461115357600080366040516111319291906136ed565b604051809103902090505b8061114760026117e6565b146111515761113c565b505b610a4d816121b3565b600a546000828152600b602052604080822054905163d45c443560e01b81526004810191909152909182916001600160a01b039091169063d45c443590602401602060405180830381865afa1580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd91906137b0565b9050806001146111ed578061109f565b60009392505050565b600061089f60065490565b60008181526001602081815260408084208151928301909152909101546001600160401b031690819052610df7565b61123861088b565b6001600160a01b0316336001600160a01b0316146112685760405162461bcd60e51b81526004016109f0906136fd565b3061127161088b565b6001600160a01b0316146112b357600080366040516112919291906136ed565b604051809103902090505b806112a760026117e6565b146112b15761129c565b505b600080856001600160a01b03168585856040516112d19291906136ed565b60006040518083038185875af1925050503d806000811461130e576040519150601f19603f3d011682016040523d82523d6000602084013e611313565b606091505b509150915061133b8282604051806060016040528060288152602001613c266028913961221c565b50505050505050565b60008484848460405160200161135d9493929190613993565b60408051601f19818403018152919052805160209091012095945050505050565b61138661088b565b6001600160a01b0316336001600160a01b0316146113b65760405162461bcd60e51b81526004016109f0906136fd565b306113bf61088b565b6001600160a01b03161461140157600080366040516113df9291906136ed565b604051809103902090505b806113f560026117e6565b146113ff576113ea565b505b610a4d81612235565b600061109f83836122d6565b61141e61088b565b6001600160a01b0316336001600160a01b03161461144e5760405162461bcd60e51b81526004016109f0906136fd565b3061145761088b565b6001600160a01b03161461149957600080366040516114779291906136ed565b604051809103902090505b8061148d60026117e6565b1461149757611482565b505b610a4d816122f7565b60006108af82612338565b60006001600160e01b038211156115165760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016109f0565b5090565b6000806115388461152a4361158e565b611533866114ad565b6123e2565b6001600160e01b0391821693501690505b9250929050565b805460009080156111ed576115788361156a600184613966565b600091825260209091200190565b54600160201b90046001600160e01b031661109f565b600063ffffffff8211156115165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016109f0565b60006001600160e01b03198216636e665ced60e01b14806108af57506108af8261258c565b60006108af6116256125f7565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b60008060006116778787878761271e565b91509150610dc5816127e2565b600085815260016020819052604082209061169e88610e87565b60078111156116af576116af6132e4565b146117085760405162461bcd60e51b815260206004820152602360248201527f476f7665726e6f723a20766f7465206e6f742063757272656e746c792061637460448201526269766560e81b60648201526084016109f0565b604080516020810190915281546001600160401b0316908190526000906117319088908661211d565b90506117408888888488612930565b835161179257866001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48988848960405161178594939291906139de565b60405180910390a2610e7c565b866001600160a01b03167fe2babfbac5889a709b63bb7f598b324e08bc5a4fb9ec647fb3cbc9ec07eb871289888489896040516117d3959493929190613a06565b60405180910390a2979650505050505050565b60006118018254600f81810b600160801b909204900b131590565b1561181f57604051631ed9509560e11b815260040160405180910390fd5b508054600f0b6000818152600180840160205260408220805492905583546fffffffffffffffffffffffffffffffff191692016001600160801b03169190911790915590565b60648111156118e85760405162461bcd60e51b815260206004820152604360248201527f476f7665726e6f72566f74657351756f72756d4672616374696f6e3a2071756f60448201527f72756d4e756d657261746f72206f7665722071756f72756d44656e6f6d696e616064820152623a37b960e91b608482015260a4016109f0565b60006118f26110a6565b905080158015906119035750600954155b1561196757604080518082019091526000815260099060208101611926846114ad565b6001600160e01b039081169091528254600181018455600093845260209384902083519490930151909116600160201b0263ffffffff909316929092179101555b61197260098361151a565b505060408051828152602081018490527f0553476bf02ef2726e8ce5ced78d63e26e602e4a2257b1f559418e24b4633997910160405180910390a15050565b306119ba61088b565b6001600160a01b031614611a4d5760005b8451811015611a4b57306001600160a01b03168582815181106119f0576119f061397d565b60200260200101516001600160a01b03161415611a3b57611a3b838281518110611a1c57611a1c61397d565b6020026020010151805190602001206002612aaf90919063ffffffff16565b611a4481613a4c565b90506119cb565b505b5050505050565b611a4d8585858585612aeb565b30611a6a61088b565b6001600160a01b031614611a4d57600254600f81810b600160801b909204900b1315611a4d576000600255611a4d565b600080611abe86868686611ab960408051602081019091526000815290565b611684565b600c549091506000906001600160a01b031663db230b52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3e91906137b0565b9050620186a0600060648311611b545782611b57565b60645b9050600082611b663a84613a67565b611b709190613a67565b90506000611b7f826064612b5f565b600d549091506001600160a01b03166323b872dd30336040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af1158015611be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0d9190613a86565b50949a9950505050505050505050565b600080611c2983612b6b565b90506004816007811115611c3f57611c3f6132e4565b14611c4a5792915050565b6000838152600b602052604090205480611c65575092915050565b600a54604051632ab0f52960e01b8152600481018390526001600160a01b0390911690632ab0f52990602401602060405180830381865afa158015611cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd29190613a86565b15611ce1575060079392505050565b600a54604051632c258a9f60e11b8152600481018390526001600160a01b039091169063584b153e90602401602060405180830381865afa158015611d2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4e9190613a86565b15611d5d575060059392505050565b5060029392505050565b6000438210611db85760405162461bcd60e51b815260206004820181905260248201527f436865636b706f696e74733a20626c6f636b206e6f7420796574206d696e656460448201526064016109f0565b6000611dc38361158e565b84549091506000611dd686848385612c77565b90508015611e0357611ded8661156a600184613966565b54600160201b90046001600160e01b0316611e06565b60005b6001600160e01b03169695505050505050565b60045460408051918252602082018390527fc565b045403dc03c2eea82b81a0465edad9e2e7fc4d97e11421c209da93d7a93910160405180910390a1600455565b6000611e646111f6565b611e73336107e6600143613966565b1015611edb5760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f723a2070726f706f73657220766f7465732062656c6f7720706044820152701c9bdc1bdcd85b081d1a1c995cda1bdb19607a1b60648201526084016109f0565b6000611ef08686868680519060200120611344565b90508451865114611f135760405162461bcd60e51b81526004016109f090613aa8565b8351865114611f345760405162461bcd60e51b81526004016109f090613aa8565b6000865111611f855760405162461bcd60e51b815260206004820152601860248201527f476f7665726e6f723a20656d7074792070726f706f73616c000000000000000060448201526064016109f0565b600081815260016020908152604091829020825191820190925281546001600160401b031690819052156120055760405162461bcd60e51b815260206004820152602160248201527f476f7665726e6f723a2070726f706f73616c20616c72656164792065786973746044820152607360f81b60648201526084016109f0565b6000612017612012610e06565b612cd5565b61202043612cd5565b61202a9190613ae9565b905060006120396120126108b5565b6120439083613ae9565b835467ffffffffffffffff19166001600160401b038416178455905060018301805467ffffffffffffffff19166001600160401b0383161790557f7d84a6263ae0d98d3329bd7b46bb4e8d6f98cd35a7adb45c274c8b7fd5ebd5e084338b8b8d516001600160401b038111156120bb576120bb612e3a565b6040519080825280602002602001820160405280156120ee57816020015b60608152602001906001900390816120d95790505b508c88888e60405161210899989796959493929190613b14565b60405180910390a15091979650505050505050565b604051630748d63560e31b81526001600160a01b038481166004830152602482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690633a46b1a890604401602060405180830381865afa15801561218f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109c91906137b0565b600a54604080516001600160a01b03928316815291831660208301527f08f74ea46ef7894f65eabfb5e6e695de773a000b47c529ab559178069b226401910160405180910390a1600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6060831561222b57508161109f565b61109f8383612d3d565b600081116122955760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f7253657474696e67733a20766f74696e6720706572696f6420604482015266746f6f206c6f7760c81b60648201526084016109f0565b60055460408051918252602082018390527f7e3f7f0708a84de9203036abaa450dccc85ad5ff52f78c170f3edb55cf5e8828910160405180910390a1600555565b600061109f83836122f260408051602081019091526000815290565b61211d565b60065460408051918252602082018390527fccb45da8d5717e6c4544694297c4ba5cf151d455c9bb0ed4fc7a38411bc05461910160405180910390a1600655565b6000606461234583610f05565b604051632394e7a360e21b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e539e8c90602401602060405180830381865afa1580156123aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ce91906137b0565b6123d89190613a67565b6108af9190613c03565b82546000908190801561252f5760006124008761156a600185613966565b60408051808201909152905463ffffffff808216808452600160201b9092046001600160e01b0316602084015291925090871610156124815760405162461bcd60e51b815260206004820152601760248201527f436865636b706f696e743a20696e76616c6964206b657900000000000000000060448201526064016109f0565b8563ffffffff16816000015163ffffffff1614156124d057846124a98861156a600186613966565b80546001600160e01b0392909216600160201b0263ffffffff90921691909117905561251f565b6040805180820190915263ffffffff80881682526001600160e01b0380881660208085019182528b54600181018d5560008d81529190912094519151909216600160201b029216919091179101555b6020015192508391506125849050565b50506040805180820190915263ffffffff80851682526001600160e01b0380851660208085019182528854600181018a5560008a815291822095519251909316600160201b0291909316179201919091559050815b935093915050565b60006001600160e01b0319821663bf26d89760e01b14806125bd57506001600160e01b031982166379dd796f60e01b145b806125d857506001600160e01b03198216630271189760e51b145b806108af57506301ffc9a760e01b6001600160e01b03198316146108af565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561265057507f000000000000000000000000000000000000000000000000000000000000000046145b1561267a57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561275557506000905060036127d9565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156127a9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166127d2576000600192509250506127d9565b9150600090505b94509492505050565b60008160048111156127f6576127f66132e4565b14156127ff5750565b6001816004811115612813576128136132e4565b14156128615760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016109f0565b6002816004811115612875576128756132e4565b14156128c35760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016109f0565b60038160048111156128d7576128d76132e4565b1415610a4d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016109f0565b60008581526007602090815260408083206001600160a01b0388168452600381019092529091205460ff16156129b85760405162461bcd60e51b815260206004820152602760248201527f476f7665726e6f72566f74696e6753696d706c653a20766f746520616c726561604482015266191e4818d85cdd60ca1b60648201526084016109f0565b6001600160a01b03851660009081526003820160205260408120805460ff1916600117905560ff168460ff161415612a0957828160000160008282546129fe919061394e565b90915550611a4b9050565b60ff841660011415612a2957828160010160008282546129fe919061394e565b60ff841660021415612a4957828160020160008282546129fe919061394e565b60405162461bcd60e51b815260206004820152603560248201527f476f7665726e6f72566f74696e6753696d706c653a20696e76616c69642076616044820152746c756520666f7220656e756d20566f74655479706560581b60648201526084016109f0565b8154600160801b90819004600f0b6000818152600180860160205260409091209390935583546001600160801b03908116939091011602179055565b600a5460405163e38335e560e01b81526001600160a01b039091169063e38335e5903490612b26908890889088906000908990600401613892565b6000604051808303818588803b158015612b3f57600080fd5b505af1158015612b53573d6000803e3d6000fd5b50505050505050505050565b600061109f8284613c03565b6000818152600160205260408120600281015460ff1615612b8f5750600792915050565b6002810154610100900460ff1615612baa5750600292915050565b6000612bb584610dcf565b905080612c045760405162461bcd60e51b815260206004820152601d60248201527f476f7665726e6f723a20756e6b6e6f776e2070726f706f73616c20696400000060448201526064016109f0565b438110612c15575060009392505050565b6000612c2085611201565b9050438110612c3457506001949350505050565b612c3d85612d67565b8015612c5c575060008581526007602052604090208054600190910154115b15612c6c57506004949350505050565b506003949350505050565b60005b81831015612ccd576000612c8e8484612d9e565b60008781526020902090915063ffffffff86169082015463ffffffff161115612cb957809250612cc7565b612cc481600161394e565b93505b50612c7a565b509392505050565b60006001600160401b038211156115165760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b60648201526084016109f0565b815115612d4d5781518083602001fd5b8060405162461bcd60e51b81526004016109f09190613003565b600081815260076020526040812060028101546001820154612d89919061394e565b612d9561085285610dcf565b11159392505050565b6000612dad6002848418613c03565b61109f9084841661394e565b600060208284031215612dcb57600080fd5b81356001600160e01b03198116811461109f57600080fd5b803560ff81168114612df457600080fd5b919050565b60008083601f840112612e0b57600080fd5b5081356001600160401b03811115612e2257600080fd5b60208301915083602082850101111561154957600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612e7857612e78612e3a565b604052919050565b60006001600160401b03831115612e9957612e99612e3a565b612eac601f8401601f1916602001612e50565b9050828152838383011115612ec057600080fd5b828260208301376000602084830101529392505050565b600082601f830112612ee857600080fd5b61109f83833560208501612e80565b60008060008060008060008060e0898b031215612f1357600080fd5b88359750612f2360208a01612de3565b965060408901356001600160401b0380821115612f3f57600080fd5b612f4b8c838d01612df9565b909850965060608b0135915080821115612f6457600080fd5b50612f718b828c01612ed7565b945050612f8060808a01612de3565b925060a0890135915060c089013590509295985092959890939650565b600060208284031215612faf57600080fd5b5035919050565b6000815180845260005b81811015612fdc57602081850181015186830182015201612fc0565b81811115612fee576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061109f6020830184612fb6565b6001600160a01b0381168114610a4d57600080fd5b6000806000806080858703121561304157600080fd5b843561304c81613016565b9350602085013561305c81613016565b92506040850135915060608501356001600160401b0381111561307e57600080fd5b61308a87828801612ed7565b91505092959194509250565b60006001600160401b038211156130af576130af612e3a565b5060051b60200190565b600082601f8301126130ca57600080fd5b813560206130df6130da83613096565b612e50565b82815260059290921b840181019181810190868411156130fe57600080fd5b8286015b8481101561312257803561311581613016565b8352918301918301613102565b509695505050505050565b600082601f83011261313e57600080fd5b8135602061314e6130da83613096565b82815260059290921b8401810191818101908684111561316d57600080fd5b8286015b848110156131225780358352918301918301613171565b600082601f83011261319957600080fd5b813560206131a96130da83613096565b82815260059290921b840181019181810190868411156131c857600080fd5b8286015b848110156131225780356001600160401b038111156131eb5760008081fd5b6131f98986838b0101612ed7565b8452509183019183016131cc565b6000806000806080858703121561321d57600080fd5b84356001600160401b038082111561323457600080fd5b613240888389016130b9565b9550602087013591508082111561325657600080fd5b6132628883890161312d565b9450604087013591508082111561327857600080fd5b5061328587828801613188565b949793965093946060013593505050565b600080600080600060a086880312156132ae57600080fd5b853594506132be60208701612de3565b93506132cc60408701612de3565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b602081016008831061331c57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561333557600080fd5b82359150602083013561334781613016565b809150509250929050565b6000806040838503121561336557600080fd5b8235915061337560208401612de3565b90509250929050565b60008060008060006080868803121561339657600080fd5b853594506133a660208701612de3565b935060408601356001600160401b03808211156133c257600080fd5b6133ce89838a01612df9565b909550935060608801359150808211156133e757600080fd5b506133f488828901612ed7565b9150509295509295909350565b6000806000806060858703121561341757600080fd5b8435935061342760208601612de3565b925060408501356001600160401b0381111561344257600080fd5b61344e87828801612df9565b95989497509550505050565b6000806000806080858703121561347057600080fd5b84356001600160401b038082111561348757600080fd5b613493888389016130b9565b955060208701359150808211156134a957600080fd5b6134b58883890161312d565b945060408701359150808211156134cb57600080fd5b6134d788838901613188565b935060608701359150808211156134ed57600080fd5b508501601f810187136134ff57600080fd5b61308a87823560208401612e80565b60008060006060848603121561352357600080fd5b833561352e81613016565b92506020840135915060408401356001600160401b0381111561355057600080fd5b61355c86828701612ed7565b9150509250925092565b60006020828403121561357857600080fd5b813561109f81613016565b600080600080600060a0868803121561359b57600080fd5b85356135a681613016565b945060208601356135b681613016565b935060408601356001600160401b03808211156135d257600080fd5b6135de89838a0161312d565b945060608801359150808211156135f457600080fd5b61360089838a0161312d565b935060808801359150808211156133e757600080fd5b6000806000806060858703121561362c57600080fd5b843561363781613016565b93506020850135925060408501356001600160401b0381111561344257600080fd5b6000806040838503121561366c57600080fd5b823561367781613016565b946020939093013593505050565b600080600080600060a0868803121561369d57600080fd5b85356136a881613016565b945060208601356136b881613016565b9350604086013592506060860135915060808601356001600160401b038111156136e157600080fd5b6133f488828901612ed7565b8183823760009101908152919050565b60208082526018908201527f476f7665726e6f723a206f6e6c79476f7665726e616e63650000000000000000604082015260600190565b600181811c9082168061374857607f821691505b6020821081141561376957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526021908201527f476f7665726e6f723a2070726f706f73616c206e6f74207375636365737366756040820152601b60fa1b606082015260800190565b6000602082840312156137c257600080fd5b5051919050565b600081518084526020808501945080840160005b838110156138025781516001600160a01b0316875295820195908201906001016137dd565b509495945050505050565b600081518084526020808501945080840160005b8381101561380257815187529582019590820190600101613821565b600081518084526020808501808196508360051b8101915082860160005b85811015613885578284038952613873848351612fb6565b9885019893509084019060010161385b565b5091979650505050505050565b60a0815260006138a560a08301886137c9565b82810360208401526138b7818861380d565b905082810360408401526138cb818761383d565b60608401959095525050608001529392505050565b60c0815260006138f360c08301896137c9565b8281036020840152613905818961380d565b90508281036040840152613919818861383d565b60608401969096525050608081019290925260a0909101529392505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561396157613961613938565b500190565b60008282101561397857613978613938565b500390565b634e487b7160e01b600052603260045260246000fd5b6080815260006139a660808301876137c9565b82810360208401526139b8818761380d565b905082810360408401526139cc818661383d565b91505082606083015295945050505050565b84815260ff8416602082015282604082015260806060820152600061106e6080830184612fb6565b85815260ff8516602082015283604082015260a060608201526000613a2e60a0830185612fb6565b8281036080840152613a408185612fb6565b98975050505050505050565b6000600019821415613a6057613a60613938565b5060010190565b6000816000190483118215151615613a8157613a81613938565b500290565b600060208284031215613a9857600080fd5b8151801515811461109f57600080fd5b60208082526021908201527f476f7665726e6f723a20696e76616c69642070726f706f73616c206c656e67746040820152600d60fb1b606082015260800190565b60006001600160401b03808316818516808303821115613b0b57613b0b613938565b01949350505050565b60006101208b8352602060018060a01b038c1681850152816040850152613b3d8285018c6137c9565b91508382036060850152613b51828b61380d565b915083820360808501528189518084528284019150828160051b850101838c0160005b83811015613ba257601f19878403018552613b90838351612fb6565b94860194925090850190600101613b74565b505086810360a0880152613bb6818c61383d565b945050505050613bd160c08401876001600160401b03169052565b6001600160401b03851660e0840152828103610100840152613bf38185612fb6565b9c9b505050505050505050505050565b600082613c2057634e487b7160e01b600052601260045260246000fd5b50049056fe476f7665726e6f723a2072656c617920726576657274656420776974686f7574206d657373616765a2646970667358221220acbff85bd0305382ce013a1f5743bfbd45a98c83f3c4bf5a71d76dd28ac79c7364736f6c634300080c003300000000000000000000000064845507e9304ea3427440837d5a000d9aa08fc000000000000000000000000053772b323ae754007d320125f60e7da15963c5ef0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000010000000000000000000000003baef58f49e836d5127a161ce827ecba3577b73d",
      "r": "0xd7cda7710cdf542e967f6d22ff4bb71d8a1cc72abeae6c021bbccd7a7dea7f97",
      "s": "0x5a2b68b81927cb461ef43943215f56506930ab489661c3bc62aedef436a635d0",
      "v": 10038,
      "chainId": 5001
    }
  }
}